;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Harness : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module SubReg : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 33:20]
    wr_en <= _wr_en_T @[SubReg.scala 33:11]
    node _wr_data_T = mux(io.de, io.d, q_reg) @[SubReg.scala 34:19]
    node _wr_data_T_1 = not(io.wd) @[SubReg.scala 34:53]
    node _wr_data_T_2 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _wr_data_T_3 = mux(io.we, _wr_data_T_1, _wr_data_T_2) @[SubReg.scala 34:45]
    node _wr_data_T_4 = and(_wr_data_T, _wr_data_T_3) @[SubReg.scala 34:40]
    wr_data <= _wr_data_T_4 @[SubReg.scala 34:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubReg_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    wr_en <= io.de @[SubReg.scala 30:11]
    wr_data <= io.d @[SubReg.scala 31:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubReg_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module GpioRegTop : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}}, hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}}}
    
    io.req.ready <= UInt<1>("h01") @[GpioRegTop.scala 18:16]
    wire reg_we : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_re : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_error : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_wdata : UInt<32> @[GpioRegTop.scala 25:34]
    wire reg_rdata : UInt<32> @[GpioRegTop.scala 25:34]
    wire reg_addr : UInt<6> @[GpioRegTop.scala 26:22]
    wire reg_be : UInt<4> @[GpioRegTop.scala 27:20]
    wire addr_miss : UInt<1> @[GpioRegTop.scala 29:31]
    wire wr_err : UInt<1> @[GpioRegTop.scala 29:31]
    wire reg_rdata_next : UInt<32> @[GpioRegTop.scala 30:28]
    node _reg_we_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _reg_we_T_1 = mux(_reg_we_T, io.req.bits.isWrite, UInt<1>("h00")) @[GpioRegTop.scala 33:16]
    reg_we <= _reg_we_T_1 @[GpioRegTop.scala 33:10]
    node _reg_re_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _reg_re_T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[GpioRegTop.scala 34:32]
    node _reg_re_T_2 = mux(_reg_re_T, _reg_re_T_1, UInt<1>("h00")) @[GpioRegTop.scala 34:16]
    reg_re <= _reg_re_T_2 @[GpioRegTop.scala 34:10]
    reg_wdata <= io.req.bits.dataRequest @[GpioRegTop.scala 35:13]
    reg_addr <= io.req.bits.addrRequest @[GpioRegTop.scala 36:12]
    reg_be <= io.req.bits.activeByteLane @[GpioRegTop.scala 37:10]
    node _io_rsp_valid_T = or(reg_we, reg_re) @[GpioRegTop.scala 39:38]
    node _io_rsp_valid_T_1 = mux(_io_rsp_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 39:30]
    reg io_rsp_valid_REG : UInt<1>, clock @[GpioRegTop.scala 39:26]
    io_rsp_valid_REG <= _io_rsp_valid_T_1 @[GpioRegTop.scala 39:26]
    io.rsp.valid <= io_rsp_valid_REG @[GpioRegTop.scala 39:16]
    io.rsp.bits.dataResponse <= reg_rdata @[GpioRegTop.scala 40:28]
    io.rsp.bits.error <= reg_error @[GpioRegTop.scala 41:21]
    reg_rdata <= reg_rdata_next @[GpioRegTop.scala 43:13]
    node _reg_error_T = or(addr_miss, wr_err) @[GpioRegTop.scala 44:26]
    reg_error <= _reg_error_T @[GpioRegTop.scala 44:13]
    wire intr_state_qs : UInt<32> @[GpioRegTop.scala 47:42]
    wire intr_state_wd : UInt<32> @[GpioRegTop.scala 47:42]
    wire intr_state_we : UInt<1> @[GpioRegTop.scala 48:27]
    wire intr_enable_qs : UInt<32> @[GpioRegTop.scala 50:44]
    wire intr_enable_wd : UInt<32> @[GpioRegTop.scala 50:44]
    wire intr_enable_we : UInt<1> @[GpioRegTop.scala 51:28]
    wire intr_test_wd : UInt<32> @[GpioRegTop.scala 53:26]
    wire intr_test_we : UInt<1> @[GpioRegTop.scala 54:26]
    wire data_in_qs : UInt<32> @[GpioRegTop.scala 56:24]
    wire direct_out_qs : UInt<32> @[GpioRegTop.scala 58:42]
    wire direct_out_wd : UInt<32> @[GpioRegTop.scala 58:42]
    wire direct_out_we : UInt<1> @[GpioRegTop.scala 59:42]
    wire direct_out_re : UInt<1> @[GpioRegTop.scala 59:42]
    wire masked_out_lower_data_qs : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_data_wd : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_mask_wd : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_data_we : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_lower_data_re : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_lower_mask_we : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_upper_data_qs : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_data_wd : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_mask_wd : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_data_we : UInt<1> @[GpioRegTop.scala 65:90]
    wire masked_out_upper_data_re : UInt<1> @[GpioRegTop.scala 65:90]
    wire masked_out_upper_mask_we : UInt<1> @[GpioRegTop.scala 65:90]
    wire direct_oe_qs : UInt<32> @[GpioRegTop.scala 67:26]
    wire direct_oe_wd : UInt<32> @[GpioRegTop.scala 68:26]
    wire direct_oe_we : UInt<1> @[GpioRegTop.scala 69:40]
    wire direct_oe_re : UInt<1> @[GpioRegTop.scala 69:40]
    wire masked_oe_lower_data_qs : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_data_wd : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_mask_wd : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_mask_qs : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_data_we : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_data_re : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_mask_we : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_mask_re : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_upper_data_qs : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_data_wd : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_mask_wd : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_mask_qs : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_data_we : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_data_re : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_mask_we : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_mask_re : UInt<1> @[GpioRegTop.scala 75:112]
    wire intr_ctrl_en_rising_qs : UInt<32> @[GpioRegTop.scala 77:60]
    wire intr_ctrl_en_rising_wd : UInt<32> @[GpioRegTop.scala 77:60]
    wire intr_ctrl_en_rising_we : UInt<1> @[GpioRegTop.scala 78:36]
    wire intr_ctrl_en_falling_qs : UInt<32> @[GpioRegTop.scala 80:62]
    wire intr_ctrl_en_falling_wd : UInt<32> @[GpioRegTop.scala 80:62]
    wire intr_ctrl_en_falling_we : UInt<1> @[GpioRegTop.scala 81:37]
    wire intr_ctrl_en_lvlhigh_qs : UInt<32> @[GpioRegTop.scala 83:62]
    wire intr_ctrl_en_lvlhigh_wd : UInt<32> @[GpioRegTop.scala 83:62]
    wire intr_ctrl_en_lvlhigh_we : UInt<1> @[GpioRegTop.scala 84:37]
    wire intr_ctrl_en_lvllow_qs : UInt<32> @[GpioRegTop.scala 86:60]
    wire intr_ctrl_en_lvllow_wd : UInt<32> @[GpioRegTop.scala 86:60]
    wire intr_ctrl_en_lvllow_we : UInt<1> @[GpioRegTop.scala 87:36]
    inst intr_state_reg of SubReg @[GpioRegTop.scala 93:30]
    intr_state_reg.clock <= clock
    intr_state_reg.reset <= reset
    intr_state_reg.io.we <= intr_state_we @[GpioRegTop.scala 95:24]
    intr_state_reg.io.wd <= intr_state_wd @[GpioRegTop.scala 97:24]
    intr_state_reg.io.de <= io.hw2reg.intr_state.de @[GpioRegTop.scala 99:24]
    intr_state_reg.io.d <= io.hw2reg.intr_state.d @[GpioRegTop.scala 101:23]
    io.reg2hw.intr_state.q <= intr_state_reg.io.q @[GpioRegTop.scala 103:26]
    intr_state_qs <= intr_state_reg.io.qs @[GpioRegTop.scala 105:17]
    inst intr_enable_reg of SubReg_1 @[GpioRegTop.scala 108:31]
    intr_enable_reg.clock <= clock
    intr_enable_reg.reset <= reset
    intr_enable_reg.io.we <= intr_enable_we @[GpioRegTop.scala 109:25]
    intr_enable_reg.io.wd <= intr_enable_wd @[GpioRegTop.scala 110:25]
    intr_enable_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 111:24]
    intr_enable_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 112:25]
    io.reg2hw.intr_enable.q <= intr_enable_reg.io.q @[GpioRegTop.scala 113:27]
    intr_enable_qs <= intr_enable_reg.io.qs @[GpioRegTop.scala 114:18]
    inst intr_test_reg of SubRegExt @[GpioRegTop.scala 117:29]
    intr_test_reg.clock <= clock
    intr_test_reg.reset <= reset
    intr_test_reg.io.we <= intr_test_we @[GpioRegTop.scala 118:23]
    intr_test_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 119:23]
    intr_test_reg.io.wd <= intr_test_wd @[GpioRegTop.scala 120:23]
    intr_test_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 121:22]
    io.reg2hw.intr_test.qe <= intr_test_reg.io.qe @[GpioRegTop.scala 122:26]
    io.reg2hw.intr_test.q <= intr_test_reg.io.q @[GpioRegTop.scala 123:25]
    inst data_in_reg of SubReg_2 @[GpioRegTop.scala 126:27]
    data_in_reg.clock <= clock
    data_in_reg.reset <= reset
    data_in_reg.io.we <= UInt<1>("h00") @[GpioRegTop.scala 127:21]
    data_in_reg.io.wd <= UInt<32>("h00") @[GpioRegTop.scala 128:21]
    data_in_reg.io.de <= io.hw2reg.data_in.de @[GpioRegTop.scala 129:21]
    data_in_reg.io.d <= io.hw2reg.data_in.d @[GpioRegTop.scala 130:20]
    data_in_qs <= data_in_reg.io.qs @[GpioRegTop.scala 131:14]
    inst direct_out_reg of SubRegExt_1 @[GpioRegTop.scala 134:30]
    direct_out_reg.clock <= clock
    direct_out_reg.reset <= reset
    direct_out_reg.io.re <= direct_out_re @[GpioRegTop.scala 135:24]
    direct_out_reg.io.we <= direct_out_we @[GpioRegTop.scala 136:24]
    direct_out_reg.io.wd <= direct_out_wd @[GpioRegTop.scala 137:24]
    direct_out_reg.io.d <= io.hw2reg.direct_out.d @[GpioRegTop.scala 138:23]
    io.reg2hw.direct_out.qe <= direct_out_reg.io.qe @[GpioRegTop.scala 139:27]
    io.reg2hw.direct_out.q <= direct_out_reg.io.q @[GpioRegTop.scala 140:26]
    direct_out_qs <= direct_out_reg.io.qs @[GpioRegTop.scala 141:17]
    inst masked_out_lower_data_reg of SubRegExt_2 @[GpioRegTop.scala 145:41]
    masked_out_lower_data_reg.clock <= clock
    masked_out_lower_data_reg.reset <= reset
    masked_out_lower_data_reg.io.re <= masked_out_lower_data_re @[GpioRegTop.scala 146:35]
    masked_out_lower_data_reg.io.we <= masked_out_lower_data_we @[GpioRegTop.scala 147:35]
    masked_out_lower_data_reg.io.wd <= masked_out_lower_data_wd @[GpioRegTop.scala 148:35]
    masked_out_lower_data_reg.io.d <= io.hw2reg.masked_out_lower.data.d @[GpioRegTop.scala 149:34]
    io.reg2hw.masked_out_lower.data.qe <= masked_out_lower_data_reg.io.qe @[GpioRegTop.scala 150:38]
    io.reg2hw.masked_out_lower.data.q <= masked_out_lower_data_reg.io.q @[GpioRegTop.scala 151:37]
    masked_out_lower_data_qs <= masked_out_lower_data_reg.io.qs @[GpioRegTop.scala 152:28]
    inst masked_out_lower_mask_reg of SubRegExt_3 @[GpioRegTop.scala 156:41]
    masked_out_lower_mask_reg.clock <= clock
    masked_out_lower_mask_reg.reset <= reset
    masked_out_lower_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 157:35]
    masked_out_lower_mask_reg.io.we <= masked_out_lower_mask_we @[GpioRegTop.scala 158:35]
    masked_out_lower_mask_reg.io.wd <= masked_out_lower_mask_wd @[GpioRegTop.scala 159:35]
    masked_out_lower_mask_reg.io.d <= io.hw2reg.masked_out_lower.mask.d @[GpioRegTop.scala 160:34]
    io.reg2hw.masked_out_lower.mask.qe <= masked_out_lower_mask_reg.io.qe @[GpioRegTop.scala 161:38]
    io.reg2hw.masked_out_lower.mask.q <= masked_out_lower_mask_reg.io.q @[GpioRegTop.scala 162:37]
    inst masked_out_upper_data_reg of SubRegExt_4 @[GpioRegTop.scala 166:41]
    masked_out_upper_data_reg.clock <= clock
    masked_out_upper_data_reg.reset <= reset
    masked_out_upper_data_reg.io.re <= masked_out_upper_data_re @[GpioRegTop.scala 167:35]
    masked_out_upper_data_reg.io.we <= masked_out_upper_data_we @[GpioRegTop.scala 168:35]
    masked_out_upper_data_reg.io.wd <= masked_out_upper_data_wd @[GpioRegTop.scala 169:35]
    masked_out_upper_data_reg.io.d <= io.hw2reg.masked_out_upper.data.d @[GpioRegTop.scala 170:34]
    io.reg2hw.masked_out_upper.data.qe <= masked_out_upper_data_reg.io.qe @[GpioRegTop.scala 171:38]
    io.reg2hw.masked_out_upper.data.q <= masked_out_upper_data_reg.io.q @[GpioRegTop.scala 172:37]
    masked_out_upper_data_qs <= masked_out_upper_data_reg.io.qs @[GpioRegTop.scala 173:28]
    inst masked_out_upper_mask_reg of SubRegExt_5 @[GpioRegTop.scala 177:41]
    masked_out_upper_mask_reg.clock <= clock
    masked_out_upper_mask_reg.reset <= reset
    masked_out_upper_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 178:35]
    masked_out_upper_mask_reg.io.we <= masked_out_upper_mask_we @[GpioRegTop.scala 179:35]
    masked_out_upper_mask_reg.io.wd <= masked_out_upper_mask_wd @[GpioRegTop.scala 180:35]
    masked_out_upper_mask_reg.io.d <= io.hw2reg.masked_out_upper.mask.d @[GpioRegTop.scala 181:34]
    io.reg2hw.masked_out_upper.mask.qe <= masked_out_upper_mask_reg.io.qe @[GpioRegTop.scala 182:38]
    io.reg2hw.masked_out_upper.mask.q <= masked_out_upper_mask_reg.io.q @[GpioRegTop.scala 183:37]
    inst direct_oe_reg of SubRegExt_6 @[GpioRegTop.scala 186:29]
    direct_oe_reg.clock <= clock
    direct_oe_reg.reset <= reset
    direct_oe_reg.io.re <= direct_oe_re @[GpioRegTop.scala 187:23]
    direct_oe_reg.io.we <= direct_oe_we @[GpioRegTop.scala 188:23]
    direct_oe_reg.io.wd <= direct_oe_wd @[GpioRegTop.scala 189:23]
    direct_oe_reg.io.d <= io.hw2reg.direct_oe.d @[GpioRegTop.scala 190:22]
    io.reg2hw.direct_oe.qe <= direct_oe_reg.io.qe @[GpioRegTop.scala 191:26]
    io.reg2hw.direct_oe.q <= direct_oe_reg.io.q @[GpioRegTop.scala 192:25]
    direct_oe_qs <= direct_oe_reg.io.qs @[GpioRegTop.scala 193:16]
    inst masked_oe_lower_data_reg of SubRegExt_7 @[GpioRegTop.scala 197:40]
    masked_oe_lower_data_reg.clock <= clock
    masked_oe_lower_data_reg.reset <= reset
    masked_oe_lower_data_reg.io.re <= masked_oe_lower_data_re @[GpioRegTop.scala 198:34]
    masked_oe_lower_data_reg.io.we <= masked_oe_lower_data_we @[GpioRegTop.scala 199:34]
    masked_oe_lower_data_reg.io.wd <= masked_oe_lower_data_wd @[GpioRegTop.scala 200:34]
    masked_oe_lower_data_reg.io.d <= io.hw2reg.masked_oe_lower.data.d @[GpioRegTop.scala 201:33]
    io.reg2hw.masked_oe_lower.data.qe <= masked_oe_lower_data_reg.io.qe @[GpioRegTop.scala 202:37]
    io.reg2hw.masked_oe_lower.data.q <= masked_oe_lower_data_reg.io.q @[GpioRegTop.scala 203:36]
    masked_oe_lower_data_qs <= masked_oe_lower_data_reg.io.qs @[GpioRegTop.scala 204:27]
    inst masked_oe_lower_mask_reg of SubRegExt_8 @[GpioRegTop.scala 208:40]
    masked_oe_lower_mask_reg.clock <= clock
    masked_oe_lower_mask_reg.reset <= reset
    masked_oe_lower_mask_reg.io.re <= masked_oe_lower_mask_re @[GpioRegTop.scala 209:34]
    masked_oe_lower_mask_reg.io.we <= masked_oe_lower_mask_we @[GpioRegTop.scala 210:34]
    masked_oe_lower_mask_reg.io.wd <= masked_oe_lower_mask_wd @[GpioRegTop.scala 211:34]
    masked_oe_lower_mask_reg.io.d <= io.hw2reg.masked_oe_lower.mask.d @[GpioRegTop.scala 212:33]
    io.reg2hw.masked_oe_lower.mask.qe <= masked_oe_lower_mask_reg.io.qe @[GpioRegTop.scala 213:37]
    io.reg2hw.masked_oe_lower.mask.q <= masked_oe_lower_mask_reg.io.q @[GpioRegTop.scala 214:36]
    masked_oe_lower_mask_qs <= masked_oe_lower_mask_reg.io.qs @[GpioRegTop.scala 215:27]
    inst masked_oe_upper_data_reg of SubRegExt_9 @[GpioRegTop.scala 219:40]
    masked_oe_upper_data_reg.clock <= clock
    masked_oe_upper_data_reg.reset <= reset
    masked_oe_upper_data_reg.io.re <= masked_oe_upper_data_re @[GpioRegTop.scala 220:34]
    masked_oe_upper_data_reg.io.we <= masked_oe_upper_data_we @[GpioRegTop.scala 221:34]
    masked_oe_upper_data_reg.io.wd <= masked_oe_upper_data_wd @[GpioRegTop.scala 222:34]
    masked_oe_upper_data_reg.io.d <= io.hw2reg.masked_oe_upper.data.d @[GpioRegTop.scala 223:33]
    io.reg2hw.masked_oe_upper.data.qe <= masked_oe_upper_data_reg.io.qe @[GpioRegTop.scala 224:37]
    io.reg2hw.masked_oe_upper.data.q <= masked_oe_upper_data_reg.io.q @[GpioRegTop.scala 225:36]
    masked_oe_upper_data_qs <= masked_oe_upper_data_reg.io.qs @[GpioRegTop.scala 226:27]
    inst masked_oe_upper_mask_reg of SubRegExt_10 @[GpioRegTop.scala 230:40]
    masked_oe_upper_mask_reg.clock <= clock
    masked_oe_upper_mask_reg.reset <= reset
    masked_oe_upper_mask_reg.io.re <= masked_oe_upper_mask_re @[GpioRegTop.scala 231:34]
    masked_oe_upper_mask_reg.io.we <= masked_oe_upper_mask_we @[GpioRegTop.scala 232:34]
    masked_oe_upper_mask_reg.io.wd <= masked_oe_upper_mask_wd @[GpioRegTop.scala 233:34]
    masked_oe_upper_mask_reg.io.d <= io.hw2reg.masked_oe_upper.mask.d @[GpioRegTop.scala 234:33]
    io.reg2hw.masked_oe_upper.mask.qe <= masked_oe_upper_mask_reg.io.qe @[GpioRegTop.scala 235:37]
    io.reg2hw.masked_oe_upper.mask.q <= masked_oe_upper_mask_reg.io.q @[GpioRegTop.scala 236:36]
    masked_oe_upper_mask_qs <= masked_oe_upper_mask_reg.io.qs @[GpioRegTop.scala 237:27]
    inst intr_ctrl_en_rising_reg of SubReg_3 @[GpioRegTop.scala 240:39]
    intr_ctrl_en_rising_reg.clock <= clock
    intr_ctrl_en_rising_reg.reset <= reset
    intr_ctrl_en_rising_reg.io.we <= intr_ctrl_en_rising_we @[GpioRegTop.scala 241:33]
    intr_ctrl_en_rising_reg.io.wd <= intr_ctrl_en_rising_wd @[GpioRegTop.scala 242:33]
    intr_ctrl_en_rising_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 243:33]
    intr_ctrl_en_rising_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 244:32]
    io.reg2hw.intr_ctrl_en_rising.q <= intr_ctrl_en_rising_reg.io.q @[GpioRegTop.scala 245:35]
    intr_ctrl_en_rising_qs <= intr_ctrl_en_rising_reg.io.qs @[GpioRegTop.scala 246:26]
    inst intr_ctrl_en_falling_reg of SubReg_4 @[GpioRegTop.scala 249:40]
    intr_ctrl_en_falling_reg.clock <= clock
    intr_ctrl_en_falling_reg.reset <= reset
    intr_ctrl_en_falling_reg.io.we <= intr_ctrl_en_falling_we @[GpioRegTop.scala 250:34]
    intr_ctrl_en_falling_reg.io.wd <= intr_ctrl_en_falling_wd @[GpioRegTop.scala 251:34]
    intr_ctrl_en_falling_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 252:34]
    intr_ctrl_en_falling_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 253:33]
    io.reg2hw.intr_ctrl_en_falling.q <= intr_ctrl_en_falling_reg.io.q @[GpioRegTop.scala 254:36]
    intr_ctrl_en_falling_qs <= intr_ctrl_en_falling_reg.io.qs @[GpioRegTop.scala 255:27]
    inst intr_ctrl_en_lvlhigh_reg of SubReg_5 @[GpioRegTop.scala 258:40]
    intr_ctrl_en_lvlhigh_reg.clock <= clock
    intr_ctrl_en_lvlhigh_reg.reset <= reset
    intr_ctrl_en_lvlhigh_reg.io.we <= intr_ctrl_en_lvlhigh_we @[GpioRegTop.scala 259:34]
    intr_ctrl_en_lvlhigh_reg.io.wd <= intr_ctrl_en_lvlhigh_wd @[GpioRegTop.scala 260:34]
    intr_ctrl_en_lvlhigh_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 261:34]
    intr_ctrl_en_lvlhigh_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 262:33]
    io.reg2hw.intr_ctrl_en_lvlHigh.q <= intr_ctrl_en_lvlhigh_reg.io.q @[GpioRegTop.scala 263:36]
    intr_ctrl_en_lvlhigh_qs <= intr_ctrl_en_lvlhigh_reg.io.qs @[GpioRegTop.scala 264:27]
    inst intr_ctrl_en_lvllow_reg of SubReg_6 @[GpioRegTop.scala 267:39]
    intr_ctrl_en_lvllow_reg.clock <= clock
    intr_ctrl_en_lvllow_reg.reset <= reset
    intr_ctrl_en_lvllow_reg.io.we <= intr_ctrl_en_lvllow_we @[GpioRegTop.scala 268:33]
    intr_ctrl_en_lvllow_reg.io.wd <= intr_ctrl_en_lvllow_wd @[GpioRegTop.scala 269:33]
    intr_ctrl_en_lvllow_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 270:33]
    intr_ctrl_en_lvllow_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 271:32]
    io.reg2hw.intr_ctrl_en_lvlLow.q <= intr_ctrl_en_lvllow_reg.io.q @[GpioRegTop.scala 272:35]
    intr_ctrl_en_lvllow_qs <= intr_ctrl_en_lvllow_reg.io.qs @[GpioRegTop.scala 273:26]
    wire addr_hit : UInt<1>[14] @[GpioRegTop.scala 275:22]
    node _addr_hit_0_T = asUInt(UInt<1>("h00")) @[GpioRegTop.scala 277:63]
    node _addr_hit_0_T_1 = eq(reg_addr, _addr_hit_0_T) @[GpioRegTop.scala 277:29]
    addr_hit[0] <= _addr_hit_0_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_1_T = asUInt(UInt<3>("h04")) @[GpioRegTop.scala 277:63]
    node _addr_hit_1_T_1 = eq(reg_addr, _addr_hit_1_T) @[GpioRegTop.scala 277:29]
    addr_hit[1] <= _addr_hit_1_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_2_T = asUInt(UInt<4>("h08")) @[GpioRegTop.scala 277:63]
    node _addr_hit_2_T_1 = eq(reg_addr, _addr_hit_2_T) @[GpioRegTop.scala 277:29]
    addr_hit[2] <= _addr_hit_2_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_3_T = asUInt(UInt<4>("h0c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_3_T_1 = eq(reg_addr, _addr_hit_3_T) @[GpioRegTop.scala 277:29]
    addr_hit[3] <= _addr_hit_3_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_4_T = asUInt(UInt<5>("h010")) @[GpioRegTop.scala 277:63]
    node _addr_hit_4_T_1 = eq(reg_addr, _addr_hit_4_T) @[GpioRegTop.scala 277:29]
    addr_hit[4] <= _addr_hit_4_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_5_T = asUInt(UInt<5>("h014")) @[GpioRegTop.scala 277:63]
    node _addr_hit_5_T_1 = eq(reg_addr, _addr_hit_5_T) @[GpioRegTop.scala 277:29]
    addr_hit[5] <= _addr_hit_5_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_6_T = asUInt(UInt<5>("h018")) @[GpioRegTop.scala 277:63]
    node _addr_hit_6_T_1 = eq(reg_addr, _addr_hit_6_T) @[GpioRegTop.scala 277:29]
    addr_hit[6] <= _addr_hit_6_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_7_T = asUInt(UInt<5>("h01c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_7_T_1 = eq(reg_addr, _addr_hit_7_T) @[GpioRegTop.scala 277:29]
    addr_hit[7] <= _addr_hit_7_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_8_T = asUInt(UInt<6>("h020")) @[GpioRegTop.scala 277:63]
    node _addr_hit_8_T_1 = eq(reg_addr, _addr_hit_8_T) @[GpioRegTop.scala 277:29]
    addr_hit[8] <= _addr_hit_8_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_9_T = asUInt(UInt<6>("h024")) @[GpioRegTop.scala 277:63]
    node _addr_hit_9_T_1 = eq(reg_addr, _addr_hit_9_T) @[GpioRegTop.scala 277:29]
    addr_hit[9] <= _addr_hit_9_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_10_T = asUInt(UInt<6>("h028")) @[GpioRegTop.scala 277:63]
    node _addr_hit_10_T_1 = eq(reg_addr, _addr_hit_10_T) @[GpioRegTop.scala 277:29]
    addr_hit[10] <= _addr_hit_10_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_11_T = asUInt(UInt<6>("h02c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_11_T_1 = eq(reg_addr, _addr_hit_11_T) @[GpioRegTop.scala 277:29]
    addr_hit[11] <= _addr_hit_11_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_12_T = asUInt(UInt<6>("h030")) @[GpioRegTop.scala 277:63]
    node _addr_hit_12_T_1 = eq(reg_addr, _addr_hit_12_T) @[GpioRegTop.scala 277:29]
    addr_hit[12] <= _addr_hit_12_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_13_T = asUInt(UInt<6>("h034")) @[GpioRegTop.scala 277:63]
    node _addr_hit_13_T_1 = eq(reg_addr, _addr_hit_13_T) @[GpioRegTop.scala 277:29]
    addr_hit[13] <= _addr_hit_13_T_1 @[GpioRegTop.scala 277:17]
    node _addr_miss_T = or(reg_re, reg_we) @[GpioRegTop.scala 280:27]
    node _addr_miss_T_1 = eq(addr_hit[0], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_2 = eq(addr_hit[1], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_3 = eq(addr_hit[2], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_4 = eq(addr_hit[3], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_5 = eq(addr_hit[4], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_6 = eq(addr_hit[5], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_7 = eq(addr_hit[6], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_8 = eq(addr_hit[7], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_9 = eq(addr_hit[8], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_10 = eq(addr_hit[9], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_11 = eq(addr_hit[10], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_12 = eq(addr_hit[11], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_13 = eq(addr_hit[12], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_14 = eq(addr_hit[13], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_15 = or(UInt<1>("h00"), _addr_miss_T_1) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_16 = or(_addr_miss_T_15, _addr_miss_T_2) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_17 = or(_addr_miss_T_16, _addr_miss_T_3) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_18 = or(_addr_miss_T_17, _addr_miss_T_4) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_19 = or(_addr_miss_T_18, _addr_miss_T_5) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_20 = or(_addr_miss_T_19, _addr_miss_T_6) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_21 = or(_addr_miss_T_20, _addr_miss_T_7) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_22 = or(_addr_miss_T_21, _addr_miss_T_8) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_23 = or(_addr_miss_T_22, _addr_miss_T_9) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_24 = or(_addr_miss_T_23, _addr_miss_T_10) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_25 = or(_addr_miss_T_24, _addr_miss_T_11) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_26 = or(_addr_miss_T_25, _addr_miss_T_12) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_27 = or(_addr_miss_T_26, _addr_miss_T_13) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_28 = or(_addr_miss_T_27, _addr_miss_T_14) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_29 = not(_addr_miss_T_28) @[GpioRegTop.scala 280:38]
    node _addr_miss_T_30 = mux(_addr_miss_T, _addr_miss_T_29, UInt<1>("h00")) @[GpioRegTop.scala 280:19]
    addr_miss <= _addr_miss_T_30 @[GpioRegTop.scala 280:13]
    wire GPIO_PERMIT : UInt<4>[14] @[GpioRegTop.scala 282:25]
    GPIO_PERMIT[0] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[1] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[2] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[3] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[4] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[5] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[6] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[7] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[8] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[9] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[10] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[11] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[12] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[13] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    node _T = and(addr_hit[0], reg_we) @[GpioRegTop.scala 289:8]
    node _T_1 = and(GPIO_PERMIT[0], reg_be) @[GpioRegTop.scala 289:31]
    node _T_2 = neq(GPIO_PERMIT[0], _T_1) @[GpioRegTop.scala 289:24]
    node _T_3 = and(_T, _T_2) @[GpioRegTop.scala 289:18]
    node _T_4 = and(addr_hit[1], reg_we) @[GpioRegTop.scala 289:8]
    node _T_5 = and(GPIO_PERMIT[1], reg_be) @[GpioRegTop.scala 289:31]
    node _T_6 = neq(GPIO_PERMIT[1], _T_5) @[GpioRegTop.scala 289:24]
    node _T_7 = and(_T_4, _T_6) @[GpioRegTop.scala 289:18]
    node _T_8 = and(addr_hit[2], reg_we) @[GpioRegTop.scala 289:8]
    node _T_9 = and(GPIO_PERMIT[2], reg_be) @[GpioRegTop.scala 289:31]
    node _T_10 = neq(GPIO_PERMIT[2], _T_9) @[GpioRegTop.scala 289:24]
    node _T_11 = and(_T_8, _T_10) @[GpioRegTop.scala 289:18]
    node _T_12 = and(addr_hit[3], reg_we) @[GpioRegTop.scala 289:8]
    node _T_13 = and(GPIO_PERMIT[3], reg_be) @[GpioRegTop.scala 289:31]
    node _T_14 = neq(GPIO_PERMIT[3], _T_13) @[GpioRegTop.scala 289:24]
    node _T_15 = and(_T_12, _T_14) @[GpioRegTop.scala 289:18]
    node _T_16 = and(addr_hit[4], reg_we) @[GpioRegTop.scala 289:8]
    node _T_17 = and(GPIO_PERMIT[4], reg_be) @[GpioRegTop.scala 289:31]
    node _T_18 = neq(GPIO_PERMIT[4], _T_17) @[GpioRegTop.scala 289:24]
    node _T_19 = and(_T_16, _T_18) @[GpioRegTop.scala 289:18]
    node _T_20 = and(addr_hit[5], reg_we) @[GpioRegTop.scala 289:8]
    node _T_21 = and(GPIO_PERMIT[5], reg_be) @[GpioRegTop.scala 289:31]
    node _T_22 = neq(GPIO_PERMIT[5], _T_21) @[GpioRegTop.scala 289:24]
    node _T_23 = and(_T_20, _T_22) @[GpioRegTop.scala 289:18]
    node _T_24 = and(addr_hit[6], reg_we) @[GpioRegTop.scala 289:8]
    node _T_25 = and(GPIO_PERMIT[6], reg_be) @[GpioRegTop.scala 289:31]
    node _T_26 = neq(GPIO_PERMIT[6], _T_25) @[GpioRegTop.scala 289:24]
    node _T_27 = and(_T_24, _T_26) @[GpioRegTop.scala 289:18]
    node _T_28 = and(addr_hit[7], reg_we) @[GpioRegTop.scala 289:8]
    node _T_29 = and(GPIO_PERMIT[7], reg_be) @[GpioRegTop.scala 289:31]
    node _T_30 = neq(GPIO_PERMIT[7], _T_29) @[GpioRegTop.scala 289:24]
    node _T_31 = and(_T_28, _T_30) @[GpioRegTop.scala 289:18]
    node _T_32 = and(addr_hit[8], reg_we) @[GpioRegTop.scala 289:8]
    node _T_33 = and(GPIO_PERMIT[8], reg_be) @[GpioRegTop.scala 289:31]
    node _T_34 = neq(GPIO_PERMIT[8], _T_33) @[GpioRegTop.scala 289:24]
    node _T_35 = and(_T_32, _T_34) @[GpioRegTop.scala 289:18]
    node _T_36 = and(addr_hit[9], reg_we) @[GpioRegTop.scala 289:8]
    node _T_37 = and(GPIO_PERMIT[9], reg_be) @[GpioRegTop.scala 289:31]
    node _T_38 = neq(GPIO_PERMIT[9], _T_37) @[GpioRegTop.scala 289:24]
    node _T_39 = and(_T_36, _T_38) @[GpioRegTop.scala 289:18]
    node _T_40 = and(addr_hit[10], reg_we) @[GpioRegTop.scala 289:8]
    node _T_41 = and(GPIO_PERMIT[10], reg_be) @[GpioRegTop.scala 289:31]
    node _T_42 = neq(GPIO_PERMIT[10], _T_41) @[GpioRegTop.scala 289:24]
    node _T_43 = and(_T_40, _T_42) @[GpioRegTop.scala 289:18]
    node _T_44 = and(addr_hit[11], reg_we) @[GpioRegTop.scala 289:8]
    node _T_45 = and(GPIO_PERMIT[11], reg_be) @[GpioRegTop.scala 289:31]
    node _T_46 = neq(GPIO_PERMIT[11], _T_45) @[GpioRegTop.scala 289:24]
    node _T_47 = and(_T_44, _T_46) @[GpioRegTop.scala 289:18]
    node _T_48 = and(addr_hit[12], reg_we) @[GpioRegTop.scala 289:8]
    node _T_49 = and(GPIO_PERMIT[12], reg_be) @[GpioRegTop.scala 289:31]
    node _T_50 = neq(GPIO_PERMIT[12], _T_49) @[GpioRegTop.scala 289:24]
    node _T_51 = and(_T_48, _T_50) @[GpioRegTop.scala 289:18]
    node _T_52 = and(addr_hit[13], reg_we) @[GpioRegTop.scala 289:8]
    node _T_53 = and(GPIO_PERMIT[13], reg_be) @[GpioRegTop.scala 289:31]
    node _T_54 = neq(GPIO_PERMIT[13], _T_53) @[GpioRegTop.scala 289:24]
    node _T_55 = and(_T_52, _T_54) @[GpioRegTop.scala 289:18]
    node _wr_err_T = mux(_T_55, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _wr_err_T_1 = mux(_T_51, UInt<1>("h01"), _wr_err_T) @[Mux.scala 98:16]
    node _wr_err_T_2 = mux(_T_47, UInt<1>("h01"), _wr_err_T_1) @[Mux.scala 98:16]
    node _wr_err_T_3 = mux(_T_43, UInt<1>("h01"), _wr_err_T_2) @[Mux.scala 98:16]
    node _wr_err_T_4 = mux(_T_39, UInt<1>("h01"), _wr_err_T_3) @[Mux.scala 98:16]
    node _wr_err_T_5 = mux(_T_35, UInt<1>("h01"), _wr_err_T_4) @[Mux.scala 98:16]
    node _wr_err_T_6 = mux(_T_31, UInt<1>("h01"), _wr_err_T_5) @[Mux.scala 98:16]
    node _wr_err_T_7 = mux(_T_27, UInt<1>("h01"), _wr_err_T_6) @[Mux.scala 98:16]
    node _wr_err_T_8 = mux(_T_23, UInt<1>("h01"), _wr_err_T_7) @[Mux.scala 98:16]
    node _wr_err_T_9 = mux(_T_19, UInt<1>("h01"), _wr_err_T_8) @[Mux.scala 98:16]
    node _wr_err_T_10 = mux(_T_15, UInt<1>("h01"), _wr_err_T_9) @[Mux.scala 98:16]
    node _wr_err_T_11 = mux(_T_11, UInt<1>("h01"), _wr_err_T_10) @[Mux.scala 98:16]
    node _wr_err_T_12 = mux(_T_7, UInt<1>("h01"), _wr_err_T_11) @[Mux.scala 98:16]
    node _wr_err_T_13 = mux(_T_3, UInt<1>("h01"), _wr_err_T_12) @[Mux.scala 98:16]
    wr_err <= _wr_err_T_13 @[GpioRegTop.scala 292:10]
    node _intr_state_we_T = and(addr_hit[0], reg_we) @[GpioRegTop.scala 296:32]
    node _intr_state_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 296:43]
    node _intr_state_we_T_2 = and(_intr_state_we_T, _intr_state_we_T_1) @[GpioRegTop.scala 296:41]
    intr_state_we <= _intr_state_we_T_2 @[GpioRegTop.scala 296:17]
    intr_state_wd <= reg_wdata @[GpioRegTop.scala 297:17]
    node _intr_enable_we_T = and(addr_hit[1], reg_we) @[GpioRegTop.scala 299:33]
    node _intr_enable_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 299:44]
    node _intr_enable_we_T_2 = and(_intr_enable_we_T, _intr_enable_we_T_1) @[GpioRegTop.scala 299:42]
    intr_enable_we <= _intr_enable_we_T_2 @[GpioRegTop.scala 299:18]
    intr_enable_wd <= reg_wdata @[GpioRegTop.scala 300:18]
    node _intr_test_we_T = and(addr_hit[2], reg_we) @[GpioRegTop.scala 302:31]
    node _intr_test_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 302:42]
    node _intr_test_we_T_2 = and(_intr_test_we_T, _intr_test_we_T_1) @[GpioRegTop.scala 302:40]
    intr_test_we <= _intr_test_we_T_2 @[GpioRegTop.scala 302:16]
    intr_test_wd <= reg_wdata @[GpioRegTop.scala 303:16]
    node _direct_out_we_T = and(addr_hit[4], reg_we) @[GpioRegTop.scala 305:32]
    node _direct_out_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 305:43]
    node _direct_out_we_T_2 = and(_direct_out_we_T, _direct_out_we_T_1) @[GpioRegTop.scala 305:41]
    direct_out_we <= _direct_out_we_T_2 @[GpioRegTop.scala 305:17]
    direct_out_wd <= reg_wdata @[GpioRegTop.scala 306:17]
    node _direct_out_re_T = and(addr_hit[4], reg_re) @[GpioRegTop.scala 307:32]
    direct_out_re <= _direct_out_re_T @[GpioRegTop.scala 307:17]
    node _masked_out_lower_data_we_T = and(addr_hit[5], reg_we) @[GpioRegTop.scala 309:43]
    node _masked_out_lower_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 309:54]
    node _masked_out_lower_data_we_T_2 = and(_masked_out_lower_data_we_T, _masked_out_lower_data_we_T_1) @[GpioRegTop.scala 309:52]
    masked_out_lower_data_we <= _masked_out_lower_data_we_T_2 @[GpioRegTop.scala 309:28]
    node _masked_out_lower_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 310:40]
    masked_out_lower_data_wd <= _masked_out_lower_data_wd_T @[GpioRegTop.scala 310:28]
    node _masked_out_lower_data_re_T = and(addr_hit[5], reg_re) @[GpioRegTop.scala 311:43]
    masked_out_lower_data_re <= _masked_out_lower_data_re_T @[GpioRegTop.scala 311:28]
    node _masked_out_lower_mask_we_T = and(addr_hit[5], reg_we) @[GpioRegTop.scala 313:43]
    node _masked_out_lower_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 313:54]
    node _masked_out_lower_mask_we_T_2 = and(_masked_out_lower_mask_we_T, _masked_out_lower_mask_we_T_1) @[GpioRegTop.scala 313:52]
    masked_out_lower_mask_we <= _masked_out_lower_mask_we_T_2 @[GpioRegTop.scala 313:28]
    node _masked_out_lower_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 314:40]
    masked_out_lower_mask_wd <= _masked_out_lower_mask_wd_T @[GpioRegTop.scala 314:28]
    node _masked_out_upper_data_we_T = and(addr_hit[6], reg_we) @[GpioRegTop.scala 316:43]
    node _masked_out_upper_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 316:54]
    node _masked_out_upper_data_we_T_2 = and(_masked_out_upper_data_we_T, _masked_out_upper_data_we_T_1) @[GpioRegTop.scala 316:52]
    masked_out_upper_data_we <= _masked_out_upper_data_we_T_2 @[GpioRegTop.scala 316:28]
    node _masked_out_upper_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 317:40]
    masked_out_upper_data_wd <= _masked_out_upper_data_wd_T @[GpioRegTop.scala 317:28]
    node _masked_out_upper_data_re_T = and(addr_hit[6], reg_re) @[GpioRegTop.scala 318:43]
    masked_out_upper_data_re <= _masked_out_upper_data_re_T @[GpioRegTop.scala 318:28]
    node _masked_out_upper_mask_we_T = and(addr_hit[6], reg_we) @[GpioRegTop.scala 320:43]
    node _masked_out_upper_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 320:54]
    node _masked_out_upper_mask_we_T_2 = and(_masked_out_upper_mask_we_T, _masked_out_upper_mask_we_T_1) @[GpioRegTop.scala 320:52]
    masked_out_upper_mask_we <= _masked_out_upper_mask_we_T_2 @[GpioRegTop.scala 320:28]
    node _masked_out_upper_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 321:40]
    masked_out_upper_mask_wd <= _masked_out_upper_mask_wd_T @[GpioRegTop.scala 321:28]
    node _direct_oe_we_T = and(addr_hit[7], reg_we) @[GpioRegTop.scala 323:31]
    node _direct_oe_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 323:42]
    node _direct_oe_we_T_2 = and(_direct_oe_we_T, _direct_oe_we_T_1) @[GpioRegTop.scala 323:40]
    direct_oe_we <= _direct_oe_we_T_2 @[GpioRegTop.scala 323:16]
    direct_oe_wd <= reg_wdata @[GpioRegTop.scala 324:16]
    node _direct_oe_re_T = and(addr_hit[7], reg_re) @[GpioRegTop.scala 325:31]
    direct_oe_re <= _direct_oe_re_T @[GpioRegTop.scala 325:16]
    node _masked_oe_lower_data_we_T = and(addr_hit[8], reg_we) @[GpioRegTop.scala 327:42]
    node _masked_oe_lower_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 327:53]
    node _masked_oe_lower_data_we_T_2 = and(_masked_oe_lower_data_we_T, _masked_oe_lower_data_we_T_1) @[GpioRegTop.scala 327:51]
    masked_oe_lower_data_we <= _masked_oe_lower_data_we_T_2 @[GpioRegTop.scala 327:27]
    node _masked_oe_lower_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 328:39]
    masked_oe_lower_data_wd <= _masked_oe_lower_data_wd_T @[GpioRegTop.scala 328:27]
    node _masked_oe_lower_data_re_T = and(addr_hit[8], reg_re) @[GpioRegTop.scala 329:42]
    masked_oe_lower_data_re <= _masked_oe_lower_data_re_T @[GpioRegTop.scala 329:27]
    node _masked_oe_lower_mask_we_T = and(addr_hit[8], reg_we) @[GpioRegTop.scala 331:42]
    node _masked_oe_lower_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 331:53]
    node _masked_oe_lower_mask_we_T_2 = and(_masked_oe_lower_mask_we_T, _masked_oe_lower_mask_we_T_1) @[GpioRegTop.scala 331:51]
    masked_oe_lower_mask_we <= _masked_oe_lower_mask_we_T_2 @[GpioRegTop.scala 331:27]
    node _masked_oe_lower_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 332:39]
    masked_oe_lower_mask_wd <= _masked_oe_lower_mask_wd_T @[GpioRegTop.scala 332:27]
    node _masked_oe_lower_mask_re_T = and(addr_hit[8], reg_re) @[GpioRegTop.scala 333:42]
    masked_oe_lower_mask_re <= _masked_oe_lower_mask_re_T @[GpioRegTop.scala 333:27]
    node _masked_oe_upper_data_we_T = and(addr_hit[9], reg_we) @[GpioRegTop.scala 335:42]
    node _masked_oe_upper_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 335:53]
    node _masked_oe_upper_data_we_T_2 = and(_masked_oe_upper_data_we_T, _masked_oe_upper_data_we_T_1) @[GpioRegTop.scala 335:51]
    masked_oe_upper_data_we <= _masked_oe_upper_data_we_T_2 @[GpioRegTop.scala 335:27]
    node _masked_oe_upper_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 336:39]
    masked_oe_upper_data_wd <= _masked_oe_upper_data_wd_T @[GpioRegTop.scala 336:27]
    node _masked_oe_upper_data_re_T = and(addr_hit[9], reg_re) @[GpioRegTop.scala 337:42]
    masked_oe_upper_data_re <= _masked_oe_upper_data_re_T @[GpioRegTop.scala 337:27]
    node _masked_oe_upper_mask_we_T = and(addr_hit[9], reg_we) @[GpioRegTop.scala 339:42]
    node _masked_oe_upper_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 339:53]
    node _masked_oe_upper_mask_we_T_2 = and(_masked_oe_upper_mask_we_T, _masked_oe_upper_mask_we_T_1) @[GpioRegTop.scala 339:51]
    masked_oe_upper_mask_we <= _masked_oe_upper_mask_we_T_2 @[GpioRegTop.scala 339:27]
    node _masked_oe_upper_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 340:39]
    masked_oe_upper_mask_wd <= _masked_oe_upper_mask_wd_T @[GpioRegTop.scala 340:27]
    node _masked_oe_upper_mask_re_T = and(addr_hit[9], reg_re) @[GpioRegTop.scala 341:42]
    masked_oe_upper_mask_re <= _masked_oe_upper_mask_re_T @[GpioRegTop.scala 341:27]
    node _intr_ctrl_en_rising_we_T = and(addr_hit[10], reg_we) @[GpioRegTop.scala 343:42]
    node _intr_ctrl_en_rising_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 343:53]
    node _intr_ctrl_en_rising_we_T_2 = and(_intr_ctrl_en_rising_we_T, _intr_ctrl_en_rising_we_T_1) @[GpioRegTop.scala 343:51]
    intr_ctrl_en_rising_we <= _intr_ctrl_en_rising_we_T_2 @[GpioRegTop.scala 343:26]
    intr_ctrl_en_rising_wd <= reg_wdata @[GpioRegTop.scala 344:26]
    node _intr_ctrl_en_falling_we_T = and(addr_hit[11], reg_we) @[GpioRegTop.scala 346:43]
    node _intr_ctrl_en_falling_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 346:54]
    node _intr_ctrl_en_falling_we_T_2 = and(_intr_ctrl_en_falling_we_T, _intr_ctrl_en_falling_we_T_1) @[GpioRegTop.scala 346:52]
    intr_ctrl_en_falling_we <= _intr_ctrl_en_falling_we_T_2 @[GpioRegTop.scala 346:27]
    intr_ctrl_en_falling_wd <= reg_wdata @[GpioRegTop.scala 347:27]
    node _intr_ctrl_en_lvlhigh_we_T = and(addr_hit[12], reg_we) @[GpioRegTop.scala 349:43]
    node _intr_ctrl_en_lvlhigh_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 349:54]
    node _intr_ctrl_en_lvlhigh_we_T_2 = and(_intr_ctrl_en_lvlhigh_we_T, _intr_ctrl_en_lvlhigh_we_T_1) @[GpioRegTop.scala 349:52]
    intr_ctrl_en_lvlhigh_we <= _intr_ctrl_en_lvlhigh_we_T_2 @[GpioRegTop.scala 349:27]
    intr_ctrl_en_lvlhigh_wd <= reg_wdata @[GpioRegTop.scala 350:27]
    node _intr_ctrl_en_lvllow_we_T = and(addr_hit[13], reg_we) @[GpioRegTop.scala 352:42]
    node _intr_ctrl_en_lvllow_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 352:53]
    node _intr_ctrl_en_lvllow_we_T_2 = and(_intr_ctrl_en_lvllow_we_T, _intr_ctrl_en_lvllow_we_T_1) @[GpioRegTop.scala 352:51]
    intr_ctrl_en_lvllow_we <= _intr_ctrl_en_lvllow_we_T_2 @[GpioRegTop.scala 352:26]
    intr_ctrl_en_lvllow_wd <= reg_wdata @[GpioRegTop.scala 353:26]
    reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 355:18]
    when addr_hit[0] : @[GpioRegTop.scala 356:21]
      reg_rdata_next <= intr_state_qs @[GpioRegTop.scala 357:20]
      skip @[GpioRegTop.scala 356:21]
    else : @[GpioRegTop.scala 358:27]
      when addr_hit[1] : @[GpioRegTop.scala 358:27]
        reg_rdata_next <= intr_enable_qs @[GpioRegTop.scala 359:20]
        skip @[GpioRegTop.scala 358:27]
      else : @[GpioRegTop.scala 360:27]
        when addr_hit[2] : @[GpioRegTop.scala 360:27]
          reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 361:20]
          skip @[GpioRegTop.scala 360:27]
        else : @[GpioRegTop.scala 362:27]
          when addr_hit[3] : @[GpioRegTop.scala 362:27]
            reg_rdata_next <= data_in_qs @[GpioRegTop.scala 363:20]
            skip @[GpioRegTop.scala 362:27]
          else : @[GpioRegTop.scala 364:27]
            when addr_hit[4] : @[GpioRegTop.scala 364:27]
              reg_rdata_next <= direct_out_qs @[GpioRegTop.scala 365:20]
              skip @[GpioRegTop.scala 364:27]
            else : @[GpioRegTop.scala 366:27]
              when addr_hit[5] : @[GpioRegTop.scala 366:27]
                node _reg_rdata_next_T = cat(UInt<16>("h00"), masked_out_lower_data_qs) @[Cat.scala 30:58]
                reg_rdata_next <= _reg_rdata_next_T @[GpioRegTop.scala 367:20]
                skip @[GpioRegTop.scala 366:27]
              else : @[GpioRegTop.scala 368:27]
                when addr_hit[6] : @[GpioRegTop.scala 368:27]
                  node _reg_rdata_next_T_1 = cat(UInt<16>("h00"), masked_out_upper_data_qs) @[Cat.scala 30:58]
                  reg_rdata_next <= _reg_rdata_next_T_1 @[GpioRegTop.scala 369:20]
                  skip @[GpioRegTop.scala 368:27]
                else : @[GpioRegTop.scala 370:27]
                  when addr_hit[7] : @[GpioRegTop.scala 370:27]
                    reg_rdata_next <= direct_oe_qs @[GpioRegTop.scala 371:20]
                    skip @[GpioRegTop.scala 370:27]
                  else : @[GpioRegTop.scala 372:27]
                    when addr_hit[8] : @[GpioRegTop.scala 372:27]
                      node _reg_rdata_next_T_2 = cat(masked_oe_lower_mask_qs, masked_oe_lower_data_qs) @[Cat.scala 30:58]
                      reg_rdata_next <= _reg_rdata_next_T_2 @[GpioRegTop.scala 373:20]
                      skip @[GpioRegTop.scala 372:27]
                    else : @[GpioRegTop.scala 374:27]
                      when addr_hit[9] : @[GpioRegTop.scala 374:27]
                        node _reg_rdata_next_T_3 = cat(masked_oe_upper_mask_qs, masked_oe_upper_data_qs) @[Cat.scala 30:58]
                        reg_rdata_next <= _reg_rdata_next_T_3 @[GpioRegTop.scala 375:20]
                        skip @[GpioRegTop.scala 374:27]
                      else : @[GpioRegTop.scala 376:28]
                        when addr_hit[10] : @[GpioRegTop.scala 376:28]
                          reg_rdata_next <= intr_ctrl_en_rising_qs @[GpioRegTop.scala 377:20]
                          skip @[GpioRegTop.scala 376:28]
                        else : @[GpioRegTop.scala 378:28]
                          when addr_hit[11] : @[GpioRegTop.scala 378:28]
                            reg_rdata_next <= intr_ctrl_en_falling_qs @[GpioRegTop.scala 379:20]
                            skip @[GpioRegTop.scala 378:28]
                          else : @[GpioRegTop.scala 380:28]
                            when addr_hit[12] : @[GpioRegTop.scala 380:28]
                              reg_rdata_next <= intr_ctrl_en_lvlhigh_qs @[GpioRegTop.scala 381:20]
                              skip @[GpioRegTop.scala 380:28]
                            else : @[GpioRegTop.scala 382:28]
                              when addr_hit[13] : @[GpioRegTop.scala 382:28]
                                reg_rdata_next <= intr_ctrl_en_lvllow_qs @[GpioRegTop.scala 383:20]
                                skip @[GpioRegTop.scala 382:28]
                              else : @[GpioRegTop.scala 384:15]
                                node _reg_rdata_next_T_4 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
                                reg_rdata_next <= _reg_rdata_next_T_4 @[GpioRegTop.scala 385:20]
                                skip @[GpioRegTop.scala 384:15]
    
  module IntrHardware : 
    input clock : Clock
    input reset : Reset
    output io : {flip event_intr_i : UInt<32>, flip reg2hw_intr_enable_q_i : UInt<32>, flip reg2hw_intr_test_q_i : UInt<32>, flip reg2hw_intr_test_qe_i : UInt<1>, flip reg2hw_intr_state_q_i : UInt<32>, hw2reg_intr_state_de_o : UInt<1>, hw2reg_intr_state_d_o : UInt<32>, intr_o : UInt<32>}
    
    wire new_event : UInt<32> @[IntrHardware.scala 25:23]
    node _new_event_T = bits(io.reg2hw_intr_test_qe_i, 0, 0) @[Bitwise.scala 72:15]
    node _new_event_T_1 = mux(_new_event_T, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _new_event_T_2 = and(_new_event_T_1, io.reg2hw_intr_test_q_i) @[IntrHardware.scala 26:54]
    node _new_event_T_3 = or(_new_event_T_2, io.event_intr_i) @[IntrHardware.scala 26:80]
    new_event <= _new_event_T_3 @[IntrHardware.scala 26:13]
    node _io_hw2reg_intr_state_de_o_T = orr(new_event) @[IntrHardware.scala 27:45]
    io.hw2reg_intr_state_de_o <= _io_hw2reg_intr_state_de_o_T @[IntrHardware.scala 27:29]
    node _io_hw2reg_intr_state_d_o_T = or(new_event, io.reg2hw_intr_state_q_i) @[IntrHardware.scala 28:41]
    io.hw2reg_intr_state_d_o <= _io_hw2reg_intr_state_d_o_T @[IntrHardware.scala 28:28]
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IntrHardware.scala 31:22]
    node _reg_T = and(io.reg2hw_intr_state_q_i, io.reg2hw_intr_enable_q_i) @[IntrHardware.scala 32:37]
    reg <= _reg_T @[IntrHardware.scala 32:9]
    io.intr_o <= reg @[IntrHardware.scala 33:15]
    
  module Gpio : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_gpio_i : UInt<32>, cio_gpio_o : UInt<32>, cio_gpio_en_o : UInt<32>, intr_gpio_o : UInt<32>}
    
    wire reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}} @[Gpio.scala 20:20]
    wire hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}} @[Gpio.scala 21:20]
    inst gpioRegTop of GpioRegTop @[Gpio.scala 23:26]
    gpioRegTop.clock <= clock
    gpioRegTop.reset <= reset
    gpioRegTop.io.req.bits.isWrite <= io.req.bits.isWrite @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.activeByteLane <= io.req.bits.activeByteLane @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.dataRequest <= io.req.bits.dataRequest @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.addrRequest <= io.req.bits.addrRequest @[Gpio.scala 25:21]
    gpioRegTop.io.req.valid <= io.req.valid @[Gpio.scala 25:21]
    io.req.ready <= gpioRegTop.io.req.ready @[Gpio.scala 25:21]
    io.rsp.bits.error <= gpioRegTop.io.rsp.bits.error @[Gpio.scala 26:10]
    io.rsp.bits.dataResponse <= gpioRegTop.io.rsp.bits.dataResponse @[Gpio.scala 26:10]
    io.rsp.valid <= gpioRegTop.io.rsp.valid @[Gpio.scala 26:10]
    gpioRegTop.io.rsp.ready <= io.rsp.ready @[Gpio.scala 26:10]
    reg2hw.intr_ctrl_en_lvlLow.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlLow.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_lvlHigh.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlHigh.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_falling.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_falling.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_rising.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_rising.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.mask.q <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.data.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.data.q <= gpioRegTop.io.reg2hw.masked_oe_upper.data.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.mask.q <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.data.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.data.q <= gpioRegTop.io.reg2hw.masked_oe_lower.data.q @[Gpio.scala 28:10]
    reg2hw.direct_oe.qe <= gpioRegTop.io.reg2hw.direct_oe.qe @[Gpio.scala 28:10]
    reg2hw.direct_oe.q <= gpioRegTop.io.reg2hw.direct_oe.q @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_out_upper.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.mask.q <= gpioRegTop.io.reg2hw.masked_out_upper.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.data.qe <= gpioRegTop.io.reg2hw.masked_out_upper.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.data.q <= gpioRegTop.io.reg2hw.masked_out_upper.data.q @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_out_lower.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.mask.q <= gpioRegTop.io.reg2hw.masked_out_lower.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.data.qe <= gpioRegTop.io.reg2hw.masked_out_lower.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.data.q <= gpioRegTop.io.reg2hw.masked_out_lower.data.q @[Gpio.scala 28:10]
    reg2hw.direct_out.qe <= gpioRegTop.io.reg2hw.direct_out.qe @[Gpio.scala 28:10]
    reg2hw.direct_out.q <= gpioRegTop.io.reg2hw.direct_out.q @[Gpio.scala 28:10]
    reg2hw.intr_test.qe <= gpioRegTop.io.reg2hw.intr_test.qe @[Gpio.scala 28:10]
    reg2hw.intr_test.q <= gpioRegTop.io.reg2hw.intr_test.q @[Gpio.scala 28:10]
    reg2hw.intr_enable.q <= gpioRegTop.io.reg2hw.intr_enable.q @[Gpio.scala 28:10]
    reg2hw.intr_state.q <= gpioRegTop.io.reg2hw.intr_state.q @[Gpio.scala 28:10]
    gpioRegTop.io.hw2reg.masked_oe_upper.mask.d <= hw2reg.masked_oe_upper.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_upper.data.d <= hw2reg.masked_oe_upper.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_lower.mask.d <= hw2reg.masked_oe_lower.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_lower.data.d <= hw2reg.masked_oe_lower.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.direct_oe.d <= hw2reg.direct_oe.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_upper.mask.d <= hw2reg.masked_out_upper.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_upper.data.d <= hw2reg.masked_out_upper.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_lower.mask.d <= hw2reg.masked_out_lower.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_lower.data.d <= hw2reg.masked_out_lower.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.direct_out.d <= hw2reg.direct_out.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.data_in.de <= hw2reg.data_in.de @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.data_in.d <= hw2reg.data_in.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.intr_state.de <= hw2reg.intr_state.de @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.intr_state.d <= hw2reg.intr_state.d @[Gpio.scala 29:10]
    reg cio_gpio_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 31:27]
    reg cio_gpio_en_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 32:30]
    reg data_in_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 33:26]
    wire data_in_d : UInt<32> @[Gpio.scala 35:23]
    data_in_d <= io.cio_gpio_i @[Gpio.scala 36:13]
    data_in_q <= data_in_d @[Gpio.scala 37:13]
    hw2reg.data_in.de <= UInt<1>("h01") @[Gpio.scala 40:21]
    hw2reg.data_in.d <= data_in_d @[Gpio.scala 41:20]
    io.cio_gpio_o <= cio_gpio_q @[Gpio.scala 44:17]
    io.cio_gpio_en_o <= cio_gpio_en_q @[Gpio.scala 45:20]
    hw2reg.direct_out.d <= cio_gpio_q @[Gpio.scala 47:23]
    node _hw2reg_masked_out_upper_data_d_T = bits(cio_gpio_q, 31, 16) @[Gpio.scala 48:47]
    hw2reg.masked_out_upper.data.d <= _hw2reg_masked_out_upper_data_d_T @[Gpio.scala 48:34]
    hw2reg.masked_out_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 49:34]
    node _hw2reg_masked_out_lower_data_d_T = bits(cio_gpio_q, 15, 0) @[Gpio.scala 50:47]
    hw2reg.masked_out_lower.data.d <= _hw2reg_masked_out_lower_data_d_T @[Gpio.scala 50:34]
    hw2reg.masked_out_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 51:34]
    when reg2hw.direct_out.qe : @[Gpio.scala 53:30]
      cio_gpio_q <= reg2hw.direct_out.q @[Gpio.scala 54:16]
      skip @[Gpio.scala 53:30]
    else : @[Gpio.scala 55:48]
      when reg2hw.masked_out_upper.data.qe : @[Gpio.scala 55:48]
        node _cio_gpio_q_T = and(reg2hw.masked_out_upper.data.q, reg2hw.masked_out_upper.mask.q) @[Gpio.scala 57:39]
        node _cio_gpio_q_T_1 = not(reg2hw.masked_out_upper.mask.q) @[Gpio.scala 58:10]
        node _cio_gpio_q_T_2 = bits(cio_gpio_q, 31, 16) @[Gpio.scala 58:54]
        node _cio_gpio_q_T_3 = and(_cio_gpio_q_T_1, _cio_gpio_q_T_2) @[Gpio.scala 58:42]
        node cio_gpio_q_hi = or(_cio_gpio_q_T, _cio_gpio_q_T_3) @[Gpio.scala 57:73]
        node _cio_gpio_q_T_4 = cat(cio_gpio_q_hi, UInt<16>("h00")) @[Cat.scala 30:58]
        cio_gpio_q <= _cio_gpio_q_T_4 @[Gpio.scala 56:16]
        skip @[Gpio.scala 55:48]
      else : @[Gpio.scala 66:48]
        when reg2hw.masked_out_lower.data.qe : @[Gpio.scala 66:48]
          node _cio_gpio_q_T_5 = and(reg2hw.masked_out_lower.data.q, reg2hw.masked_out_lower.mask.q) @[Gpio.scala 67:66]
          node _cio_gpio_q_T_6 = not(reg2hw.masked_out_lower.mask.q) @[Gpio.scala 68:8]
          node _cio_gpio_q_T_7 = bits(cio_gpio_q, 15, 0) @[Gpio.scala 68:52]
          node _cio_gpio_q_T_8 = and(_cio_gpio_q_T_6, _cio_gpio_q_T_7) @[Gpio.scala 68:40]
          node cio_gpio_q_lo = or(_cio_gpio_q_T_5, _cio_gpio_q_T_8) @[Gpio.scala 67:100]
          node _cio_gpio_q_T_9 = cat(UInt<16>("h00"), cio_gpio_q_lo) @[Cat.scala 30:58]
          cio_gpio_q <= _cio_gpio_q_T_9 @[Gpio.scala 67:16]
          skip @[Gpio.scala 66:48]
    hw2reg.direct_oe.d <= cio_gpio_en_q @[Gpio.scala 72:22]
    node _hw2reg_masked_oe_upper_data_d_T = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 73:49]
    hw2reg.masked_oe_upper.data.d <= _hw2reg_masked_oe_upper_data_d_T @[Gpio.scala 73:33]
    hw2reg.masked_oe_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 74:33]
    node _hw2reg_masked_oe_lower_data_d_T = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 75:49]
    hw2reg.masked_oe_lower.data.d <= _hw2reg_masked_oe_lower_data_d_T @[Gpio.scala 75:33]
    hw2reg.masked_oe_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 76:33]
    when reg2hw.direct_oe.qe : @[Gpio.scala 78:29]
      cio_gpio_en_q <= reg2hw.direct_oe.q @[Gpio.scala 79:19]
      skip @[Gpio.scala 78:29]
    else : @[Gpio.scala 80:47]
      when reg2hw.masked_oe_upper.data.qe : @[Gpio.scala 80:47]
        node _cio_gpio_en_q_T = and(reg2hw.masked_oe_upper.data.q, reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 81:57]
        node _cio_gpio_en_q_T_1 = not(reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 82:8]
        node _cio_gpio_en_q_T_2 = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 82:54]
        node _cio_gpio_en_q_T_3 = and(_cio_gpio_en_q_T_1, _cio_gpio_en_q_T_2) @[Gpio.scala 82:39]
        node cio_gpio_en_q_hi = or(_cio_gpio_en_q_T, _cio_gpio_en_q_T_3) @[Gpio.scala 81:90]
        node _cio_gpio_en_q_T_4 = cat(cio_gpio_en_q_hi, UInt<16>("h00")) @[Cat.scala 30:58]
        cio_gpio_en_q <= _cio_gpio_en_q_T_4 @[Gpio.scala 81:19]
        skip @[Gpio.scala 80:47]
      else : @[Gpio.scala 83:47]
        when reg2hw.masked_oe_lower.data.qe : @[Gpio.scala 83:47]
          node _cio_gpio_en_q_T_5 = and(reg2hw.masked_oe_lower.data.q, reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 84:68]
          node _cio_gpio_en_q_T_6 = not(reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 85:8]
          node _cio_gpio_en_q_T_7 = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 85:54]
          node _cio_gpio_en_q_T_8 = and(_cio_gpio_en_q_T_6, _cio_gpio_en_q_T_7) @[Gpio.scala 85:39]
          node cio_gpio_en_q_lo = or(_cio_gpio_en_q_T_5, _cio_gpio_en_q_T_8) @[Gpio.scala 84:101]
          node _cio_gpio_en_q_T_9 = cat(UInt<16>("h00"), cio_gpio_en_q_lo) @[Cat.scala 30:58]
          cio_gpio_en_q <= _cio_gpio_en_q_T_9 @[Gpio.scala 84:19]
          skip @[Gpio.scala 83:47]
    wire event_intr_rise : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_fall : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_actlow : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_acthigh : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_combined : UInt<32> @[Gpio.scala 89:33]
    node _event_intr_rise_T = not(data_in_q) @[Gpio.scala 95:23]
    node _event_intr_rise_T_1 = and(_event_intr_rise_T, data_in_d) @[Gpio.scala 95:34]
    node _event_intr_rise_T_2 = and(_event_intr_rise_T_1, reg2hw.intr_ctrl_en_rising.q) @[Gpio.scala 95:47]
    event_intr_rise <= _event_intr_rise_T_2 @[Gpio.scala 95:19]
    node _event_intr_fall_T = not(data_in_d) @[Gpio.scala 99:35]
    node _event_intr_fall_T_1 = and(data_in_q, _event_intr_fall_T) @[Gpio.scala 99:33]
    node _event_intr_fall_T_2 = and(_event_intr_fall_T_1, reg2hw.intr_ctrl_en_falling.q) @[Gpio.scala 99:47]
    event_intr_fall <= _event_intr_fall_T_2 @[Gpio.scala 99:19]
    node _event_intr_acthigh_T = and(data_in_d, reg2hw.intr_ctrl_en_lvlHigh.q) @[Gpio.scala 105:35]
    event_intr_acthigh <= _event_intr_acthigh_T @[Gpio.scala 105:22]
    node _event_intr_actlow_T = not(data_in_d) @[Gpio.scala 111:24]
    node _event_intr_actlow_T_1 = and(_event_intr_actlow_T, reg2hw.intr_ctrl_en_lvlLow.q) @[Gpio.scala 111:35]
    event_intr_actlow <= _event_intr_actlow_T_1 @[Gpio.scala 111:21]
    node _event_intr_combined_T = or(event_intr_rise, event_intr_fall) @[Gpio.scala 113:42]
    node _event_intr_combined_T_1 = or(_event_intr_combined_T, event_intr_acthigh) @[Gpio.scala 113:60]
    node _event_intr_combined_T_2 = or(_event_intr_combined_T_1, event_intr_actlow) @[Gpio.scala 113:81]
    event_intr_combined <= _event_intr_combined_T_2 @[Gpio.scala 113:23]
    inst intr_hw of IntrHardware @[Gpio.scala 115:23]
    intr_hw.clock <= clock
    intr_hw.reset <= reset
    intr_hw.io.event_intr_i <= event_intr_combined @[Gpio.scala 116:27]
    intr_hw.io.reg2hw_intr_enable_q_i <= reg2hw.intr_enable.q @[Gpio.scala 117:37]
    intr_hw.io.reg2hw_intr_test_q_i <= reg2hw.intr_test.q @[Gpio.scala 118:35]
    intr_hw.io.reg2hw_intr_test_qe_i <= reg2hw.intr_test.qe @[Gpio.scala 119:36]
    intr_hw.io.reg2hw_intr_state_q_i <= reg2hw.intr_state.q @[Gpio.scala 120:36]
    hw2reg.intr_state.de <= intr_hw.io.hw2reg_intr_state_de_o @[Gpio.scala 121:24]
    hw2reg.intr_state.d <= intr_hw.io.hw2reg_intr_state_d_o @[Gpio.scala 122:23]
    io.intr_gpio_o <= intr_hw.io.intr_o @[Gpio.scala 123:18]
    
  module Harness : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip gpio_i : UInt<32>, gpio_o : UInt<32>, gpio_en_o : UInt<32>, gpio_intr_o : UInt<32>}
    
    inst hostAdapter of WishboneHost @[Harness.scala 20:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[Harness.scala 21:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst gpio of Gpio @[Harness.scala 22:20]
    gpio.clock <= clock
    gpio.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[Harness.scala 24:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[Harness.scala 24:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[Harness.scala 24:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[Harness.scala 24:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[Harness.scala 24:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[Harness.scala 24:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[Harness.scala 25:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[Harness.scala 25:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[Harness.scala 25:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[Harness.scala 25:10]
    deviceAdapter.io.wbMasterReceiver.bits.sel <= hostAdapter.io.wbMasterTransmitter.bits.sel @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.dat <= hostAdapter.io.wbMasterTransmitter.bits.dat @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.adr <= hostAdapter.io.wbMasterTransmitter.bits.adr @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.we <= hostAdapter.io.wbMasterTransmitter.bits.we @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.stb <= hostAdapter.io.wbMasterTransmitter.bits.stb @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.cyc <= hostAdapter.io.wbMasterTransmitter.bits.cyc @[Harness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.valid <= hostAdapter.io.wbMasterTransmitter.valid @[Harness.scala 27:38]
    hostAdapter.io.wbMasterTransmitter.ready <= deviceAdapter.io.wbMasterReceiver.ready @[Harness.scala 27:38]
    hostAdapter.io.wbSlaveReceiver.bits.err <= deviceAdapter.io.wbSlaveTransmitter.bits.err @[Harness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.bits.dat <= deviceAdapter.io.wbSlaveTransmitter.bits.dat @[Harness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.bits.ack <= deviceAdapter.io.wbSlaveTransmitter.bits.ack @[Harness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.valid <= deviceAdapter.io.wbSlaveTransmitter.valid @[Harness.scala 28:34]
    deviceAdapter.io.wbSlaveTransmitter.ready <= hostAdapter.io.wbSlaveReceiver.ready @[Harness.scala 28:34]
    gpio.io.req.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[Harness.scala 30:15]
    gpio.io.req.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[Harness.scala 30:15]
    gpio.io.req.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[Harness.scala 30:15]
    gpio.io.req.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[Harness.scala 30:15]
    gpio.io.req.valid <= deviceAdapter.io.reqOut.valid @[Harness.scala 30:15]
    deviceAdapter.io.reqOut.ready <= gpio.io.req.ready @[Harness.scala 30:15]
    deviceAdapter.io.rspIn.bits.error <= gpio.io.rsp.bits.error @[Harness.scala 31:15]
    deviceAdapter.io.rspIn.bits.dataResponse <= gpio.io.rsp.bits.dataResponse @[Harness.scala 31:15]
    deviceAdapter.io.rspIn.valid <= gpio.io.rsp.valid @[Harness.scala 31:15]
    gpio.io.rsp.ready <= deviceAdapter.io.rspIn.ready @[Harness.scala 31:15]
    gpio.io.cio_gpio_i <= io.gpio_i @[Harness.scala 33:22]
    io.gpio_o <= gpio.io.cio_gpio_o @[Harness.scala 34:13]
    io.gpio_en_o <= gpio.io.cio_gpio_en_o @[Harness.scala 35:16]
    io.gpio_intr_o <= gpio.io.intr_gpio_o @[Harness.scala 36:18]
    

;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Generator : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module WishboneHost_1 : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice_1 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module SubReg : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 33:20]
    wr_en <= _wr_en_T @[SubReg.scala 33:11]
    node _wr_data_T = mux(io.de, io.d, q_reg) @[SubReg.scala 34:19]
    node _wr_data_T_1 = not(io.wd) @[SubReg.scala 34:53]
    node _wr_data_T_2 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _wr_data_T_3 = mux(io.we, _wr_data_T_1, _wr_data_T_2) @[SubReg.scala 34:45]
    node _wr_data_T_4 = and(_wr_data_T, _wr_data_T_3) @[SubReg.scala 34:40]
    wr_data <= _wr_data_T_4 @[SubReg.scala 34:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubReg_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    wr_en <= io.de @[SubReg.scala 30:11]
    wr_data <= io.d @[SubReg.scala 31:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubRegExt_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<32>, flip d : UInt<32>, qe : UInt<1>, qre : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubRegExt_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip re : UInt<1>, flip we : UInt<1>, flip wd : UInt<16>, flip d : UInt<16>, qe : UInt<1>, qre : UInt<1>, q : UInt<16>, qs : UInt<16>}
    
    io.qs <= io.d @[SubRegExt.scala 23:9]
    io.q <= io.wd @[SubRegExt.scala 24:8]
    io.qe <= io.we @[SubRegExt.scala 25:9]
    io.qre <= io.re @[SubRegExt.scala 26:10]
    
  module SubReg_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module SubReg_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip we : UInt<1>, flip wd : UInt<32>, flip de : UInt<1>, flip d : UInt<32>, qe : UInt<1>, q : UInt<32>, qs : UInt<32>}
    
    wire wr_en : UInt<1> @[SubReg.scala 20:19]
    wire wr_data : UInt<32> @[SubReg.scala 21:21]
    reg qe_reg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SubReg.scala 23:23]
    reg q_reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SubReg.scala 24:22]
    node _wr_en_T = or(io.we, io.de) @[SubReg.scala 27:20]
    wr_en <= _wr_en_T @[SubReg.scala 27:11]
    node _wr_data_T = mux(io.we, io.wd, io.d) @[SubReg.scala 28:19]
    wr_data <= _wr_data_T @[SubReg.scala 28:13]
    qe_reg <= io.we @[SubReg.scala 46:10]
    when wr_en : @[SubReg.scala 47:15]
      q_reg <= wr_data @[SubReg.scala 48:11]
      skip @[SubReg.scala 47:15]
    io.qs <= q_reg @[SubReg.scala 51:9]
    io.q <= q_reg @[SubReg.scala 52:8]
    io.qe <= qe_reg @[SubReg.scala 53:9]
    
  module GpioRegTop : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}}, hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}}}
    
    io.req.ready <= UInt<1>("h01") @[GpioRegTop.scala 18:16]
    wire reg_we : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_re : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_error : UInt<1> @[GpioRegTop.scala 24:39]
    wire reg_wdata : UInt<32> @[GpioRegTop.scala 25:34]
    wire reg_rdata : UInt<32> @[GpioRegTop.scala 25:34]
    wire reg_addr : UInt<6> @[GpioRegTop.scala 26:22]
    wire reg_be : UInt<4> @[GpioRegTop.scala 27:20]
    wire addr_miss : UInt<1> @[GpioRegTop.scala 29:31]
    wire wr_err : UInt<1> @[GpioRegTop.scala 29:31]
    wire reg_rdata_next : UInt<32> @[GpioRegTop.scala 30:28]
    node _reg_we_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _reg_we_T_1 = mux(_reg_we_T, io.req.bits.isWrite, UInt<1>("h00")) @[GpioRegTop.scala 33:16]
    reg_we <= _reg_we_T_1 @[GpioRegTop.scala 33:10]
    node _reg_re_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _reg_re_T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[GpioRegTop.scala 34:32]
    node _reg_re_T_2 = mux(_reg_re_T, _reg_re_T_1, UInt<1>("h00")) @[GpioRegTop.scala 34:16]
    reg_re <= _reg_re_T_2 @[GpioRegTop.scala 34:10]
    reg_wdata <= io.req.bits.dataRequest @[GpioRegTop.scala 35:13]
    reg_addr <= io.req.bits.addrRequest @[GpioRegTop.scala 36:12]
    reg_be <= io.req.bits.activeByteLane @[GpioRegTop.scala 37:10]
    node _io_rsp_valid_T = or(reg_we, reg_re) @[GpioRegTop.scala 39:38]
    node _io_rsp_valid_T_1 = mux(_io_rsp_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[GpioRegTop.scala 39:30]
    reg io_rsp_valid_REG : UInt<1>, clock @[GpioRegTop.scala 39:26]
    io_rsp_valid_REG <= _io_rsp_valid_T_1 @[GpioRegTop.scala 39:26]
    io.rsp.valid <= io_rsp_valid_REG @[GpioRegTop.scala 39:16]
    io.rsp.bits.dataResponse <= reg_rdata @[GpioRegTop.scala 40:28]
    io.rsp.bits.error <= reg_error @[GpioRegTop.scala 41:21]
    reg_rdata <= reg_rdata_next @[GpioRegTop.scala 43:13]
    node _reg_error_T = or(addr_miss, wr_err) @[GpioRegTop.scala 44:26]
    reg_error <= _reg_error_T @[GpioRegTop.scala 44:13]
    wire intr_state_qs : UInt<32> @[GpioRegTop.scala 47:42]
    wire intr_state_wd : UInt<32> @[GpioRegTop.scala 47:42]
    wire intr_state_we : UInt<1> @[GpioRegTop.scala 48:27]
    wire intr_enable_qs : UInt<32> @[GpioRegTop.scala 50:44]
    wire intr_enable_wd : UInt<32> @[GpioRegTop.scala 50:44]
    wire intr_enable_we : UInt<1> @[GpioRegTop.scala 51:28]
    wire intr_test_wd : UInt<32> @[GpioRegTop.scala 53:26]
    wire intr_test_we : UInt<1> @[GpioRegTop.scala 54:26]
    wire data_in_qs : UInt<32> @[GpioRegTop.scala 56:24]
    wire direct_out_qs : UInt<32> @[GpioRegTop.scala 58:42]
    wire direct_out_wd : UInt<32> @[GpioRegTop.scala 58:42]
    wire direct_out_we : UInt<1> @[GpioRegTop.scala 59:42]
    wire direct_out_re : UInt<1> @[GpioRegTop.scala 59:42]
    wire masked_out_lower_data_qs : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_data_wd : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_mask_wd : UInt<16> @[GpioRegTop.scala 61:90]
    wire masked_out_lower_data_we : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_lower_data_re : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_lower_mask_we : UInt<1> @[GpioRegTop.scala 62:90]
    wire masked_out_upper_data_qs : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_data_wd : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_mask_wd : UInt<16> @[GpioRegTop.scala 64:90]
    wire masked_out_upper_data_we : UInt<1> @[GpioRegTop.scala 65:90]
    wire masked_out_upper_data_re : UInt<1> @[GpioRegTop.scala 65:90]
    wire masked_out_upper_mask_we : UInt<1> @[GpioRegTop.scala 65:90]
    wire direct_oe_qs : UInt<32> @[GpioRegTop.scala 67:26]
    wire direct_oe_wd : UInt<32> @[GpioRegTop.scala 68:26]
    wire direct_oe_we : UInt<1> @[GpioRegTop.scala 69:40]
    wire direct_oe_re : UInt<1> @[GpioRegTop.scala 69:40]
    wire masked_oe_lower_data_qs : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_data_wd : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_mask_wd : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_mask_qs : UInt<16> @[GpioRegTop.scala 71:112]
    wire masked_oe_lower_data_we : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_data_re : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_mask_we : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_lower_mask_re : UInt<1> @[GpioRegTop.scala 72:112]
    wire masked_oe_upper_data_qs : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_data_wd : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_mask_wd : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_mask_qs : UInt<16> @[GpioRegTop.scala 74:112]
    wire masked_oe_upper_data_we : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_data_re : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_mask_we : UInt<1> @[GpioRegTop.scala 75:112]
    wire masked_oe_upper_mask_re : UInt<1> @[GpioRegTop.scala 75:112]
    wire intr_ctrl_en_rising_qs : UInt<32> @[GpioRegTop.scala 77:60]
    wire intr_ctrl_en_rising_wd : UInt<32> @[GpioRegTop.scala 77:60]
    wire intr_ctrl_en_rising_we : UInt<1> @[GpioRegTop.scala 78:36]
    wire intr_ctrl_en_falling_qs : UInt<32> @[GpioRegTop.scala 80:62]
    wire intr_ctrl_en_falling_wd : UInt<32> @[GpioRegTop.scala 80:62]
    wire intr_ctrl_en_falling_we : UInt<1> @[GpioRegTop.scala 81:37]
    wire intr_ctrl_en_lvlhigh_qs : UInt<32> @[GpioRegTop.scala 83:62]
    wire intr_ctrl_en_lvlhigh_wd : UInt<32> @[GpioRegTop.scala 83:62]
    wire intr_ctrl_en_lvlhigh_we : UInt<1> @[GpioRegTop.scala 84:37]
    wire intr_ctrl_en_lvllow_qs : UInt<32> @[GpioRegTop.scala 86:60]
    wire intr_ctrl_en_lvllow_wd : UInt<32> @[GpioRegTop.scala 86:60]
    wire intr_ctrl_en_lvllow_we : UInt<1> @[GpioRegTop.scala 87:36]
    inst intr_state_reg of SubReg @[GpioRegTop.scala 93:30]
    intr_state_reg.clock <= clock
    intr_state_reg.reset <= reset
    intr_state_reg.io.we <= intr_state_we @[GpioRegTop.scala 95:24]
    intr_state_reg.io.wd <= intr_state_wd @[GpioRegTop.scala 97:24]
    intr_state_reg.io.de <= io.hw2reg.intr_state.de @[GpioRegTop.scala 99:24]
    intr_state_reg.io.d <= io.hw2reg.intr_state.d @[GpioRegTop.scala 101:23]
    io.reg2hw.intr_state.q <= intr_state_reg.io.q @[GpioRegTop.scala 103:26]
    intr_state_qs <= intr_state_reg.io.qs @[GpioRegTop.scala 105:17]
    inst intr_enable_reg of SubReg_1 @[GpioRegTop.scala 108:31]
    intr_enable_reg.clock <= clock
    intr_enable_reg.reset <= reset
    intr_enable_reg.io.we <= intr_enable_we @[GpioRegTop.scala 109:25]
    intr_enable_reg.io.wd <= intr_enable_wd @[GpioRegTop.scala 110:25]
    intr_enable_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 111:24]
    intr_enable_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 112:25]
    io.reg2hw.intr_enable.q <= intr_enable_reg.io.q @[GpioRegTop.scala 113:27]
    intr_enable_qs <= intr_enable_reg.io.qs @[GpioRegTop.scala 114:18]
    inst intr_test_reg of SubRegExt @[GpioRegTop.scala 117:29]
    intr_test_reg.clock <= clock
    intr_test_reg.reset <= reset
    intr_test_reg.io.we <= intr_test_we @[GpioRegTop.scala 118:23]
    intr_test_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 119:23]
    intr_test_reg.io.wd <= intr_test_wd @[GpioRegTop.scala 120:23]
    intr_test_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 121:22]
    io.reg2hw.intr_test.qe <= intr_test_reg.io.qe @[GpioRegTop.scala 122:26]
    io.reg2hw.intr_test.q <= intr_test_reg.io.q @[GpioRegTop.scala 123:25]
    inst data_in_reg of SubReg_2 @[GpioRegTop.scala 126:27]
    data_in_reg.clock <= clock
    data_in_reg.reset <= reset
    data_in_reg.io.we <= UInt<1>("h00") @[GpioRegTop.scala 127:21]
    data_in_reg.io.wd <= UInt<32>("h00") @[GpioRegTop.scala 128:21]
    data_in_reg.io.de <= io.hw2reg.data_in.de @[GpioRegTop.scala 129:21]
    data_in_reg.io.d <= io.hw2reg.data_in.d @[GpioRegTop.scala 130:20]
    data_in_qs <= data_in_reg.io.qs @[GpioRegTop.scala 131:14]
    inst direct_out_reg of SubRegExt_1 @[GpioRegTop.scala 134:30]
    direct_out_reg.clock <= clock
    direct_out_reg.reset <= reset
    direct_out_reg.io.re <= direct_out_re @[GpioRegTop.scala 135:24]
    direct_out_reg.io.we <= direct_out_we @[GpioRegTop.scala 136:24]
    direct_out_reg.io.wd <= direct_out_wd @[GpioRegTop.scala 137:24]
    direct_out_reg.io.d <= io.hw2reg.direct_out.d @[GpioRegTop.scala 138:23]
    io.reg2hw.direct_out.qe <= direct_out_reg.io.qe @[GpioRegTop.scala 139:27]
    io.reg2hw.direct_out.q <= direct_out_reg.io.q @[GpioRegTop.scala 140:26]
    direct_out_qs <= direct_out_reg.io.qs @[GpioRegTop.scala 141:17]
    inst masked_out_lower_data_reg of SubRegExt_2 @[GpioRegTop.scala 145:41]
    masked_out_lower_data_reg.clock <= clock
    masked_out_lower_data_reg.reset <= reset
    masked_out_lower_data_reg.io.re <= masked_out_lower_data_re @[GpioRegTop.scala 146:35]
    masked_out_lower_data_reg.io.we <= masked_out_lower_data_we @[GpioRegTop.scala 147:35]
    masked_out_lower_data_reg.io.wd <= masked_out_lower_data_wd @[GpioRegTop.scala 148:35]
    masked_out_lower_data_reg.io.d <= io.hw2reg.masked_out_lower.data.d @[GpioRegTop.scala 149:34]
    io.reg2hw.masked_out_lower.data.qe <= masked_out_lower_data_reg.io.qe @[GpioRegTop.scala 150:38]
    io.reg2hw.masked_out_lower.data.q <= masked_out_lower_data_reg.io.q @[GpioRegTop.scala 151:37]
    masked_out_lower_data_qs <= masked_out_lower_data_reg.io.qs @[GpioRegTop.scala 152:28]
    inst masked_out_lower_mask_reg of SubRegExt_3 @[GpioRegTop.scala 156:41]
    masked_out_lower_mask_reg.clock <= clock
    masked_out_lower_mask_reg.reset <= reset
    masked_out_lower_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 157:35]
    masked_out_lower_mask_reg.io.we <= masked_out_lower_mask_we @[GpioRegTop.scala 158:35]
    masked_out_lower_mask_reg.io.wd <= masked_out_lower_mask_wd @[GpioRegTop.scala 159:35]
    masked_out_lower_mask_reg.io.d <= io.hw2reg.masked_out_lower.mask.d @[GpioRegTop.scala 160:34]
    io.reg2hw.masked_out_lower.mask.qe <= masked_out_lower_mask_reg.io.qe @[GpioRegTop.scala 161:38]
    io.reg2hw.masked_out_lower.mask.q <= masked_out_lower_mask_reg.io.q @[GpioRegTop.scala 162:37]
    inst masked_out_upper_data_reg of SubRegExt_4 @[GpioRegTop.scala 166:41]
    masked_out_upper_data_reg.clock <= clock
    masked_out_upper_data_reg.reset <= reset
    masked_out_upper_data_reg.io.re <= masked_out_upper_data_re @[GpioRegTop.scala 167:35]
    masked_out_upper_data_reg.io.we <= masked_out_upper_data_we @[GpioRegTop.scala 168:35]
    masked_out_upper_data_reg.io.wd <= masked_out_upper_data_wd @[GpioRegTop.scala 169:35]
    masked_out_upper_data_reg.io.d <= io.hw2reg.masked_out_upper.data.d @[GpioRegTop.scala 170:34]
    io.reg2hw.masked_out_upper.data.qe <= masked_out_upper_data_reg.io.qe @[GpioRegTop.scala 171:38]
    io.reg2hw.masked_out_upper.data.q <= masked_out_upper_data_reg.io.q @[GpioRegTop.scala 172:37]
    masked_out_upper_data_qs <= masked_out_upper_data_reg.io.qs @[GpioRegTop.scala 173:28]
    inst masked_out_upper_mask_reg of SubRegExt_5 @[GpioRegTop.scala 177:41]
    masked_out_upper_mask_reg.clock <= clock
    masked_out_upper_mask_reg.reset <= reset
    masked_out_upper_mask_reg.io.re <= UInt<1>("h00") @[GpioRegTop.scala 178:35]
    masked_out_upper_mask_reg.io.we <= masked_out_upper_mask_we @[GpioRegTop.scala 179:35]
    masked_out_upper_mask_reg.io.wd <= masked_out_upper_mask_wd @[GpioRegTop.scala 180:35]
    masked_out_upper_mask_reg.io.d <= io.hw2reg.masked_out_upper.mask.d @[GpioRegTop.scala 181:34]
    io.reg2hw.masked_out_upper.mask.qe <= masked_out_upper_mask_reg.io.qe @[GpioRegTop.scala 182:38]
    io.reg2hw.masked_out_upper.mask.q <= masked_out_upper_mask_reg.io.q @[GpioRegTop.scala 183:37]
    inst direct_oe_reg of SubRegExt_6 @[GpioRegTop.scala 186:29]
    direct_oe_reg.clock <= clock
    direct_oe_reg.reset <= reset
    direct_oe_reg.io.re <= direct_oe_re @[GpioRegTop.scala 187:23]
    direct_oe_reg.io.we <= direct_oe_we @[GpioRegTop.scala 188:23]
    direct_oe_reg.io.wd <= direct_oe_wd @[GpioRegTop.scala 189:23]
    direct_oe_reg.io.d <= io.hw2reg.direct_oe.d @[GpioRegTop.scala 190:22]
    io.reg2hw.direct_oe.qe <= direct_oe_reg.io.qe @[GpioRegTop.scala 191:26]
    io.reg2hw.direct_oe.q <= direct_oe_reg.io.q @[GpioRegTop.scala 192:25]
    direct_oe_qs <= direct_oe_reg.io.qs @[GpioRegTop.scala 193:16]
    inst masked_oe_lower_data_reg of SubRegExt_7 @[GpioRegTop.scala 197:40]
    masked_oe_lower_data_reg.clock <= clock
    masked_oe_lower_data_reg.reset <= reset
    masked_oe_lower_data_reg.io.re <= masked_oe_lower_data_re @[GpioRegTop.scala 198:34]
    masked_oe_lower_data_reg.io.we <= masked_oe_lower_data_we @[GpioRegTop.scala 199:34]
    masked_oe_lower_data_reg.io.wd <= masked_oe_lower_data_wd @[GpioRegTop.scala 200:34]
    masked_oe_lower_data_reg.io.d <= io.hw2reg.masked_oe_lower.data.d @[GpioRegTop.scala 201:33]
    io.reg2hw.masked_oe_lower.data.qe <= masked_oe_lower_data_reg.io.qe @[GpioRegTop.scala 202:37]
    io.reg2hw.masked_oe_lower.data.q <= masked_oe_lower_data_reg.io.q @[GpioRegTop.scala 203:36]
    masked_oe_lower_data_qs <= masked_oe_lower_data_reg.io.qs @[GpioRegTop.scala 204:27]
    inst masked_oe_lower_mask_reg of SubRegExt_8 @[GpioRegTop.scala 208:40]
    masked_oe_lower_mask_reg.clock <= clock
    masked_oe_lower_mask_reg.reset <= reset
    masked_oe_lower_mask_reg.io.re <= masked_oe_lower_mask_re @[GpioRegTop.scala 209:34]
    masked_oe_lower_mask_reg.io.we <= masked_oe_lower_mask_we @[GpioRegTop.scala 210:34]
    masked_oe_lower_mask_reg.io.wd <= masked_oe_lower_mask_wd @[GpioRegTop.scala 211:34]
    masked_oe_lower_mask_reg.io.d <= io.hw2reg.masked_oe_lower.mask.d @[GpioRegTop.scala 212:33]
    io.reg2hw.masked_oe_lower.mask.qe <= masked_oe_lower_mask_reg.io.qe @[GpioRegTop.scala 213:37]
    io.reg2hw.masked_oe_lower.mask.q <= masked_oe_lower_mask_reg.io.q @[GpioRegTop.scala 214:36]
    masked_oe_lower_mask_qs <= masked_oe_lower_mask_reg.io.qs @[GpioRegTop.scala 215:27]
    inst masked_oe_upper_data_reg of SubRegExt_9 @[GpioRegTop.scala 219:40]
    masked_oe_upper_data_reg.clock <= clock
    masked_oe_upper_data_reg.reset <= reset
    masked_oe_upper_data_reg.io.re <= masked_oe_upper_data_re @[GpioRegTop.scala 220:34]
    masked_oe_upper_data_reg.io.we <= masked_oe_upper_data_we @[GpioRegTop.scala 221:34]
    masked_oe_upper_data_reg.io.wd <= masked_oe_upper_data_wd @[GpioRegTop.scala 222:34]
    masked_oe_upper_data_reg.io.d <= io.hw2reg.masked_oe_upper.data.d @[GpioRegTop.scala 223:33]
    io.reg2hw.masked_oe_upper.data.qe <= masked_oe_upper_data_reg.io.qe @[GpioRegTop.scala 224:37]
    io.reg2hw.masked_oe_upper.data.q <= masked_oe_upper_data_reg.io.q @[GpioRegTop.scala 225:36]
    masked_oe_upper_data_qs <= masked_oe_upper_data_reg.io.qs @[GpioRegTop.scala 226:27]
    inst masked_oe_upper_mask_reg of SubRegExt_10 @[GpioRegTop.scala 230:40]
    masked_oe_upper_mask_reg.clock <= clock
    masked_oe_upper_mask_reg.reset <= reset
    masked_oe_upper_mask_reg.io.re <= masked_oe_upper_mask_re @[GpioRegTop.scala 231:34]
    masked_oe_upper_mask_reg.io.we <= masked_oe_upper_mask_we @[GpioRegTop.scala 232:34]
    masked_oe_upper_mask_reg.io.wd <= masked_oe_upper_mask_wd @[GpioRegTop.scala 233:34]
    masked_oe_upper_mask_reg.io.d <= io.hw2reg.masked_oe_upper.mask.d @[GpioRegTop.scala 234:33]
    io.reg2hw.masked_oe_upper.mask.qe <= masked_oe_upper_mask_reg.io.qe @[GpioRegTop.scala 235:37]
    io.reg2hw.masked_oe_upper.mask.q <= masked_oe_upper_mask_reg.io.q @[GpioRegTop.scala 236:36]
    masked_oe_upper_mask_qs <= masked_oe_upper_mask_reg.io.qs @[GpioRegTop.scala 237:27]
    inst intr_ctrl_en_rising_reg of SubReg_3 @[GpioRegTop.scala 240:39]
    intr_ctrl_en_rising_reg.clock <= clock
    intr_ctrl_en_rising_reg.reset <= reset
    intr_ctrl_en_rising_reg.io.we <= intr_ctrl_en_rising_we @[GpioRegTop.scala 241:33]
    intr_ctrl_en_rising_reg.io.wd <= intr_ctrl_en_rising_wd @[GpioRegTop.scala 242:33]
    intr_ctrl_en_rising_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 243:33]
    intr_ctrl_en_rising_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 244:32]
    io.reg2hw.intr_ctrl_en_rising.q <= intr_ctrl_en_rising_reg.io.q @[GpioRegTop.scala 245:35]
    intr_ctrl_en_rising_qs <= intr_ctrl_en_rising_reg.io.qs @[GpioRegTop.scala 246:26]
    inst intr_ctrl_en_falling_reg of SubReg_4 @[GpioRegTop.scala 249:40]
    intr_ctrl_en_falling_reg.clock <= clock
    intr_ctrl_en_falling_reg.reset <= reset
    intr_ctrl_en_falling_reg.io.we <= intr_ctrl_en_falling_we @[GpioRegTop.scala 250:34]
    intr_ctrl_en_falling_reg.io.wd <= intr_ctrl_en_falling_wd @[GpioRegTop.scala 251:34]
    intr_ctrl_en_falling_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 252:34]
    intr_ctrl_en_falling_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 253:33]
    io.reg2hw.intr_ctrl_en_falling.q <= intr_ctrl_en_falling_reg.io.q @[GpioRegTop.scala 254:36]
    intr_ctrl_en_falling_qs <= intr_ctrl_en_falling_reg.io.qs @[GpioRegTop.scala 255:27]
    inst intr_ctrl_en_lvlhigh_reg of SubReg_5 @[GpioRegTop.scala 258:40]
    intr_ctrl_en_lvlhigh_reg.clock <= clock
    intr_ctrl_en_lvlhigh_reg.reset <= reset
    intr_ctrl_en_lvlhigh_reg.io.we <= intr_ctrl_en_lvlhigh_we @[GpioRegTop.scala 259:34]
    intr_ctrl_en_lvlhigh_reg.io.wd <= intr_ctrl_en_lvlhigh_wd @[GpioRegTop.scala 260:34]
    intr_ctrl_en_lvlhigh_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 261:34]
    intr_ctrl_en_lvlhigh_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 262:33]
    io.reg2hw.intr_ctrl_en_lvlHigh.q <= intr_ctrl_en_lvlhigh_reg.io.q @[GpioRegTop.scala 263:36]
    intr_ctrl_en_lvlhigh_qs <= intr_ctrl_en_lvlhigh_reg.io.qs @[GpioRegTop.scala 264:27]
    inst intr_ctrl_en_lvllow_reg of SubReg_6 @[GpioRegTop.scala 267:39]
    intr_ctrl_en_lvllow_reg.clock <= clock
    intr_ctrl_en_lvllow_reg.reset <= reset
    intr_ctrl_en_lvllow_reg.io.we <= intr_ctrl_en_lvllow_we @[GpioRegTop.scala 268:33]
    intr_ctrl_en_lvllow_reg.io.wd <= intr_ctrl_en_lvllow_wd @[GpioRegTop.scala 269:33]
    intr_ctrl_en_lvllow_reg.io.de <= UInt<1>("h00") @[GpioRegTop.scala 270:33]
    intr_ctrl_en_lvllow_reg.io.d <= UInt<32>("h00") @[GpioRegTop.scala 271:32]
    io.reg2hw.intr_ctrl_en_lvlLow.q <= intr_ctrl_en_lvllow_reg.io.q @[GpioRegTop.scala 272:35]
    intr_ctrl_en_lvllow_qs <= intr_ctrl_en_lvllow_reg.io.qs @[GpioRegTop.scala 273:26]
    wire addr_hit : UInt<1>[14] @[GpioRegTop.scala 275:22]
    node _addr_hit_0_T = asUInt(UInt<1>("h00")) @[GpioRegTop.scala 277:63]
    node _addr_hit_0_T_1 = eq(reg_addr, _addr_hit_0_T) @[GpioRegTop.scala 277:29]
    addr_hit[0] <= _addr_hit_0_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_1_T = asUInt(UInt<3>("h04")) @[GpioRegTop.scala 277:63]
    node _addr_hit_1_T_1 = eq(reg_addr, _addr_hit_1_T) @[GpioRegTop.scala 277:29]
    addr_hit[1] <= _addr_hit_1_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_2_T = asUInt(UInt<4>("h08")) @[GpioRegTop.scala 277:63]
    node _addr_hit_2_T_1 = eq(reg_addr, _addr_hit_2_T) @[GpioRegTop.scala 277:29]
    addr_hit[2] <= _addr_hit_2_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_3_T = asUInt(UInt<4>("h0c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_3_T_1 = eq(reg_addr, _addr_hit_3_T) @[GpioRegTop.scala 277:29]
    addr_hit[3] <= _addr_hit_3_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_4_T = asUInt(UInt<5>("h010")) @[GpioRegTop.scala 277:63]
    node _addr_hit_4_T_1 = eq(reg_addr, _addr_hit_4_T) @[GpioRegTop.scala 277:29]
    addr_hit[4] <= _addr_hit_4_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_5_T = asUInt(UInt<5>("h014")) @[GpioRegTop.scala 277:63]
    node _addr_hit_5_T_1 = eq(reg_addr, _addr_hit_5_T) @[GpioRegTop.scala 277:29]
    addr_hit[5] <= _addr_hit_5_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_6_T = asUInt(UInt<5>("h018")) @[GpioRegTop.scala 277:63]
    node _addr_hit_6_T_1 = eq(reg_addr, _addr_hit_6_T) @[GpioRegTop.scala 277:29]
    addr_hit[6] <= _addr_hit_6_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_7_T = asUInt(UInt<5>("h01c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_7_T_1 = eq(reg_addr, _addr_hit_7_T) @[GpioRegTop.scala 277:29]
    addr_hit[7] <= _addr_hit_7_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_8_T = asUInt(UInt<6>("h020")) @[GpioRegTop.scala 277:63]
    node _addr_hit_8_T_1 = eq(reg_addr, _addr_hit_8_T) @[GpioRegTop.scala 277:29]
    addr_hit[8] <= _addr_hit_8_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_9_T = asUInt(UInt<6>("h024")) @[GpioRegTop.scala 277:63]
    node _addr_hit_9_T_1 = eq(reg_addr, _addr_hit_9_T) @[GpioRegTop.scala 277:29]
    addr_hit[9] <= _addr_hit_9_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_10_T = asUInt(UInt<6>("h028")) @[GpioRegTop.scala 277:63]
    node _addr_hit_10_T_1 = eq(reg_addr, _addr_hit_10_T) @[GpioRegTop.scala 277:29]
    addr_hit[10] <= _addr_hit_10_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_11_T = asUInt(UInt<6>("h02c")) @[GpioRegTop.scala 277:63]
    node _addr_hit_11_T_1 = eq(reg_addr, _addr_hit_11_T) @[GpioRegTop.scala 277:29]
    addr_hit[11] <= _addr_hit_11_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_12_T = asUInt(UInt<6>("h030")) @[GpioRegTop.scala 277:63]
    node _addr_hit_12_T_1 = eq(reg_addr, _addr_hit_12_T) @[GpioRegTop.scala 277:29]
    addr_hit[12] <= _addr_hit_12_T_1 @[GpioRegTop.scala 277:17]
    node _addr_hit_13_T = asUInt(UInt<6>("h034")) @[GpioRegTop.scala 277:63]
    node _addr_hit_13_T_1 = eq(reg_addr, _addr_hit_13_T) @[GpioRegTop.scala 277:29]
    addr_hit[13] <= _addr_hit_13_T_1 @[GpioRegTop.scala 277:17]
    node _addr_miss_T = or(reg_re, reg_we) @[GpioRegTop.scala 280:27]
    node _addr_miss_T_1 = eq(addr_hit[0], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_2 = eq(addr_hit[1], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_3 = eq(addr_hit[2], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_4 = eq(addr_hit[3], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_5 = eq(addr_hit[4], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_6 = eq(addr_hit[5], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_7 = eq(addr_hit[6], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_8 = eq(addr_hit[7], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_9 = eq(addr_hit[8], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_10 = eq(addr_hit[9], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_11 = eq(addr_hit[10], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_12 = eq(addr_hit[11], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_13 = eq(addr_hit[12], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_14 = eq(addr_hit[13], UInt<1>("h01")) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_15 = or(UInt<1>("h00"), _addr_miss_T_1) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_16 = or(_addr_miss_T_15, _addr_miss_T_2) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_17 = or(_addr_miss_T_16, _addr_miss_T_3) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_18 = or(_addr_miss_T_17, _addr_miss_T_4) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_19 = or(_addr_miss_T_18, _addr_miss_T_5) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_20 = or(_addr_miss_T_19, _addr_miss_T_6) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_21 = or(_addr_miss_T_20, _addr_miss_T_7) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_22 = or(_addr_miss_T_21, _addr_miss_T_8) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_23 = or(_addr_miss_T_22, _addr_miss_T_9) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_24 = or(_addr_miss_T_23, _addr_miss_T_10) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_25 = or(_addr_miss_T_24, _addr_miss_T_11) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_26 = or(_addr_miss_T_25, _addr_miss_T_12) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_27 = or(_addr_miss_T_26, _addr_miss_T_13) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_28 = or(_addr_miss_T_27, _addr_miss_T_14) @[GpioRegTop.scala 280:56]
    node _addr_miss_T_29 = not(_addr_miss_T_28) @[GpioRegTop.scala 280:38]
    node _addr_miss_T_30 = mux(_addr_miss_T, _addr_miss_T_29, UInt<1>("h00")) @[GpioRegTop.scala 280:19]
    addr_miss <= _addr_miss_T_30 @[GpioRegTop.scala 280:13]
    wire GPIO_PERMIT : UInt<4>[14] @[GpioRegTop.scala 282:25]
    GPIO_PERMIT[0] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[1] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[2] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[3] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[4] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[5] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[6] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[7] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[8] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[9] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[10] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[11] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[12] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    GPIO_PERMIT[13] <= UInt<4>("h0f") @[GpioRegTop.scala 285:20]
    node _T = and(addr_hit[0], reg_we) @[GpioRegTop.scala 289:8]
    node _T_1 = and(GPIO_PERMIT[0], reg_be) @[GpioRegTop.scala 289:31]
    node _T_2 = neq(GPIO_PERMIT[0], _T_1) @[GpioRegTop.scala 289:24]
    node _T_3 = and(_T, _T_2) @[GpioRegTop.scala 289:18]
    node _T_4 = and(addr_hit[1], reg_we) @[GpioRegTop.scala 289:8]
    node _T_5 = and(GPIO_PERMIT[1], reg_be) @[GpioRegTop.scala 289:31]
    node _T_6 = neq(GPIO_PERMIT[1], _T_5) @[GpioRegTop.scala 289:24]
    node _T_7 = and(_T_4, _T_6) @[GpioRegTop.scala 289:18]
    node _T_8 = and(addr_hit[2], reg_we) @[GpioRegTop.scala 289:8]
    node _T_9 = and(GPIO_PERMIT[2], reg_be) @[GpioRegTop.scala 289:31]
    node _T_10 = neq(GPIO_PERMIT[2], _T_9) @[GpioRegTop.scala 289:24]
    node _T_11 = and(_T_8, _T_10) @[GpioRegTop.scala 289:18]
    node _T_12 = and(addr_hit[3], reg_we) @[GpioRegTop.scala 289:8]
    node _T_13 = and(GPIO_PERMIT[3], reg_be) @[GpioRegTop.scala 289:31]
    node _T_14 = neq(GPIO_PERMIT[3], _T_13) @[GpioRegTop.scala 289:24]
    node _T_15 = and(_T_12, _T_14) @[GpioRegTop.scala 289:18]
    node _T_16 = and(addr_hit[4], reg_we) @[GpioRegTop.scala 289:8]
    node _T_17 = and(GPIO_PERMIT[4], reg_be) @[GpioRegTop.scala 289:31]
    node _T_18 = neq(GPIO_PERMIT[4], _T_17) @[GpioRegTop.scala 289:24]
    node _T_19 = and(_T_16, _T_18) @[GpioRegTop.scala 289:18]
    node _T_20 = and(addr_hit[5], reg_we) @[GpioRegTop.scala 289:8]
    node _T_21 = and(GPIO_PERMIT[5], reg_be) @[GpioRegTop.scala 289:31]
    node _T_22 = neq(GPIO_PERMIT[5], _T_21) @[GpioRegTop.scala 289:24]
    node _T_23 = and(_T_20, _T_22) @[GpioRegTop.scala 289:18]
    node _T_24 = and(addr_hit[6], reg_we) @[GpioRegTop.scala 289:8]
    node _T_25 = and(GPIO_PERMIT[6], reg_be) @[GpioRegTop.scala 289:31]
    node _T_26 = neq(GPIO_PERMIT[6], _T_25) @[GpioRegTop.scala 289:24]
    node _T_27 = and(_T_24, _T_26) @[GpioRegTop.scala 289:18]
    node _T_28 = and(addr_hit[7], reg_we) @[GpioRegTop.scala 289:8]
    node _T_29 = and(GPIO_PERMIT[7], reg_be) @[GpioRegTop.scala 289:31]
    node _T_30 = neq(GPIO_PERMIT[7], _T_29) @[GpioRegTop.scala 289:24]
    node _T_31 = and(_T_28, _T_30) @[GpioRegTop.scala 289:18]
    node _T_32 = and(addr_hit[8], reg_we) @[GpioRegTop.scala 289:8]
    node _T_33 = and(GPIO_PERMIT[8], reg_be) @[GpioRegTop.scala 289:31]
    node _T_34 = neq(GPIO_PERMIT[8], _T_33) @[GpioRegTop.scala 289:24]
    node _T_35 = and(_T_32, _T_34) @[GpioRegTop.scala 289:18]
    node _T_36 = and(addr_hit[9], reg_we) @[GpioRegTop.scala 289:8]
    node _T_37 = and(GPIO_PERMIT[9], reg_be) @[GpioRegTop.scala 289:31]
    node _T_38 = neq(GPIO_PERMIT[9], _T_37) @[GpioRegTop.scala 289:24]
    node _T_39 = and(_T_36, _T_38) @[GpioRegTop.scala 289:18]
    node _T_40 = and(addr_hit[10], reg_we) @[GpioRegTop.scala 289:8]
    node _T_41 = and(GPIO_PERMIT[10], reg_be) @[GpioRegTop.scala 289:31]
    node _T_42 = neq(GPIO_PERMIT[10], _T_41) @[GpioRegTop.scala 289:24]
    node _T_43 = and(_T_40, _T_42) @[GpioRegTop.scala 289:18]
    node _T_44 = and(addr_hit[11], reg_we) @[GpioRegTop.scala 289:8]
    node _T_45 = and(GPIO_PERMIT[11], reg_be) @[GpioRegTop.scala 289:31]
    node _T_46 = neq(GPIO_PERMIT[11], _T_45) @[GpioRegTop.scala 289:24]
    node _T_47 = and(_T_44, _T_46) @[GpioRegTop.scala 289:18]
    node _T_48 = and(addr_hit[12], reg_we) @[GpioRegTop.scala 289:8]
    node _T_49 = and(GPIO_PERMIT[12], reg_be) @[GpioRegTop.scala 289:31]
    node _T_50 = neq(GPIO_PERMIT[12], _T_49) @[GpioRegTop.scala 289:24]
    node _T_51 = and(_T_48, _T_50) @[GpioRegTop.scala 289:18]
    node _T_52 = and(addr_hit[13], reg_we) @[GpioRegTop.scala 289:8]
    node _T_53 = and(GPIO_PERMIT[13], reg_be) @[GpioRegTop.scala 289:31]
    node _T_54 = neq(GPIO_PERMIT[13], _T_53) @[GpioRegTop.scala 289:24]
    node _T_55 = and(_T_52, _T_54) @[GpioRegTop.scala 289:18]
    node _wr_err_T = mux(_T_55, UInt<1>("h01"), UInt<1>("h00")) @[Mux.scala 98:16]
    node _wr_err_T_1 = mux(_T_51, UInt<1>("h01"), _wr_err_T) @[Mux.scala 98:16]
    node _wr_err_T_2 = mux(_T_47, UInt<1>("h01"), _wr_err_T_1) @[Mux.scala 98:16]
    node _wr_err_T_3 = mux(_T_43, UInt<1>("h01"), _wr_err_T_2) @[Mux.scala 98:16]
    node _wr_err_T_4 = mux(_T_39, UInt<1>("h01"), _wr_err_T_3) @[Mux.scala 98:16]
    node _wr_err_T_5 = mux(_T_35, UInt<1>("h01"), _wr_err_T_4) @[Mux.scala 98:16]
    node _wr_err_T_6 = mux(_T_31, UInt<1>("h01"), _wr_err_T_5) @[Mux.scala 98:16]
    node _wr_err_T_7 = mux(_T_27, UInt<1>("h01"), _wr_err_T_6) @[Mux.scala 98:16]
    node _wr_err_T_8 = mux(_T_23, UInt<1>("h01"), _wr_err_T_7) @[Mux.scala 98:16]
    node _wr_err_T_9 = mux(_T_19, UInt<1>("h01"), _wr_err_T_8) @[Mux.scala 98:16]
    node _wr_err_T_10 = mux(_T_15, UInt<1>("h01"), _wr_err_T_9) @[Mux.scala 98:16]
    node _wr_err_T_11 = mux(_T_11, UInt<1>("h01"), _wr_err_T_10) @[Mux.scala 98:16]
    node _wr_err_T_12 = mux(_T_7, UInt<1>("h01"), _wr_err_T_11) @[Mux.scala 98:16]
    node _wr_err_T_13 = mux(_T_3, UInt<1>("h01"), _wr_err_T_12) @[Mux.scala 98:16]
    wr_err <= _wr_err_T_13 @[GpioRegTop.scala 292:10]
    node _intr_state_we_T = and(addr_hit[0], reg_we) @[GpioRegTop.scala 296:32]
    node _intr_state_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 296:43]
    node _intr_state_we_T_2 = and(_intr_state_we_T, _intr_state_we_T_1) @[GpioRegTop.scala 296:41]
    intr_state_we <= _intr_state_we_T_2 @[GpioRegTop.scala 296:17]
    intr_state_wd <= reg_wdata @[GpioRegTop.scala 297:17]
    node _intr_enable_we_T = and(addr_hit[1], reg_we) @[GpioRegTop.scala 299:33]
    node _intr_enable_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 299:44]
    node _intr_enable_we_T_2 = and(_intr_enable_we_T, _intr_enable_we_T_1) @[GpioRegTop.scala 299:42]
    intr_enable_we <= _intr_enable_we_T_2 @[GpioRegTop.scala 299:18]
    intr_enable_wd <= reg_wdata @[GpioRegTop.scala 300:18]
    node _intr_test_we_T = and(addr_hit[2], reg_we) @[GpioRegTop.scala 302:31]
    node _intr_test_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 302:42]
    node _intr_test_we_T_2 = and(_intr_test_we_T, _intr_test_we_T_1) @[GpioRegTop.scala 302:40]
    intr_test_we <= _intr_test_we_T_2 @[GpioRegTop.scala 302:16]
    intr_test_wd <= reg_wdata @[GpioRegTop.scala 303:16]
    node _direct_out_we_T = and(addr_hit[4], reg_we) @[GpioRegTop.scala 305:32]
    node _direct_out_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 305:43]
    node _direct_out_we_T_2 = and(_direct_out_we_T, _direct_out_we_T_1) @[GpioRegTop.scala 305:41]
    direct_out_we <= _direct_out_we_T_2 @[GpioRegTop.scala 305:17]
    direct_out_wd <= reg_wdata @[GpioRegTop.scala 306:17]
    node _direct_out_re_T = and(addr_hit[4], reg_re) @[GpioRegTop.scala 307:32]
    direct_out_re <= _direct_out_re_T @[GpioRegTop.scala 307:17]
    node _masked_out_lower_data_we_T = and(addr_hit[5], reg_we) @[GpioRegTop.scala 309:43]
    node _masked_out_lower_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 309:54]
    node _masked_out_lower_data_we_T_2 = and(_masked_out_lower_data_we_T, _masked_out_lower_data_we_T_1) @[GpioRegTop.scala 309:52]
    masked_out_lower_data_we <= _masked_out_lower_data_we_T_2 @[GpioRegTop.scala 309:28]
    node _masked_out_lower_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 310:40]
    masked_out_lower_data_wd <= _masked_out_lower_data_wd_T @[GpioRegTop.scala 310:28]
    node _masked_out_lower_data_re_T = and(addr_hit[5], reg_re) @[GpioRegTop.scala 311:43]
    masked_out_lower_data_re <= _masked_out_lower_data_re_T @[GpioRegTop.scala 311:28]
    node _masked_out_lower_mask_we_T = and(addr_hit[5], reg_we) @[GpioRegTop.scala 313:43]
    node _masked_out_lower_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 313:54]
    node _masked_out_lower_mask_we_T_2 = and(_masked_out_lower_mask_we_T, _masked_out_lower_mask_we_T_1) @[GpioRegTop.scala 313:52]
    masked_out_lower_mask_we <= _masked_out_lower_mask_we_T_2 @[GpioRegTop.scala 313:28]
    node _masked_out_lower_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 314:40]
    masked_out_lower_mask_wd <= _masked_out_lower_mask_wd_T @[GpioRegTop.scala 314:28]
    node _masked_out_upper_data_we_T = and(addr_hit[6], reg_we) @[GpioRegTop.scala 316:43]
    node _masked_out_upper_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 316:54]
    node _masked_out_upper_data_we_T_2 = and(_masked_out_upper_data_we_T, _masked_out_upper_data_we_T_1) @[GpioRegTop.scala 316:52]
    masked_out_upper_data_we <= _masked_out_upper_data_we_T_2 @[GpioRegTop.scala 316:28]
    node _masked_out_upper_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 317:40]
    masked_out_upper_data_wd <= _masked_out_upper_data_wd_T @[GpioRegTop.scala 317:28]
    node _masked_out_upper_data_re_T = and(addr_hit[6], reg_re) @[GpioRegTop.scala 318:43]
    masked_out_upper_data_re <= _masked_out_upper_data_re_T @[GpioRegTop.scala 318:28]
    node _masked_out_upper_mask_we_T = and(addr_hit[6], reg_we) @[GpioRegTop.scala 320:43]
    node _masked_out_upper_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 320:54]
    node _masked_out_upper_mask_we_T_2 = and(_masked_out_upper_mask_we_T, _masked_out_upper_mask_we_T_1) @[GpioRegTop.scala 320:52]
    masked_out_upper_mask_we <= _masked_out_upper_mask_we_T_2 @[GpioRegTop.scala 320:28]
    node _masked_out_upper_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 321:40]
    masked_out_upper_mask_wd <= _masked_out_upper_mask_wd_T @[GpioRegTop.scala 321:28]
    node _direct_oe_we_T = and(addr_hit[7], reg_we) @[GpioRegTop.scala 323:31]
    node _direct_oe_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 323:42]
    node _direct_oe_we_T_2 = and(_direct_oe_we_T, _direct_oe_we_T_1) @[GpioRegTop.scala 323:40]
    direct_oe_we <= _direct_oe_we_T_2 @[GpioRegTop.scala 323:16]
    direct_oe_wd <= reg_wdata @[GpioRegTop.scala 324:16]
    node _direct_oe_re_T = and(addr_hit[7], reg_re) @[GpioRegTop.scala 325:31]
    direct_oe_re <= _direct_oe_re_T @[GpioRegTop.scala 325:16]
    node _masked_oe_lower_data_we_T = and(addr_hit[8], reg_we) @[GpioRegTop.scala 327:42]
    node _masked_oe_lower_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 327:53]
    node _masked_oe_lower_data_we_T_2 = and(_masked_oe_lower_data_we_T, _masked_oe_lower_data_we_T_1) @[GpioRegTop.scala 327:51]
    masked_oe_lower_data_we <= _masked_oe_lower_data_we_T_2 @[GpioRegTop.scala 327:27]
    node _masked_oe_lower_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 328:39]
    masked_oe_lower_data_wd <= _masked_oe_lower_data_wd_T @[GpioRegTop.scala 328:27]
    node _masked_oe_lower_data_re_T = and(addr_hit[8], reg_re) @[GpioRegTop.scala 329:42]
    masked_oe_lower_data_re <= _masked_oe_lower_data_re_T @[GpioRegTop.scala 329:27]
    node _masked_oe_lower_mask_we_T = and(addr_hit[8], reg_we) @[GpioRegTop.scala 331:42]
    node _masked_oe_lower_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 331:53]
    node _masked_oe_lower_mask_we_T_2 = and(_masked_oe_lower_mask_we_T, _masked_oe_lower_mask_we_T_1) @[GpioRegTop.scala 331:51]
    masked_oe_lower_mask_we <= _masked_oe_lower_mask_we_T_2 @[GpioRegTop.scala 331:27]
    node _masked_oe_lower_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 332:39]
    masked_oe_lower_mask_wd <= _masked_oe_lower_mask_wd_T @[GpioRegTop.scala 332:27]
    node _masked_oe_lower_mask_re_T = and(addr_hit[8], reg_re) @[GpioRegTop.scala 333:42]
    masked_oe_lower_mask_re <= _masked_oe_lower_mask_re_T @[GpioRegTop.scala 333:27]
    node _masked_oe_upper_data_we_T = and(addr_hit[9], reg_we) @[GpioRegTop.scala 335:42]
    node _masked_oe_upper_data_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 335:53]
    node _masked_oe_upper_data_we_T_2 = and(_masked_oe_upper_data_we_T, _masked_oe_upper_data_we_T_1) @[GpioRegTop.scala 335:51]
    masked_oe_upper_data_we <= _masked_oe_upper_data_we_T_2 @[GpioRegTop.scala 335:27]
    node _masked_oe_upper_data_wd_T = bits(reg_wdata, 15, 0) @[GpioRegTop.scala 336:39]
    masked_oe_upper_data_wd <= _masked_oe_upper_data_wd_T @[GpioRegTop.scala 336:27]
    node _masked_oe_upper_data_re_T = and(addr_hit[9], reg_re) @[GpioRegTop.scala 337:42]
    masked_oe_upper_data_re <= _masked_oe_upper_data_re_T @[GpioRegTop.scala 337:27]
    node _masked_oe_upper_mask_we_T = and(addr_hit[9], reg_we) @[GpioRegTop.scala 339:42]
    node _masked_oe_upper_mask_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 339:53]
    node _masked_oe_upper_mask_we_T_2 = and(_masked_oe_upper_mask_we_T, _masked_oe_upper_mask_we_T_1) @[GpioRegTop.scala 339:51]
    masked_oe_upper_mask_we <= _masked_oe_upper_mask_we_T_2 @[GpioRegTop.scala 339:27]
    node _masked_oe_upper_mask_wd_T = bits(reg_wdata, 31, 16) @[GpioRegTop.scala 340:39]
    masked_oe_upper_mask_wd <= _masked_oe_upper_mask_wd_T @[GpioRegTop.scala 340:27]
    node _masked_oe_upper_mask_re_T = and(addr_hit[9], reg_re) @[GpioRegTop.scala 341:42]
    masked_oe_upper_mask_re <= _masked_oe_upper_mask_re_T @[GpioRegTop.scala 341:27]
    node _intr_ctrl_en_rising_we_T = and(addr_hit[10], reg_we) @[GpioRegTop.scala 343:42]
    node _intr_ctrl_en_rising_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 343:53]
    node _intr_ctrl_en_rising_we_T_2 = and(_intr_ctrl_en_rising_we_T, _intr_ctrl_en_rising_we_T_1) @[GpioRegTop.scala 343:51]
    intr_ctrl_en_rising_we <= _intr_ctrl_en_rising_we_T_2 @[GpioRegTop.scala 343:26]
    intr_ctrl_en_rising_wd <= reg_wdata @[GpioRegTop.scala 344:26]
    node _intr_ctrl_en_falling_we_T = and(addr_hit[11], reg_we) @[GpioRegTop.scala 346:43]
    node _intr_ctrl_en_falling_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 346:54]
    node _intr_ctrl_en_falling_we_T_2 = and(_intr_ctrl_en_falling_we_T, _intr_ctrl_en_falling_we_T_1) @[GpioRegTop.scala 346:52]
    intr_ctrl_en_falling_we <= _intr_ctrl_en_falling_we_T_2 @[GpioRegTop.scala 346:27]
    intr_ctrl_en_falling_wd <= reg_wdata @[GpioRegTop.scala 347:27]
    node _intr_ctrl_en_lvlhigh_we_T = and(addr_hit[12], reg_we) @[GpioRegTop.scala 349:43]
    node _intr_ctrl_en_lvlhigh_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 349:54]
    node _intr_ctrl_en_lvlhigh_we_T_2 = and(_intr_ctrl_en_lvlhigh_we_T, _intr_ctrl_en_lvlhigh_we_T_1) @[GpioRegTop.scala 349:52]
    intr_ctrl_en_lvlhigh_we <= _intr_ctrl_en_lvlhigh_we_T_2 @[GpioRegTop.scala 349:27]
    intr_ctrl_en_lvlhigh_wd <= reg_wdata @[GpioRegTop.scala 350:27]
    node _intr_ctrl_en_lvllow_we_T = and(addr_hit[13], reg_we) @[GpioRegTop.scala 352:42]
    node _intr_ctrl_en_lvllow_we_T_1 = eq(wr_err, UInt<1>("h00")) @[GpioRegTop.scala 352:53]
    node _intr_ctrl_en_lvllow_we_T_2 = and(_intr_ctrl_en_lvllow_we_T, _intr_ctrl_en_lvllow_we_T_1) @[GpioRegTop.scala 352:51]
    intr_ctrl_en_lvllow_we <= _intr_ctrl_en_lvllow_we_T_2 @[GpioRegTop.scala 352:26]
    intr_ctrl_en_lvllow_wd <= reg_wdata @[GpioRegTop.scala 353:26]
    reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 355:18]
    when addr_hit[0] : @[GpioRegTop.scala 356:21]
      reg_rdata_next <= intr_state_qs @[GpioRegTop.scala 357:20]
      skip @[GpioRegTop.scala 356:21]
    else : @[GpioRegTop.scala 358:27]
      when addr_hit[1] : @[GpioRegTop.scala 358:27]
        reg_rdata_next <= intr_enable_qs @[GpioRegTop.scala 359:20]
        skip @[GpioRegTop.scala 358:27]
      else : @[GpioRegTop.scala 360:27]
        when addr_hit[2] : @[GpioRegTop.scala 360:27]
          reg_rdata_next <= UInt<1>("h00") @[GpioRegTop.scala 361:20]
          skip @[GpioRegTop.scala 360:27]
        else : @[GpioRegTop.scala 362:27]
          when addr_hit[3] : @[GpioRegTop.scala 362:27]
            reg_rdata_next <= data_in_qs @[GpioRegTop.scala 363:20]
            skip @[GpioRegTop.scala 362:27]
          else : @[GpioRegTop.scala 364:27]
            when addr_hit[4] : @[GpioRegTop.scala 364:27]
              reg_rdata_next <= direct_out_qs @[GpioRegTop.scala 365:20]
              skip @[GpioRegTop.scala 364:27]
            else : @[GpioRegTop.scala 366:27]
              when addr_hit[5] : @[GpioRegTop.scala 366:27]
                node _reg_rdata_next_T = cat(UInt<16>("h00"), masked_out_lower_data_qs) @[Cat.scala 30:58]
                reg_rdata_next <= _reg_rdata_next_T @[GpioRegTop.scala 367:20]
                skip @[GpioRegTop.scala 366:27]
              else : @[GpioRegTop.scala 368:27]
                when addr_hit[6] : @[GpioRegTop.scala 368:27]
                  node _reg_rdata_next_T_1 = cat(UInt<16>("h00"), masked_out_upper_data_qs) @[Cat.scala 30:58]
                  reg_rdata_next <= _reg_rdata_next_T_1 @[GpioRegTop.scala 369:20]
                  skip @[GpioRegTop.scala 368:27]
                else : @[GpioRegTop.scala 370:27]
                  when addr_hit[7] : @[GpioRegTop.scala 370:27]
                    reg_rdata_next <= direct_oe_qs @[GpioRegTop.scala 371:20]
                    skip @[GpioRegTop.scala 370:27]
                  else : @[GpioRegTop.scala 372:27]
                    when addr_hit[8] : @[GpioRegTop.scala 372:27]
                      node _reg_rdata_next_T_2 = cat(masked_oe_lower_mask_qs, masked_oe_lower_data_qs) @[Cat.scala 30:58]
                      reg_rdata_next <= _reg_rdata_next_T_2 @[GpioRegTop.scala 373:20]
                      skip @[GpioRegTop.scala 372:27]
                    else : @[GpioRegTop.scala 374:27]
                      when addr_hit[9] : @[GpioRegTop.scala 374:27]
                        node _reg_rdata_next_T_3 = cat(masked_oe_upper_mask_qs, masked_oe_upper_data_qs) @[Cat.scala 30:58]
                        reg_rdata_next <= _reg_rdata_next_T_3 @[GpioRegTop.scala 375:20]
                        skip @[GpioRegTop.scala 374:27]
                      else : @[GpioRegTop.scala 376:28]
                        when addr_hit[10] : @[GpioRegTop.scala 376:28]
                          reg_rdata_next <= intr_ctrl_en_rising_qs @[GpioRegTop.scala 377:20]
                          skip @[GpioRegTop.scala 376:28]
                        else : @[GpioRegTop.scala 378:28]
                          when addr_hit[11] : @[GpioRegTop.scala 378:28]
                            reg_rdata_next <= intr_ctrl_en_falling_qs @[GpioRegTop.scala 379:20]
                            skip @[GpioRegTop.scala 378:28]
                          else : @[GpioRegTop.scala 380:28]
                            when addr_hit[12] : @[GpioRegTop.scala 380:28]
                              reg_rdata_next <= intr_ctrl_en_lvlhigh_qs @[GpioRegTop.scala 381:20]
                              skip @[GpioRegTop.scala 380:28]
                            else : @[GpioRegTop.scala 382:28]
                              when addr_hit[13] : @[GpioRegTop.scala 382:28]
                                reg_rdata_next <= intr_ctrl_en_lvllow_qs @[GpioRegTop.scala 383:20]
                                skip @[GpioRegTop.scala 382:28]
                              else : @[GpioRegTop.scala 384:15]
                                node _reg_rdata_next_T_4 = mux(UInt<1>("h01"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
                                reg_rdata_next <= _reg_rdata_next_T_4 @[GpioRegTop.scala 385:20]
                                skip @[GpioRegTop.scala 384:15]
    
  module IntrHardware : 
    input clock : Clock
    input reset : Reset
    output io : {flip event_intr_i : UInt<32>, flip reg2hw_intr_enable_q_i : UInt<32>, flip reg2hw_intr_test_q_i : UInt<32>, flip reg2hw_intr_test_qe_i : UInt<1>, flip reg2hw_intr_state_q_i : UInt<32>, hw2reg_intr_state_de_o : UInt<1>, hw2reg_intr_state_d_o : UInt<32>, intr_o : UInt<32>}
    
    wire new_event : UInt<32> @[IntrHardware.scala 25:23]
    node _new_event_T = bits(io.reg2hw_intr_test_qe_i, 0, 0) @[Bitwise.scala 72:15]
    node _new_event_T_1 = mux(_new_event_T, UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
    node _new_event_T_2 = and(_new_event_T_1, io.reg2hw_intr_test_q_i) @[IntrHardware.scala 26:54]
    node _new_event_T_3 = or(_new_event_T_2, io.event_intr_i) @[IntrHardware.scala 26:80]
    new_event <= _new_event_T_3 @[IntrHardware.scala 26:13]
    node _io_hw2reg_intr_state_de_o_T = orr(new_event) @[IntrHardware.scala 27:45]
    io.hw2reg_intr_state_de_o <= _io_hw2reg_intr_state_de_o_T @[IntrHardware.scala 27:29]
    node _io_hw2reg_intr_state_d_o_T = or(new_event, io.reg2hw_intr_state_q_i) @[IntrHardware.scala 28:41]
    io.hw2reg_intr_state_d_o <= _io_hw2reg_intr_state_d_o_T @[IntrHardware.scala 28:28]
    reg reg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IntrHardware.scala 31:22]
    node _reg_T = and(io.reg2hw_intr_state_q_i, io.reg2hw_intr_enable_q_i) @[IntrHardware.scala 32:37]
    reg <= _reg_T @[IntrHardware.scala 32:9]
    io.intr_o <= reg @[IntrHardware.scala 33:15]
    
  module Gpio : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_gpio_i : UInt<32>, cio_gpio_o : UInt<32>, cio_gpio_en_o : UInt<32>, intr_gpio_o : UInt<32>}
    
    wire reg2hw : {intr_state : {q : UInt<32>}, intr_enable : {q : UInt<32>}, intr_test : {q : UInt<32>, qe : UInt<1>}, direct_out : {q : UInt<32>, qe : UInt<1>}, masked_out_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_out_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, direct_oe : {q : UInt<32>, qe : UInt<1>}, masked_oe_lower : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, masked_oe_upper : {data : {q : UInt<16>, qe : UInt<1>}, mask : {q : UInt<16>, qe : UInt<1>}}, intr_ctrl_en_rising : {q : UInt<32>}, intr_ctrl_en_falling : {q : UInt<32>}, intr_ctrl_en_lvlHigh : {q : UInt<32>}, intr_ctrl_en_lvlLow : {q : UInt<32>}} @[Gpio.scala 20:20]
    wire hw2reg : {intr_state : {flip d : UInt<32>, flip de : UInt<1>}, data_in : {flip d : UInt<32>, flip de : UInt<1>}, direct_out : {flip d : UInt<32>}, masked_out_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_out_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, direct_oe : {flip d : UInt<32>}, masked_oe_lower : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}, masked_oe_upper : {data : {flip d : UInt<16>}, mask : {flip d : UInt<16>}}} @[Gpio.scala 21:20]
    inst gpioRegTop of GpioRegTop @[Gpio.scala 23:26]
    gpioRegTop.clock <= clock
    gpioRegTop.reset <= reset
    gpioRegTop.io.req.bits.isWrite <= io.req.bits.isWrite @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.activeByteLane <= io.req.bits.activeByteLane @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.dataRequest <= io.req.bits.dataRequest @[Gpio.scala 25:21]
    gpioRegTop.io.req.bits.addrRequest <= io.req.bits.addrRequest @[Gpio.scala 25:21]
    gpioRegTop.io.req.valid <= io.req.valid @[Gpio.scala 25:21]
    io.req.ready <= gpioRegTop.io.req.ready @[Gpio.scala 25:21]
    io.rsp.bits.error <= gpioRegTop.io.rsp.bits.error @[Gpio.scala 26:10]
    io.rsp.bits.dataResponse <= gpioRegTop.io.rsp.bits.dataResponse @[Gpio.scala 26:10]
    io.rsp.valid <= gpioRegTop.io.rsp.valid @[Gpio.scala 26:10]
    gpioRegTop.io.rsp.ready <= io.rsp.ready @[Gpio.scala 26:10]
    reg2hw.intr_ctrl_en_lvlLow.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlLow.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_lvlHigh.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_lvlHigh.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_falling.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_falling.q @[Gpio.scala 28:10]
    reg2hw.intr_ctrl_en_rising.q <= gpioRegTop.io.reg2hw.intr_ctrl_en_rising.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.mask.q <= gpioRegTop.io.reg2hw.masked_oe_upper.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.data.qe <= gpioRegTop.io.reg2hw.masked_oe_upper.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_upper.data.q <= gpioRegTop.io.reg2hw.masked_oe_upper.data.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.mask.q <= gpioRegTop.io.reg2hw.masked_oe_lower.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.data.qe <= gpioRegTop.io.reg2hw.masked_oe_lower.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_oe_lower.data.q <= gpioRegTop.io.reg2hw.masked_oe_lower.data.q @[Gpio.scala 28:10]
    reg2hw.direct_oe.qe <= gpioRegTop.io.reg2hw.direct_oe.qe @[Gpio.scala 28:10]
    reg2hw.direct_oe.q <= gpioRegTop.io.reg2hw.direct_oe.q @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.mask.qe <= gpioRegTop.io.reg2hw.masked_out_upper.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.mask.q <= gpioRegTop.io.reg2hw.masked_out_upper.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.data.qe <= gpioRegTop.io.reg2hw.masked_out_upper.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_upper.data.q <= gpioRegTop.io.reg2hw.masked_out_upper.data.q @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.mask.qe <= gpioRegTop.io.reg2hw.masked_out_lower.mask.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.mask.q <= gpioRegTop.io.reg2hw.masked_out_lower.mask.q @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.data.qe <= gpioRegTop.io.reg2hw.masked_out_lower.data.qe @[Gpio.scala 28:10]
    reg2hw.masked_out_lower.data.q <= gpioRegTop.io.reg2hw.masked_out_lower.data.q @[Gpio.scala 28:10]
    reg2hw.direct_out.qe <= gpioRegTop.io.reg2hw.direct_out.qe @[Gpio.scala 28:10]
    reg2hw.direct_out.q <= gpioRegTop.io.reg2hw.direct_out.q @[Gpio.scala 28:10]
    reg2hw.intr_test.qe <= gpioRegTop.io.reg2hw.intr_test.qe @[Gpio.scala 28:10]
    reg2hw.intr_test.q <= gpioRegTop.io.reg2hw.intr_test.q @[Gpio.scala 28:10]
    reg2hw.intr_enable.q <= gpioRegTop.io.reg2hw.intr_enable.q @[Gpio.scala 28:10]
    reg2hw.intr_state.q <= gpioRegTop.io.reg2hw.intr_state.q @[Gpio.scala 28:10]
    gpioRegTop.io.hw2reg.masked_oe_upper.mask.d <= hw2reg.masked_oe_upper.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_upper.data.d <= hw2reg.masked_oe_upper.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_lower.mask.d <= hw2reg.masked_oe_lower.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_oe_lower.data.d <= hw2reg.masked_oe_lower.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.direct_oe.d <= hw2reg.direct_oe.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_upper.mask.d <= hw2reg.masked_out_upper.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_upper.data.d <= hw2reg.masked_out_upper.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_lower.mask.d <= hw2reg.masked_out_lower.mask.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.masked_out_lower.data.d <= hw2reg.masked_out_lower.data.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.direct_out.d <= hw2reg.direct_out.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.data_in.de <= hw2reg.data_in.de @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.data_in.d <= hw2reg.data_in.d @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.intr_state.de <= hw2reg.intr_state.de @[Gpio.scala 29:10]
    gpioRegTop.io.hw2reg.intr_state.d <= hw2reg.intr_state.d @[Gpio.scala 29:10]
    reg cio_gpio_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 31:27]
    reg cio_gpio_en_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 32:30]
    reg data_in_q : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Gpio.scala 33:26]
    wire data_in_d : UInt<32> @[Gpio.scala 35:23]
    data_in_d <= io.cio_gpio_i @[Gpio.scala 36:13]
    data_in_q <= data_in_d @[Gpio.scala 37:13]
    hw2reg.data_in.de <= UInt<1>("h01") @[Gpio.scala 40:21]
    hw2reg.data_in.d <= data_in_d @[Gpio.scala 41:20]
    io.cio_gpio_o <= cio_gpio_q @[Gpio.scala 44:17]
    io.cio_gpio_en_o <= cio_gpio_en_q @[Gpio.scala 45:20]
    hw2reg.direct_out.d <= cio_gpio_q @[Gpio.scala 47:23]
    node _hw2reg_masked_out_upper_data_d_T = bits(cio_gpio_q, 31, 16) @[Gpio.scala 48:47]
    hw2reg.masked_out_upper.data.d <= _hw2reg_masked_out_upper_data_d_T @[Gpio.scala 48:34]
    hw2reg.masked_out_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 49:34]
    node _hw2reg_masked_out_lower_data_d_T = bits(cio_gpio_q, 15, 0) @[Gpio.scala 50:47]
    hw2reg.masked_out_lower.data.d <= _hw2reg_masked_out_lower_data_d_T @[Gpio.scala 50:34]
    hw2reg.masked_out_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 51:34]
    when reg2hw.direct_out.qe : @[Gpio.scala 53:30]
      cio_gpio_q <= reg2hw.direct_out.q @[Gpio.scala 54:16]
      skip @[Gpio.scala 53:30]
    else : @[Gpio.scala 55:48]
      when reg2hw.masked_out_upper.data.qe : @[Gpio.scala 55:48]
        node _cio_gpio_q_T = and(reg2hw.masked_out_upper.data.q, reg2hw.masked_out_upper.mask.q) @[Gpio.scala 57:39]
        node _cio_gpio_q_T_1 = not(reg2hw.masked_out_upper.mask.q) @[Gpio.scala 58:10]
        node _cio_gpio_q_T_2 = bits(cio_gpio_q, 31, 16) @[Gpio.scala 58:54]
        node _cio_gpio_q_T_3 = and(_cio_gpio_q_T_1, _cio_gpio_q_T_2) @[Gpio.scala 58:42]
        node cio_gpio_q_hi = or(_cio_gpio_q_T, _cio_gpio_q_T_3) @[Gpio.scala 57:73]
        node _cio_gpio_q_T_4 = cat(cio_gpio_q_hi, UInt<16>("h00")) @[Cat.scala 30:58]
        cio_gpio_q <= _cio_gpio_q_T_4 @[Gpio.scala 56:16]
        skip @[Gpio.scala 55:48]
      else : @[Gpio.scala 66:48]
        when reg2hw.masked_out_lower.data.qe : @[Gpio.scala 66:48]
          node _cio_gpio_q_T_5 = and(reg2hw.masked_out_lower.data.q, reg2hw.masked_out_lower.mask.q) @[Gpio.scala 67:66]
          node _cio_gpio_q_T_6 = not(reg2hw.masked_out_lower.mask.q) @[Gpio.scala 68:8]
          node _cio_gpio_q_T_7 = bits(cio_gpio_q, 15, 0) @[Gpio.scala 68:52]
          node _cio_gpio_q_T_8 = and(_cio_gpio_q_T_6, _cio_gpio_q_T_7) @[Gpio.scala 68:40]
          node cio_gpio_q_lo = or(_cio_gpio_q_T_5, _cio_gpio_q_T_8) @[Gpio.scala 67:100]
          node _cio_gpio_q_T_9 = cat(UInt<16>("h00"), cio_gpio_q_lo) @[Cat.scala 30:58]
          cio_gpio_q <= _cio_gpio_q_T_9 @[Gpio.scala 67:16]
          skip @[Gpio.scala 66:48]
    hw2reg.direct_oe.d <= cio_gpio_en_q @[Gpio.scala 72:22]
    node _hw2reg_masked_oe_upper_data_d_T = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 73:49]
    hw2reg.masked_oe_upper.data.d <= _hw2reg_masked_oe_upper_data_d_T @[Gpio.scala 73:33]
    hw2reg.masked_oe_upper.mask.d <= UInt<16>("h00") @[Gpio.scala 74:33]
    node _hw2reg_masked_oe_lower_data_d_T = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 75:49]
    hw2reg.masked_oe_lower.data.d <= _hw2reg_masked_oe_lower_data_d_T @[Gpio.scala 75:33]
    hw2reg.masked_oe_lower.mask.d <= UInt<16>("h00") @[Gpio.scala 76:33]
    when reg2hw.direct_oe.qe : @[Gpio.scala 78:29]
      cio_gpio_en_q <= reg2hw.direct_oe.q @[Gpio.scala 79:19]
      skip @[Gpio.scala 78:29]
    else : @[Gpio.scala 80:47]
      when reg2hw.masked_oe_upper.data.qe : @[Gpio.scala 80:47]
        node _cio_gpio_en_q_T = and(reg2hw.masked_oe_upper.data.q, reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 81:57]
        node _cio_gpio_en_q_T_1 = not(reg2hw.masked_oe_upper.mask.q) @[Gpio.scala 82:8]
        node _cio_gpio_en_q_T_2 = bits(cio_gpio_en_q, 31, 16) @[Gpio.scala 82:54]
        node _cio_gpio_en_q_T_3 = and(_cio_gpio_en_q_T_1, _cio_gpio_en_q_T_2) @[Gpio.scala 82:39]
        node cio_gpio_en_q_hi = or(_cio_gpio_en_q_T, _cio_gpio_en_q_T_3) @[Gpio.scala 81:90]
        node _cio_gpio_en_q_T_4 = cat(cio_gpio_en_q_hi, UInt<16>("h00")) @[Cat.scala 30:58]
        cio_gpio_en_q <= _cio_gpio_en_q_T_4 @[Gpio.scala 81:19]
        skip @[Gpio.scala 80:47]
      else : @[Gpio.scala 83:47]
        when reg2hw.masked_oe_lower.data.qe : @[Gpio.scala 83:47]
          node _cio_gpio_en_q_T_5 = and(reg2hw.masked_oe_lower.data.q, reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 84:68]
          node _cio_gpio_en_q_T_6 = not(reg2hw.masked_oe_lower.mask.q) @[Gpio.scala 85:8]
          node _cio_gpio_en_q_T_7 = bits(cio_gpio_en_q, 15, 0) @[Gpio.scala 85:54]
          node _cio_gpio_en_q_T_8 = and(_cio_gpio_en_q_T_6, _cio_gpio_en_q_T_7) @[Gpio.scala 85:39]
          node cio_gpio_en_q_lo = or(_cio_gpio_en_q_T_5, _cio_gpio_en_q_T_8) @[Gpio.scala 84:101]
          node _cio_gpio_en_q_T_9 = cat(UInt<16>("h00"), cio_gpio_en_q_lo) @[Cat.scala 30:58]
          cio_gpio_en_q <= _cio_gpio_en_q_T_9 @[Gpio.scala 84:19]
          skip @[Gpio.scala 83:47]
    wire event_intr_rise : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_fall : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_actlow : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_acthigh : UInt<32> @[Gpio.scala 88:85]
    wire event_intr_combined : UInt<32> @[Gpio.scala 89:33]
    node _event_intr_rise_T = not(data_in_q) @[Gpio.scala 95:23]
    node _event_intr_rise_T_1 = and(_event_intr_rise_T, data_in_d) @[Gpio.scala 95:34]
    node _event_intr_rise_T_2 = and(_event_intr_rise_T_1, reg2hw.intr_ctrl_en_rising.q) @[Gpio.scala 95:47]
    event_intr_rise <= _event_intr_rise_T_2 @[Gpio.scala 95:19]
    node _event_intr_fall_T = not(data_in_d) @[Gpio.scala 99:35]
    node _event_intr_fall_T_1 = and(data_in_q, _event_intr_fall_T) @[Gpio.scala 99:33]
    node _event_intr_fall_T_2 = and(_event_intr_fall_T_1, reg2hw.intr_ctrl_en_falling.q) @[Gpio.scala 99:47]
    event_intr_fall <= _event_intr_fall_T_2 @[Gpio.scala 99:19]
    node _event_intr_acthigh_T = and(data_in_d, reg2hw.intr_ctrl_en_lvlHigh.q) @[Gpio.scala 105:35]
    event_intr_acthigh <= _event_intr_acthigh_T @[Gpio.scala 105:22]
    node _event_intr_actlow_T = not(data_in_d) @[Gpio.scala 111:24]
    node _event_intr_actlow_T_1 = and(_event_intr_actlow_T, reg2hw.intr_ctrl_en_lvlLow.q) @[Gpio.scala 111:35]
    event_intr_actlow <= _event_intr_actlow_T_1 @[Gpio.scala 111:21]
    node _event_intr_combined_T = or(event_intr_rise, event_intr_fall) @[Gpio.scala 113:42]
    node _event_intr_combined_T_1 = or(_event_intr_combined_T, event_intr_acthigh) @[Gpio.scala 113:60]
    node _event_intr_combined_T_2 = or(_event_intr_combined_T_1, event_intr_actlow) @[Gpio.scala 113:81]
    event_intr_combined <= _event_intr_combined_T_2 @[Gpio.scala 113:23]
    inst intr_hw of IntrHardware @[Gpio.scala 115:23]
    intr_hw.clock <= clock
    intr_hw.reset <= reset
    intr_hw.io.event_intr_i <= event_intr_combined @[Gpio.scala 116:27]
    intr_hw.io.reg2hw_intr_enable_q_i <= reg2hw.intr_enable.q @[Gpio.scala 117:37]
    intr_hw.io.reg2hw_intr_test_q_i <= reg2hw.intr_test.q @[Gpio.scala 118:35]
    intr_hw.io.reg2hw_intr_test_qe_i <= reg2hw.intr_test.qe @[Gpio.scala 119:36]
    intr_hw.io.reg2hw_intr_state_q_i <= reg2hw.intr_state.q @[Gpio.scala 120:36]
    hw2reg.intr_state.de <= intr_hw.io.hw2reg_intr_state_de_o @[Gpio.scala 121:24]
    hw2reg.intr_state.d <= intr_hw.io.hw2reg_intr_state_d_o @[Gpio.scala 122:23]
    io.intr_gpio_o <= intr_hw.io.intr_o @[Gpio.scala 123:18]
    
  module WishboneDevice_2 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module Protocol : 
    input clock : Clock
    input reset : Reset
    output io : {flip miso : UInt<1>, mosi : UInt<1>, ss : UInt<1>, sck : UInt<1>, flip data_in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, data_out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip CPOL : UInt<1>, flip CPHA : UInt<1>}
    
    wire CPOL : UInt<1>
    CPOL <= io.CPOL
    wire CPHA : UInt<1>
    CPHA <= io.CPHA
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Protocol.scala 28:24]
    reg miso_dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Protocol.scala 30:31]
    reg count : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 31:24]
    reg dataReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Protocol.scala 32:26]
    node _clk_T = asUInt(clock) @[Protocol.scala 34:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[Protocol.scala 34:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _io_sck_T = eq(state, UInt<1>("h01")) @[Protocol.scala 35:25]
    node _io_sck_T_1 = not(clk) @[Protocol.scala 35:44]
    node _io_sck_T_2 = mux(CPOL, _io_sck_T_1, clk) @[Protocol.scala 35:38]
    node _io_sck_T_3 = mux(_io_sck_T, _io_sck_T_2, UInt<1>("h00")) @[Protocol.scala 35:18]
    io.sck <= _io_sck_T_3 @[Protocol.scala 35:12]
    io.data_in.ready <= UInt<1>("h00") @[Protocol.scala 39:22]
    io.data_out.valid <= UInt<1>("h00") @[Protocol.scala 40:23]
    io.data_out.bits <= UInt<1>("h00") @[Protocol.scala 41:22]
    io.ss <= UInt<1>("h01") @[Protocol.scala 42:11]
    io.mosi <= UInt<1>("h00") @[Protocol.scala 43:13]
    node _T = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 48:30]
      when io.data_in.valid : @[Protocol.scala 49:59]
        node dataReg_lo = mux(UInt<1>("h00"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
        node _dataReg_T = cat(io.data_in.bits, dataReg_lo) @[Cat.scala 30:58]
        dataReg <= _dataReg_T @[Protocol.scala 50:25]
        state <= UInt<1>("h01") @[Protocol.scala 51:23]
        skip @[Protocol.scala 49:59]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(count, UInt<7>("h040")) @[Protocol.scala 60:25]
        when _T_2 : @[Protocol.scala 60:38]
          io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 61:34]
          io.ss <= UInt<1>("h01") @[Protocol.scala 62:23]
          state <= UInt<1>("h00") @[Protocol.scala 63:23]
          count <= UInt<1>("h00") @[Protocol.scala 64:23]
          skip @[Protocol.scala 60:38]
        else : @[Protocol.scala 65:24]
          io.ss <= UInt<1>("h00") @[Protocol.scala 66:23]
          node _io_mosi_T = bits(dataReg, 63, 63) @[Protocol.scala 67:35]
          io.mosi <= _io_mosi_T @[Protocol.scala 67:25]
          node _dataReg_T_1 = shl(dataReg, 1) @[Protocol.scala 68:36]
          dataReg <= _dataReg_T_1 @[Protocol.scala 68:25]
          node _count_T = add(count, UInt<1>("h01")) @[Protocol.scala 69:32]
          node _count_T_1 = tail(_count_T, 1) @[Protocol.scala 69:32]
          count <= _count_T_1 @[Protocol.scala 69:23]
          skip @[Protocol.scala 65:24]
        skip @[Conditional.scala 39:67]
    reg count1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 75:25]
    node _T_3 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      io.ss <= UInt<1>("h00") @[Protocol.scala 78:19]
      node _T_4 = eq(count1, UInt<7>("h040")) @[Protocol.scala 79:26]
      when _T_4 : @[Protocol.scala 79:63]
        io.data_out.bits <= miso_dataReg @[Protocol.scala 80:34]
        io.data_out.valid <= UInt<1>("h01") @[Protocol.scala 81:35]
        count1 <= UInt<1>("h00") @[Protocol.scala 82:24]
        skip @[Protocol.scala 79:63]
      else : @[Protocol.scala 83:24]
        node _miso_dataReg_T = shl(miso_dataReg, 1) @[Protocol.scala 84:46]
        node _miso_dataReg_T_1 = or(_miso_dataReg_T, io.miso) @[Protocol.scala 84:51]
        miso_dataReg <= _miso_dataReg_T_1 @[Protocol.scala 84:30]
        node _count1_T = add(count1, UInt<1>("h01")) @[Protocol.scala 85:34]
        node _count1_T_1 = tail(_count1_T, 1) @[Protocol.scala 85:34]
        count1 <= _count1_T_1 @[Protocol.scala 85:24]
        skip @[Protocol.scala 83:24]
      skip @[Conditional.scala 40:58]
    
  module Spi : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cs_n : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}
    
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h060"))) @[Spi.scala 28:29]
    reg TxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Spi.scala 29:31]
    reg TxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Spi.scala 30:33]
    reg RxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Spi.scala 31:31]
    reg RxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Spi.scala 32:33]
    wire maskedData : UInt<8>[4] @[Spi.scala 34:26]
    wire _WIRE : UInt<1>[4] @[Spi.scala 35:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[Spi.scala 35:54]
    _WIRE[0] <= _T @[Spi.scala 35:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[Spi.scala 35:54]
    _WIRE[1] <= _T_1 @[Spi.scala 35:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[Spi.scala 35:54]
    _WIRE[2] <= _T_2 @[Spi.scala 35:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[Spi.scala 35:54]
    _WIRE[3] <= _T_3 @[Spi.scala 35:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[Spi.scala 35:16]
    maskedData[1] <= _T_7 @[Spi.scala 35:16]
    maskedData[2] <= _T_9 @[Spi.scala 35:16]
    maskedData[3] <= _T_11 @[Spi.scala 35:16]
    io.req.ready <= UInt<1>("h01") @[Spi.scala 37:18]
    io.rsp.valid <= UInt<1>("h00") @[Spi.scala 38:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 41:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Spi.scala 41:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Spi.scala 41:71]
    node _T_15 = and(_T_13, _T_14) @[Spi.scala 41:48]
    when _T_15 : @[Spi.scala 41:79]
      node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[Spi.scala 42:78]
      node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[Spi.scala 42:78]
      node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[Spi.scala 42:78]
      node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[Spi.scala 42:65]
      node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[Spi.scala 42:26]
      ControlReg <= _ControlReg_T_2 @[Spi.scala 42:20]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Spi.scala 44:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[Spi.scala 44:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[Spi.scala 44:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[Spi.scala 44:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[Spi.scala 45:32]
      io_rsp_valid_REG <= io.req.valid @[Spi.scala 45:32]
      io.rsp.valid <= io_rsp_valid_REG @[Spi.scala 45:22]
      skip @[Spi.scala 41:79]
    else : @[Spi.scala 51:83]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 51:38]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[Spi.scala 51:44]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Spi.scala 51:75]
      node _T_19 = and(_T_17, _T_18) @[Spi.scala 51:52]
      when _T_19 : @[Spi.scala 51:83]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[Spi.scala 52:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[Spi.scala 52:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[Spi.scala 52:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[Spi.scala 52:34]
        node _io_rsp_valid_T = mux(io.req.valid, UInt<1>("h01"), UInt<1>("h00")) @[Spi.scala 53:36]
        reg io_rsp_valid_REG_1 : UInt, clock @[Spi.scala 53:32]
        io_rsp_valid_REG_1 <= _io_rsp_valid_T @[Spi.scala 53:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[Spi.scala 53:22]
        skip @[Spi.scala 51:83]
      else : @[Spi.scala 59:83]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 59:38]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[Spi.scala 59:44]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Spi.scala 59:75]
        node _T_23 = and(_T_21, _T_22) @[Spi.scala 59:52]
        when _T_23 : @[Spi.scala 59:83]
          node TxDataReg_lo = cat(maskedData[1], maskedData[0]) @[Spi.scala 80:77]
          node TxDataReg_hi = cat(maskedData[3], maskedData[2]) @[Spi.scala 80:77]
          node _TxDataReg_T = cat(TxDataReg_hi, TxDataReg_lo) @[Spi.scala 80:77]
          node _TxDataReg_T_1 = and(io.req.bits.dataRequest, _TxDataReg_T) @[Spi.scala 80:64]
          node _TxDataReg_T_2 = mux(io.req.valid, _TxDataReg_T_1, UInt<1>("h00")) @[Spi.scala 80:25]
          TxDataReg <= _TxDataReg_T_2 @[Spi.scala 80:19]
          TxDataValidReg <= io.req.valid @[Spi.scala 81:24]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, io.req.bits.addrRequest, UInt<1>("h00")) @[Spi.scala 83:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[Spi.scala 83:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[Spi.scala 83:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[Spi.scala 83:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[Spi.scala 84:32]
          io_rsp_valid_REG_2 <= UInt<1>("h01") @[Spi.scala 84:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[Spi.scala 84:22]
          skip @[Spi.scala 59:83]
        else : @[Spi.scala 89:83]
          node _T_24 = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 89:38]
          node _T_25 = eq(_T_24, UInt<3>("h04")) @[Spi.scala 89:44]
          node _T_26 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Spi.scala 89:75]
          node _T_27 = and(_T_25, _T_26) @[Spi.scala 89:52]
          when _T_27 : @[Spi.scala 89:83]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, TxDataReg, UInt<1>("h00")) @[Spi.scala 90:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[Spi.scala 90:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[Spi.scala 90:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[Spi.scala 90:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[Spi.scala 91:32]
            io_rsp_valid_REG_3 <= io.req.valid @[Spi.scala 91:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[Spi.scala 91:22]
            skip @[Spi.scala 89:83]
          else : @[Spi.scala 96:83]
            node _T_28 = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 96:38]
            node _T_29 = eq(_T_28, UInt<4>("h08")) @[Spi.scala 96:44]
            node _T_30 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Spi.scala 96:75]
            node _T_31 = and(_T_29, _T_30) @[Spi.scala 96:52]
            when _T_31 : @[Spi.scala 96:83]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, RxDataReg, UInt<1>("h00")) @[Spi.scala 97:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[Spi.scala 97:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[Spi.scala 97:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[Spi.scala 97:34]
              io.rsp.valid <= RxDataValidReg @[Spi.scala 98:22]
              skip @[Spi.scala 96:83]
            else : @[Spi.scala 104:15]
              io.cs_n is invalid @[Spi.scala 107:62]
              io.sclk is invalid @[Spi.scala 107:62]
              io.mosi is invalid @[Spi.scala 107:62]
              io.rsp.valid is invalid @[Spi.scala 107:62]
              reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[Spi.scala 108:44]
              io_rsp_bits_dataResponse_REG_5 <= io.req.bits.addrRequest @[Spi.scala 108:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[Spi.scala 108:34]
              skip @[Spi.scala 104:15]
    inst spiProtocol of Protocol @[Spi.scala 127:29]
    spiProtocol.clock <= clock
    spiProtocol.reset <= reset
    node _spiProtocol_clock_T = bits(ControlReg, 31, 5) @[Spi.scala 129:45]
    node _spiProtocol_clock_T_1 = shr(_spiProtocol_clock_T, 1) @[Spi.scala 123:54]
    node _spiProtocol_clock_T_2 = sub(_spiProtocol_clock_T_1, UInt<1>("h01")) @[Spi.scala 117:36]
    node _spiProtocol_clock_T_3 = tail(_spiProtocol_clock_T_2, 1) @[Spi.scala 117:36]
    reg spiProtocol_clock_x : UInt<26>, clock with : (reset => (reset, UInt<26>("h00"))) @[Spi.scala 113:24]
    node _spiProtocol_clock_x_T = eq(spiProtocol_clock_x, _spiProtocol_clock_T_3) @[Spi.scala 114:20]
    node _spiProtocol_clock_x_T_1 = add(spiProtocol_clock_x, UInt<1>("h01")) @[Spi.scala 114:36]
    node _spiProtocol_clock_x_T_2 = tail(_spiProtocol_clock_x_T_1, 1) @[Spi.scala 114:36]
    node _spiProtocol_clock_x_T_3 = mux(_spiProtocol_clock_x_T, UInt<1>("h00"), _spiProtocol_clock_x_T_2) @[Spi.scala 114:17]
    spiProtocol_clock_x <= _spiProtocol_clock_x_T_3 @[Spi.scala 114:11]
    node _spiProtocol_clock_T_4 = eq(spiProtocol_clock_x, UInt<1>("h00")) @[Spi.scala 117:43]
    reg spiProtocol_clock_x_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Spi.scala 119:24]
    node _spiProtocol_clock_x_T_4 = eq(spiProtocol_clock_x_1, UInt<1>("h00")) @[Spi.scala 120:21]
    node _spiProtocol_clock_x_T_5 = mux(_spiProtocol_clock_T_4, _spiProtocol_clock_x_T_4, spiProtocol_clock_x_1) @[Spi.scala 120:17]
    spiProtocol_clock_x_1 <= _spiProtocol_clock_x_T_5 @[Spi.scala 120:11]
    node _spiProtocol_clock_T_5 = asClock(spiProtocol_clock_x_1) @[Spi.scala 129:53]
    spiProtocol.clock <= _spiProtocol_clock_T_5 @[Spi.scala 129:23]
    spiProtocol.io.data_in.bits <= TxDataReg @[Spi.scala 130:34]
    spiProtocol.io.data_in.valid <= TxDataValidReg @[Spi.scala 131:34]
    node _spiProtocol_io_CPOL_T = bits(ControlReg, 1, 1) @[Spi.scala 132:38]
    spiProtocol.io.CPOL <= _spiProtocol_io_CPOL_T @[Spi.scala 132:25]
    node _spiProtocol_io_CPHA_T = bits(ControlReg, 0, 0) @[Spi.scala 133:38]
    spiProtocol.io.CPHA <= _spiProtocol_io_CPHA_T @[Spi.scala 133:25]
    spiProtocol.io.miso <= io.miso @[Spi.scala 134:25]
    spiProtocol.io.data_out.ready <= UInt<1>("h01") @[Spi.scala 135:35]
    io.mosi <= spiProtocol.io.mosi @[Spi.scala 136:121]
    io.sclk <= spiProtocol.io.sck @[Spi.scala 136:121]
    io.cs_n <= spiProtocol.io.ss @[Spi.scala 136:121]
    when spiProtocol.io.data_out.valid : @[Spi.scala 137:40]
      RxDataReg <= spiProtocol.io.data_out.bits @[Spi.scala 138:19]
      RxDataValidReg <= UInt<1>("h01") @[Spi.scala 139:24]
      skip @[Spi.scala 137:40]
    wire addr_hit : UInt<1>[3] @[Spi.scala 144:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[Spi.scala 146:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[Spi.scala 147:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[Spi.scala 153:39]
    addr_hit[0] <= _addr_hit_0_T @[Spi.scala 153:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[Spi.scala 153:39]
    addr_hit[1] <= _addr_hit_1_T @[Spi.scala 153:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[Spi.scala 153:39]
    addr_hit[2] <= _addr_hit_2_T @[Spi.scala 153:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[Spi.scala 161:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[Spi.scala 161:37]
    node _addr_miss_T_2 = not(_addr_miss_T_1) @[Spi.scala 161:18]
    addr_miss <= _addr_miss_T_2 @[Spi.scala 161:15]
    node _T_32 = eq(wireAddr, UInt<4>("h08")) @[Spi.scala 162:19]
    node _T_33 = and(_T_32, io.req.bits.isWrite) @[Spi.scala 162:27]
    when _T_33 : @[Spi.scala 162:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[Spi.scala 162:78]
      io_rsp_bits_error_REG <= io.req.valid @[Spi.scala 162:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[Spi.scala 162:68]
      skip @[Spi.scala 162:49]
    else : @[Spi.scala 163:15]
      node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[Spi.scala 163:58]
      reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[Spi.scala 163:44]
      io_rsp_bits_error_REG_1 <= _io_rsp_bits_error_T @[Spi.scala 163:44]
      io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[Spi.scala 163:34]
      skip @[Spi.scala 163:15]
    
  module WishboneDevice_3 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module uartTX : 
    input clock : Clock
    input reset : Reset
    output io : {flip tx_en : UInt<1>, flip i_TX_Byte : UInt<8>, flip CLKS_PER_BIT : UInt<16>, o_TX_Serial : UInt<1>, o_TX_Done : UInt<1>}
    
    reg r_SM_Main : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartTX.scala 23:28]
    reg r_Clock_Count : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[uartTX.scala 24:32]
    reg r_Bit_Index : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartTX.scala 25:30]
    reg r_TX_Data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uartTX.scala 26:28]
    reg r_TX_Done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uartTX.scala 27:28]
    io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 32:20]
    node _T = eq(UInt<3>("h00"), r_SM_Main) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 35:28]
      r_TX_Done <= UInt<1>("h00") @[uartTX.scala 36:23]
      r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 37:27]
      r_Bit_Index <= UInt<1>("h00") @[uartTX.scala 38:25]
      node _T_1 = eq(io.tx_en, UInt<1>("h01")) @[uartTX.scala 40:27]
      when _T_1 : @[uartTX.scala 40:35]
        r_TX_Data <= io.i_TX_Byte @[uartTX.scala 41:27]
        r_SM_Main <= UInt<3>("h01") @[uartTX.scala 42:27]
        skip @[uartTX.scala 40:35]
      else : @[uartTX.scala 43:24]
        r_SM_Main <= UInt<3>("h00") @[uartTX.scala 44:27]
        skip @[uartTX.scala 43:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<3>("h01"), r_SM_Main) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        io.o_TX_Serial <= UInt<1>("h00") @[uartTX.scala 49:28]
        node _T_3 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 51:49]
        node _T_4 = tail(_T_3, 1) @[uartTX.scala 51:49]
        node _T_5 = lt(r_Clock_Count, _T_4) @[uartTX.scala 51:32]
        when _T_5 : @[uartTX.scala 51:54]
          node _r_Clock_Count_T = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 52:48]
          node _r_Clock_Count_T_1 = tail(_r_Clock_Count_T, 1) @[uartTX.scala 52:48]
          r_Clock_Count <= _r_Clock_Count_T_1 @[uartTX.scala 52:31]
          r_SM_Main <= UInt<3>("h01") @[uartTX.scala 53:27]
          skip @[uartTX.scala 51:54]
        else : @[uartTX.scala 54:24]
          r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 55:31]
          r_SM_Main <= UInt<3>("h02") @[uartTX.scala 56:27]
          skip @[uartTX.scala 54:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<3>("h02"), r_SM_Main) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _io_o_TX_Serial_T = dshr(r_TX_Data, r_Bit_Index) @[uartTX.scala 61:40]
          node _io_o_TX_Serial_T_1 = bits(_io_o_TX_Serial_T, 0, 0) @[uartTX.scala 61:40]
          io.o_TX_Serial <= _io_o_TX_Serial_T_1 @[uartTX.scala 61:28]
          node _T_7 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 63:50]
          node _T_8 = tail(_T_7, 1) @[uartTX.scala 63:50]
          node _T_9 = lt(r_Clock_Count, _T_8) @[uartTX.scala 63:32]
          when _T_9 : @[uartTX.scala 63:56]
            node _r_Clock_Count_T_2 = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 64:48]
            node _r_Clock_Count_T_3 = tail(_r_Clock_Count_T_2, 1) @[uartTX.scala 64:48]
            r_Clock_Count <= _r_Clock_Count_T_3 @[uartTX.scala 64:31]
            r_SM_Main <= UInt<3>("h02") @[uartTX.scala 65:27]
            skip @[uartTX.scala 63:56]
          else : @[uartTX.scala 66:24]
            r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 67:31]
            node _T_10 = lt(r_Bit_Index, UInt<3>("h07")) @[uartTX.scala 68:34]
            when _T_10 : @[uartTX.scala 68:40]
              node _r_Bit_Index_T = add(r_Bit_Index, UInt<1>("h01")) @[uartTX.scala 69:48]
              node _r_Bit_Index_T_1 = tail(_r_Bit_Index_T, 1) @[uartTX.scala 69:48]
              r_Bit_Index <= _r_Bit_Index_T_1 @[uartTX.scala 69:33]
              r_SM_Main <= UInt<3>("h02") @[uartTX.scala 70:31]
              skip @[uartTX.scala 68:40]
            else : @[uartTX.scala 71:28]
              r_Bit_Index <= UInt<1>("h00") @[uartTX.scala 72:33]
              r_SM_Main <= UInt<3>("h03") @[uartTX.scala 73:31]
              skip @[uartTX.scala 71:28]
            skip @[uartTX.scala 66:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<3>("h03"), r_SM_Main) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 81:28]
            node _T_12 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 83:50]
            node _T_13 = tail(_T_12, 1) @[uartTX.scala 83:50]
            node _T_14 = lt(r_Clock_Count, _T_13) @[uartTX.scala 83:32]
            when _T_14 : @[uartTX.scala 83:56]
              node _r_Clock_Count_T_4 = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 84:48]
              node _r_Clock_Count_T_5 = tail(_r_Clock_Count_T_4, 1) @[uartTX.scala 84:48]
              r_Clock_Count <= _r_Clock_Count_T_5 @[uartTX.scala 84:31]
              r_SM_Main <= UInt<3>("h03") @[uartTX.scala 85:27]
              skip @[uartTX.scala 83:56]
            else : @[uartTX.scala 86:24]
              r_TX_Done <= UInt<1>("h01") @[uartTX.scala 87:27]
              r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 88:31]
              r_SM_Main <= UInt<3>("h04") @[uartTX.scala 89:27]
              skip @[uartTX.scala 86:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h04"), r_SM_Main) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 95:28]
              r_TX_Done <= UInt<1>("h01") @[uartTX.scala 96:23]
              r_SM_Main <= UInt<3>("h00") @[uartTX.scala 97:23]
              skip @[Conditional.scala 39:67]
    io.o_TX_Done <= r_TX_Done @[uartTX.scala 103:18]
    
  module uartRX : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_Rx_Serial : UInt<1>, flip CLKS_PER_BIT : UInt<16>, o_Rx_DV : UInt<1>, o_Rx_Byte : UInt<8>}
    
    reg rxReg_REG : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uartRX.scala 18:32]
    rxReg_REG <= io.i_Rx_Serial @[uartRX.scala 18:32]
    reg rxReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uartRX.scala 18:24]
    rxReg <= rxReg_REG @[uartRX.scala 18:24]
    reg shiftReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uartRX.scala 19:27]
    reg r_SM_Main : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartRX.scala 21:28]
    reg r_Clock_Count : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[uartRX.scala 22:32]
    reg r_Bit_Index : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartRX.scala 23:30]
    reg r_Rx_DV : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uartRX.scala 24:26]
    node _T = eq(UInt<3>("h00"), r_SM_Main) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      r_Rx_DV <= UInt<1>("h00") @[uartRX.scala 28:21]
      r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 29:27]
      r_Bit_Index <= UInt<1>("h00") @[uartRX.scala 30:25]
      node _T_1 = eq(io.i_Rx_Serial, UInt<1>("h00")) @[uartRX.scala 33:33]
      when _T_1 : @[uartRX.scala 33:41]
        r_SM_Main <= UInt<3>("h01") @[uartRX.scala 34:27]
        skip @[uartRX.scala 33:41]
      else : @[uartRX.scala 35:24]
        r_SM_Main <= UInt<3>("h00") @[uartRX.scala 36:27]
        skip @[uartRX.scala 35:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<3>("h01"), r_SM_Main) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 41:52]
        node _T_4 = tail(_T_3, 1) @[uartRX.scala 41:52]
        node _T_5 = div(_T_4, UInt<2>("h02")) @[uartRX.scala 41:57]
        node _T_6 = eq(r_Clock_Count, _T_5) @[uartRX.scala 41:32]
        when _T_6 : @[uartRX.scala 41:62]
          node _T_7 = eq(io.i_Rx_Serial, UInt<1>("h00")) @[uartRX.scala 42:37]
          when _T_7 : @[uartRX.scala 42:45]
            r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 43:35]
            r_SM_Main <= UInt<3>("h02") @[uartRX.scala 44:31]
            skip @[uartRX.scala 42:45]
          else : @[uartRX.scala 45:28]
            r_SM_Main <= UInt<3>("h00") @[uartRX.scala 46:31]
            skip @[uartRX.scala 45:28]
          skip @[uartRX.scala 41:62]
        else : @[uartRX.scala 48:24]
          node _r_Clock_Count_T = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 49:48]
          node _r_Clock_Count_T_1 = tail(_r_Clock_Count_T, 1) @[uartRX.scala 49:48]
          r_Clock_Count <= _r_Clock_Count_T_1 @[uartRX.scala 49:31]
          r_SM_Main <= UInt<3>("h01") @[uartRX.scala 50:27]
          skip @[uartRX.scala 48:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<3>("h02"), r_SM_Main) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 55:50]
          node _T_10 = tail(_T_9, 1) @[uartRX.scala 55:50]
          node _T_11 = lt(r_Clock_Count, _T_10) @[uartRX.scala 55:32]
          when _T_11 : @[uartRX.scala 55:56]
            node _r_Clock_Count_T_2 = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 56:48]
            node _r_Clock_Count_T_3 = tail(_r_Clock_Count_T_2, 1) @[uartRX.scala 56:48]
            r_Clock_Count <= _r_Clock_Count_T_3 @[uartRX.scala 56:31]
            r_SM_Main <= UInt<3>("h02") @[uartRX.scala 57:27]
            skip @[uartRX.scala 55:56]
          else : @[uartRX.scala 58:24]
            r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 59:31]
            node shiftReg_lo = shr(shiftReg, 1) @[uartRX.scala 60:49]
            node _shiftReg_T = cat(rxReg, shiftReg_lo) @[Cat.scala 30:58]
            shiftReg <= _shiftReg_T @[uartRX.scala 60:26]
            node _T_12 = lt(r_Bit_Index, UInt<3>("h07")) @[uartRX.scala 62:34]
            when _T_12 : @[uartRX.scala 62:40]
              node _r_Bit_Index_T = add(r_Bit_Index, UInt<1>("h01")) @[uartRX.scala 63:48]
              node _r_Bit_Index_T_1 = tail(_r_Bit_Index_T, 1) @[uartRX.scala 63:48]
              r_Bit_Index <= _r_Bit_Index_T_1 @[uartRX.scala 63:33]
              r_SM_Main <= UInt<3>("h02") @[uartRX.scala 64:31]
              skip @[uartRX.scala 62:40]
            else : @[uartRX.scala 65:28]
              r_Bit_Index <= UInt<1>("h00") @[uartRX.scala 66:33]
              r_SM_Main <= UInt<3>("h03") @[uartRX.scala 67:31]
              skip @[uartRX.scala 65:28]
            skip @[uartRX.scala 58:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_13 = eq(UInt<3>("h03"), r_SM_Main) @[Conditional.scala 37:30]
          when _T_13 : @[Conditional.scala 39:67]
            node _T_14 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 74:50]
            node _T_15 = tail(_T_14, 1) @[uartRX.scala 74:50]
            node _T_16 = lt(r_Clock_Count, _T_15) @[uartRX.scala 74:32]
            when _T_16 : @[uartRX.scala 74:56]
              node _r_Clock_Count_T_4 = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 75:48]
              node _r_Clock_Count_T_5 = tail(_r_Clock_Count_T_4, 1) @[uartRX.scala 75:48]
              r_Clock_Count <= _r_Clock_Count_T_5 @[uartRX.scala 75:31]
              r_SM_Main <= UInt<3>("h03") @[uartRX.scala 76:27]
              skip @[uartRX.scala 74:56]
            else : @[uartRX.scala 77:24]
              r_Rx_DV <= UInt<1>("h01") @[uartRX.scala 78:25]
              r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 79:31]
              r_SM_Main <= UInt<3>("h04") @[uartRX.scala 80:27]
              skip @[uartRX.scala 77:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_17 = eq(UInt<3>("h04"), r_SM_Main) @[Conditional.scala 37:30]
            when _T_17 : @[Conditional.scala 39:67]
              r_SM_Main <= UInt<3>("h00") @[uartRX.scala 85:23]
              r_Rx_DV <= UInt<1>("h00") @[uartRX.scala 86:21]
              skip @[Conditional.scala 39:67]
    io.o_Rx_DV <= r_Rx_DV @[uartRX.scala 90:16]
    io.o_Rx_Byte <= shiftReg @[uartRX.scala 91:18]
    
  module UartTOP : 
    input clock : Clock
    input reset : Reset
    output io : {flip ren : UInt<1>, flip we : UInt<1>, flip wdata : UInt<32>, flip addr : UInt<8>, flip rx_i : UInt<1>, rdata : UInt<32>, tx_o : UInt<1>, intr_tx : UInt<1>}
    
    reg control : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[UartTOP.scala 29:26]
    reg tx : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 30:21]
    reg rx : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 31:21]
    reg rx_reg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 32:25]
    reg rx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 33:24]
    reg tx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 34:24]
    reg rx_status : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 35:28]
    reg rx_clr : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTOP.scala 36:25]
    reg rx_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 37:26]
    node _T = eq(io.ren, UInt<1>("h00")) @[UartTOP.scala 39:10]
    node _T_1 = and(_T, io.we) @[UartTOP.scala 39:20]
    when _T_1 : @[UartTOP.scala 39:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[UartTOP.scala 40:22]
      when _T_2 : @[UartTOP.scala 40:36]
        node _control_T = bits(io.wdata, 15, 0) @[UartTOP.scala 41:32]
        control <= _control_T @[UartTOP.scala 41:21]
        skip @[UartTOP.scala 40:36]
      else : @[UartTOP.scala 42:40]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[UartTOP.scala 42:28]
        when _T_3 : @[UartTOP.scala 42:40]
          node _tx_T = bits(io.wdata, 7, 0) @[UartTOP.scala 43:27]
          tx <= _tx_T @[UartTOP.scala 43:16]
          skip @[UartTOP.scala 42:40]
        else : @[UartTOP.scala 44:38]
          node _T_4 = eq(io.addr, UInt<4>("h0c")) @[UartTOP.scala 44:28]
          when _T_4 : @[UartTOP.scala 44:38]
            node _rx_en_T = bits(io.wdata, 0, 0) @[UartTOP.scala 45:30]
            rx_en <= _rx_en_T @[UartTOP.scala 45:19]
            skip @[UartTOP.scala 44:38]
          else : @[UartTOP.scala 46:38]
            node _T_5 = eq(io.addr, UInt<5>("h010")) @[UartTOP.scala 46:28]
            when _T_5 : @[UartTOP.scala 46:38]
              node _tx_en_T = bits(io.wdata, 0, 0) @[UartTOP.scala 47:30]
              tx_en <= _tx_en_T @[UartTOP.scala 47:19]
              skip @[UartTOP.scala 46:38]
            else : @[UartTOP.scala 48:38]
              node _T_6 = eq(io.addr, UInt<5>("h018")) @[UartTOP.scala 48:28]
              when _T_6 : @[UartTOP.scala 48:38]
                node _rx_clr_T = bits(io.wdata, 0, 0) @[UartTOP.scala 49:31]
                rx_clr <= _rx_clr_T @[UartTOP.scala 49:20]
                skip @[UartTOP.scala 48:38]
              else : @[UartTOP.scala 50:20]
                tx <= UInt<1>("h00") @[UartTOP.scala 52:16]
                rx_en <= UInt<1>("h00") @[UartTOP.scala 53:19]
                tx_en <= UInt<1>("h00") @[UartTOP.scala 54:19]
                rx_clr <= UInt<1>("h00") @[UartTOP.scala 55:20]
                skip @[UartTOP.scala 50:20]
      skip @[UartTOP.scala 39:29]
    inst uart_tx of uartTX @[UartTOP.scala 60:25]
    uart_tx.clock <= clock
    uart_tx.reset <= reset
    uart_tx.io.tx_en <= tx_en @[UartTOP.scala 61:22]
    uart_tx.io.i_TX_Byte <= tx @[UartTOP.scala 62:26]
    uart_tx.io.CLKS_PER_BIT <= control @[UartTOP.scala 63:29]
    io.tx_o <= uart_tx.io.o_TX_Serial @[UartTOP.scala 66:13]
    io.intr_tx <= uart_tx.io.o_TX_Done @[UartTOP.scala 67:16]
    inst uart_rx of uartRX @[UartTOP.scala 69:25]
    uart_rx.clock <= clock
    uart_rx.reset <= reset
    when rx_en : @[UartTOP.scala 70:16]
      uart_rx.io.i_Rx_Serial <= io.rx_i @[UartTOP.scala 71:32]
      skip @[UartTOP.scala 70:16]
    else : @[UartTOP.scala 72:16]
      uart_rx.io.i_Rx_Serial <= UInt<1>("h01") @[UartTOP.scala 73:32]
      skip @[UartTOP.scala 72:16]
    uart_rx.io.CLKS_PER_BIT <= control @[UartTOP.scala 75:29]
    rx_done <= uart_rx.io.o_Rx_DV @[UartTOP.scala 77:13]
    rx <= uart_rx.io.o_Rx_Byte @[UartTOP.scala 78:8]
    when rx_done : @[UartTOP.scala 81:18]
      rx_reg <= rx @[UartTOP.scala 82:16]
      rx_status <= UInt<1>("h01") @[UartTOP.scala 83:19]
      skip @[UartTOP.scala 81:18]
    else : @[UartTOP.scala 84:26]
      node _T_7 = eq(rx_clr, UInt<1>("h00")) @[UartTOP.scala 84:16]
      when _T_7 : @[UartTOP.scala 84:26]
        rx_status <= UInt<1>("h00") @[UartTOP.scala 85:19]
        skip @[UartTOP.scala 84:26]
    node _io_rdata_T = eq(io.addr, UInt<5>("h014")) @[UartTOP.scala 88:29]
    node _io_rdata_T_1 = eq(io.addr, UInt<4>("h08")) @[UartTOP.scala 88:64]
    node _io_rdata_T_2 = mux(_io_rdata_T_1, rx_reg, UInt<1>("h00")) @[UartTOP.scala 88:55]
    node _io_rdata_T_3 = mux(_io_rdata_T, rx_status, _io_rdata_T_2) @[UartTOP.scala 88:20]
    io.rdata <= _io_rdata_T_3 @[UartTOP.scala 88:14]
    
  module uart : 
    input clock : Clock
    input reset : Reset
    output io : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, response : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_uart_rx_i : UInt<1>, cio_uart_tx_o : UInt<1>, cio_uart_intr_tx_o : UInt<1>}
    
    io.request.ready <= UInt<1>("h01") @[uart.scala 19:22]
    inst uart_top of UartTOP @[uart.scala 57:27]
    uart_top.clock <= clock
    uart_top.reset <= reset
    wire write_register : UInt<1> @[uart.scala 60:46]
    wire read_register : UInt<1> @[uart.scala 60:46]
    wire data_reg : UInt<32> @[uart.scala 61:24]
    wire addr_reg : UInt<8> @[uart.scala 62:24]
    node _write_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _write_register_T_1 = mux(_write_register_T, io.request.bits.isWrite, UInt<1>("h00")) @[uart.scala 64:26]
    write_register <= _write_register_T_1 @[uart.scala 64:20]
    node _read_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _read_register_T_1 = eq(io.request.bits.isWrite, UInt<1>("h00")) @[uart.scala 65:45]
    node _read_register_T_2 = mux(_read_register_T, _read_register_T_1, UInt<1>("h00")) @[uart.scala 65:25]
    read_register <= _read_register_T_2 @[uart.scala 65:19]
    data_reg <= io.request.bits.dataRequest @[uart.scala 66:14]
    node _addr_reg_T = bits(io.request.bits.addrRequest, 7, 0) @[uart.scala 67:44]
    addr_reg <= _addr_reg_T @[uart.scala 67:14]
    uart_top.io.wdata <= data_reg @[uart.scala 68:23]
    uart_top.io.addr <= addr_reg @[uart.scala 69:22]
    uart_top.io.we <= write_register @[uart.scala 70:20]
    uart_top.io.ren <= read_register @[uart.scala 71:21]
    node _io_response_bits_dataResponse_T = mux(io.response.ready, uart_top.io.rdata, UInt<1>("h00")) @[uart.scala 73:49]
    reg io_response_bits_dataResponse_REG : UInt, clock @[uart.scala 73:45]
    io_response_bits_dataResponse_REG <= _io_response_bits_dataResponse_T @[uart.scala 73:45]
    io.response.bits.dataResponse <= io_response_bits_dataResponse_REG @[uart.scala 73:35]
    node _io_response_valid_T = or(write_register, read_register) @[uart.scala 74:53]
    node _io_response_valid_T_1 = mux(_io_response_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[uart.scala 74:37]
    reg io_response_valid_REG : UInt<1>, clock @[uart.scala 74:33]
    io_response_valid_REG <= _io_response_valid_T_1 @[uart.scala 74:33]
    io.response.valid <= io_response_valid_REG @[uart.scala 74:23]
    node _io_response_bits_error_T = mux(io.response.ready, uart_top.io.intr_tx, UInt<1>("h00")) @[uart.scala 75:42]
    reg io_response_bits_error_REG : UInt, clock @[uart.scala 75:38]
    io_response_bits_error_REG <= _io_response_bits_error_T @[uart.scala 75:38]
    io.response.bits.error <= io_response_bits_error_REG @[uart.scala 75:28]
    io.cio_uart_intr_tx_o <= uart_top.io.intr_tx @[uart.scala 77:27]
    io.cio_uart_tx_o <= uart_top.io.tx_o @[uart.scala 78:22]
    uart_top.io.rx_i <= io.cio_uart_rx_i @[uart.scala 79:22]
    
  module WishboneDevice_4 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module Timer : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cio_timer_intr_cmp : UInt<1>, cio_timer_intr_ovf : UInt<1>}
    
    reg TimerReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 23:29]
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 24:29]
    reg CompareReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 25:29]
    reg PreCountReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 26:29]
    wire maskedData : UInt<8>[4] @[Timer.scala 28:26]
    wire _WIRE : UInt<1>[4] @[Timer.scala 29:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[Timer.scala 29:54]
    _WIRE[0] <= _T @[Timer.scala 29:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[Timer.scala 29:54]
    _WIRE[1] <= _T_1 @[Timer.scala 29:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[Timer.scala 29:54]
    _WIRE[2] <= _T_2 @[Timer.scala 29:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[Timer.scala 29:54]
    _WIRE[3] <= _T_3 @[Timer.scala 29:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[Timer.scala 29:16]
    maskedData[1] <= _T_7 @[Timer.scala 29:16]
    maskedData[2] <= _T_9 @[Timer.scala 29:16]
    maskedData[3] <= _T_11 @[Timer.scala 29:16]
    io.req.ready <= UInt<1>("h01") @[Timer.scala 31:18]
    io.rsp.valid <= UInt<1>("h00") @[Timer.scala 32:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 36:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Timer.scala 36:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 36:71]
    node _T_15 = and(_T_13, _T_14) @[Timer.scala 36:48]
    when _T_15 : @[Timer.scala 36:79]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, TimerReg, UInt<1>("h00")) @[Timer.scala 37:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[Timer.scala 37:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[Timer.scala 37:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[Timer.scala 37:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[Timer.scala 38:32]
      io_rsp_valid_REG <= io.req.valid @[Timer.scala 38:32]
      io.rsp.valid <= io_rsp_valid_REG @[Timer.scala 38:22]
      skip @[Timer.scala 36:79]
    else : @[Timer.scala 40:84]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 40:39]
      node _T_17 = eq(_T_16, UInt<3>("h04")) @[Timer.scala 40:45]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 40:76]
      node _T_19 = and(_T_17, _T_18) @[Timer.scala 40:53]
      when _T_19 : @[Timer.scala 40:84]
        node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 41:78]
        node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 41:78]
        node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[Timer.scala 41:78]
        node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[Timer.scala 41:65]
        node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[Timer.scala 41:26]
        ControlReg <= _ControlReg_T_2 @[Timer.scala 41:20]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 43:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[Timer.scala 43:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[Timer.scala 43:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[Timer.scala 43:34]
        reg io_rsp_valid_REG_1 : UInt<1>, clock @[Timer.scala 44:32]
        io_rsp_valid_REG_1 <= io.req.valid @[Timer.scala 44:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[Timer.scala 44:22]
        skip @[Timer.scala 40:84]
      else : @[Timer.scala 46:84]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 46:39]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[Timer.scala 46:45]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 46:76]
        node _T_23 = and(_T_21, _T_22) @[Timer.scala 46:53]
        when _T_23 : @[Timer.scala 46:84]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[Timer.scala 47:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[Timer.scala 47:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[Timer.scala 47:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[Timer.scala 47:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[Timer.scala 48:32]
          io_rsp_valid_REG_2 <= io.req.valid @[Timer.scala 48:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[Timer.scala 48:22]
          skip @[Timer.scala 46:84]
        else : @[Timer.scala 50:84]
          node _T_24 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 50:39]
          node _T_25 = eq(_T_24, UInt<4>("h08")) @[Timer.scala 50:45]
          node _T_26 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 50:76]
          node _T_27 = and(_T_25, _T_26) @[Timer.scala 50:53]
          when _T_27 : @[Timer.scala 50:84]
            node CompareReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 51:78]
            node CompareReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 51:78]
            node _CompareReg_T = cat(CompareReg_hi, CompareReg_lo) @[Timer.scala 51:78]
            node _CompareReg_T_1 = and(io.req.bits.dataRequest, _CompareReg_T) @[Timer.scala 51:65]
            node _CompareReg_T_2 = mux(io.req.valid, _CompareReg_T_1, CompareReg) @[Timer.scala 51:26]
            CompareReg <= _CompareReg_T_2 @[Timer.scala 51:20]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 53:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[Timer.scala 53:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[Timer.scala 53:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[Timer.scala 53:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[Timer.scala 54:32]
            io_rsp_valid_REG_3 <= io.req.valid @[Timer.scala 54:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[Timer.scala 54:22]
            skip @[Timer.scala 50:84]
          else : @[Timer.scala 56:84]
            node _T_28 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 56:39]
            node _T_29 = eq(_T_28, UInt<4>("h08")) @[Timer.scala 56:45]
            node _T_30 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 56:76]
            node _T_31 = and(_T_29, _T_30) @[Timer.scala 56:53]
            when _T_31 : @[Timer.scala 56:84]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, CompareReg, UInt<1>("h00")) @[Timer.scala 57:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[Timer.scala 57:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[Timer.scala 57:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[Timer.scala 57:34]
              reg io_rsp_valid_REG_4 : UInt<1>, clock @[Timer.scala 58:32]
              io_rsp_valid_REG_4 <= io.req.valid @[Timer.scala 58:32]
              io.rsp.valid <= io_rsp_valid_REG_4 @[Timer.scala 58:22]
              skip @[Timer.scala 56:84]
            else : @[Timer.scala 60:84]
              node _T_32 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 60:39]
              node _T_33 = eq(_T_32, UInt<4>("h08")) @[Timer.scala 60:45]
              node _T_34 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 60:76]
              node _T_35 = and(_T_33, _T_34) @[Timer.scala 60:53]
              when _T_35 : @[Timer.scala 60:84]
                node _io_rsp_bits_dataResponse_T_5 = mux(io.rsp.ready, PreCountReg, UInt<1>("h00")) @[Timer.scala 61:48]
                reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[Timer.scala 61:44]
                io_rsp_bits_dataResponse_REG_5 <= _io_rsp_bits_dataResponse_T_5 @[Timer.scala 61:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[Timer.scala 61:34]
                reg io_rsp_valid_REG_5 : UInt<1>, clock @[Timer.scala 62:32]
                io_rsp_valid_REG_5 <= io.req.valid @[Timer.scala 62:32]
                io.rsp.valid <= io_rsp_valid_REG_5 @[Timer.scala 62:22]
                skip @[Timer.scala 60:84]
              else : @[Timer.scala 64:15]
                io.cio_timer_intr_cmp is invalid @[Timer.scala 65:58]
                io.rsp.valid is invalid @[Timer.scala 65:58]
                reg io_rsp_bits_dataResponse_REG_6 : UInt, clock @[Timer.scala 66:44]
                io_rsp_bits_dataResponse_REG_6 <= io.req.bits.addrRequest @[Timer.scala 66:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_6 @[Timer.scala 66:34]
                skip @[Timer.scala 64:15]
    node _enable_T = bits(ControlReg, 0, 0) @[Timer.scala 69:37]
    wire enable : UInt<1>
    enable <= _enable_T
    node _prescalar_T = bits(ControlReg, 31, 1) @[Timer.scala 70:40]
    wire prescalar : UInt
    prescalar <= _prescalar_T
    node _T_36 = eq(PreCountReg, UInt<1>("h00")) @[Timer.scala 73:22]
    node _T_37 = and(_T_36, enable) @[Timer.scala 73:30]
    when _T_37 : @[Timer.scala 73:40]
      node _PreCountReg_T = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 74:36]
      node _PreCountReg_T_1 = tail(_PreCountReg_T, 1) @[Timer.scala 74:36]
      PreCountReg <= _PreCountReg_T_1 @[Timer.scala 74:21]
      skip @[Timer.scala 73:40]
    else : @[Timer.scala 76:69]
      node _T_38 = eq(TimerReg, CompareReg) @[Timer.scala 76:24]
      node _T_39 = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 76:51]
      node _T_40 = or(_T_38, _T_39) @[Timer.scala 76:39]
      when _T_40 : @[Timer.scala 76:69]
        TimerReg <= UInt<1>("h00") @[Timer.scala 77:18]
        skip @[Timer.scala 76:69]
      else : @[Timer.scala 79:51]
        node _T_41 = eq(PreCountReg, prescalar) @[Timer.scala 79:27]
        node _T_42 = and(_T_41, enable) @[Timer.scala 79:41]
        when _T_42 : @[Timer.scala 79:51]
          node _TimerReg_T = add(TimerReg, UInt<1>("h01")) @[Timer.scala 80:30]
          node _TimerReg_T_1 = tail(_TimerReg_T, 1) @[Timer.scala 80:30]
          TimerReg <= _TimerReg_T_1 @[Timer.scala 80:18]
          PreCountReg <= UInt<1>("h00") @[Timer.scala 81:21]
          skip @[Timer.scala 79:51]
        else : @[Timer.scala 82:40]
          node _T_43 = lt(PreCountReg, prescalar) @[Timer.scala 82:28]
          when _T_43 : @[Timer.scala 82:40]
            node _PreCountReg_T_2 = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 83:36]
            node _PreCountReg_T_3 = tail(_PreCountReg_T_2, 1) @[Timer.scala 83:36]
            PreCountReg <= _PreCountReg_T_3 @[Timer.scala 83:21]
            skip @[Timer.scala 82:40]
    node _io_cio_timer_intr_cmp_T = eq(TimerReg, CompareReg) @[Timer.scala 87:51]
    node _io_cio_timer_intr_cmp_T_1 = mux(enable, _io_cio_timer_intr_cmp_T, UInt<1>("h00")) @[Timer.scala 87:33]
    io.cio_timer_intr_cmp <= _io_cio_timer_intr_cmp_T_1 @[Timer.scala 87:27]
    node _io_cio_timer_intr_ovf_T = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 88:51]
    node _io_cio_timer_intr_ovf_T_1 = mux(enable, _io_cio_timer_intr_ovf_T, UInt<1>("h00")) @[Timer.scala 88:33]
    io.cio_timer_intr_ovf <= _io_cio_timer_intr_ovf_T_1 @[Timer.scala 88:27]
    wire addr_hit : UInt<1>[4] @[Timer.scala 93:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 95:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[Timer.scala 96:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 102:39]
    addr_hit[0] <= _addr_hit_0_T @[Timer.scala 102:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[Timer.scala 102:39]
    addr_hit[1] <= _addr_hit_1_T @[Timer.scala 102:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[Timer.scala 102:39]
    addr_hit[2] <= _addr_hit_2_T @[Timer.scala 102:27]
    node _addr_hit_3_T = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 102:39]
    addr_hit[3] <= _addr_hit_3_T @[Timer.scala 102:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[Timer.scala 110:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[Timer.scala 110:37]
    node _addr_miss_T_2 = or(_addr_miss_T_1, addr_hit[3]) @[Timer.scala 110:37]
    node _addr_miss_T_3 = not(_addr_miss_T_2) @[Timer.scala 110:18]
    addr_miss <= _addr_miss_T_3 @[Timer.scala 110:15]
    node _T_44 = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 111:19]
    node _T_45 = and(_T_44, io.req.bits.isWrite) @[Timer.scala 111:27]
    when _T_45 : @[Timer.scala 111:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[Timer.scala 111:78]
      io_rsp_bits_error_REG <= io.req.valid @[Timer.scala 111:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[Timer.scala 111:68]
      skip @[Timer.scala 111:49]
    else : @[Timer.scala 112:55]
      node _T_46 = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 112:24]
      node _T_47 = and(_T_46, io.req.bits.isWrite) @[Timer.scala 112:33]
      when _T_47 : @[Timer.scala 112:55]
        reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[Timer.scala 112:84]
        io_rsp_bits_error_REG_1 <= io.req.valid @[Timer.scala 112:84]
        io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[Timer.scala 112:74]
        skip @[Timer.scala 112:55]
      else : @[Timer.scala 113:15]
        node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[Timer.scala 113:58]
        reg io_rsp_bits_error_REG_2 : UInt<1>, clock @[Timer.scala 113:44]
        io_rsp_bits_error_REG_2 <= _io_rsp_bits_error_T @[Timer.scala 113:44]
        io.rsp.bits.error <= io_rsp_bits_error_REG_2 @[Timer.scala 113:34]
        skip @[Timer.scala 113:15]
    
  module WishboneDevice_5 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module Protocol_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip miso : UInt<1>, mosi : UInt<1>, ss : UInt<1>, sck : UInt<1>, flip data_in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, data_out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip CPOL : UInt<1>, flip CPHA : UInt<1>}
    
    wire CPOL : UInt<1>
    CPOL <= io.CPOL
    wire CPHA : UInt<1>
    CPHA <= io.CPHA
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Protocol.scala 28:24]
    reg miso_dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Protocol.scala 30:31]
    reg count : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 31:24]
    reg dataReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Protocol.scala 32:26]
    node _clk_T = asUInt(clock) @[Protocol.scala 34:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[Protocol.scala 34:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _io_sck_T = eq(state, UInt<1>("h01")) @[Protocol.scala 35:25]
    node _io_sck_T_1 = not(clk) @[Protocol.scala 35:44]
    node _io_sck_T_2 = mux(CPOL, _io_sck_T_1, clk) @[Protocol.scala 35:38]
    node _io_sck_T_3 = mux(_io_sck_T, _io_sck_T_2, UInt<1>("h00")) @[Protocol.scala 35:18]
    io.sck <= _io_sck_T_3 @[Protocol.scala 35:12]
    io.data_in.ready <= UInt<1>("h00") @[Protocol.scala 39:22]
    io.data_out.valid <= UInt<1>("h00") @[Protocol.scala 40:23]
    io.data_out.bits <= UInt<1>("h00") @[Protocol.scala 41:22]
    io.ss <= UInt<1>("h01") @[Protocol.scala 42:11]
    io.mosi <= UInt<1>("h00") @[Protocol.scala 43:13]
    node _T = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 48:30]
      when io.data_in.valid : @[Protocol.scala 49:59]
        node dataReg_lo = mux(UInt<1>("h00"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
        node _dataReg_T = cat(io.data_in.bits, dataReg_lo) @[Cat.scala 30:58]
        dataReg <= _dataReg_T @[Protocol.scala 50:25]
        state <= UInt<1>("h01") @[Protocol.scala 51:23]
        skip @[Protocol.scala 49:59]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(count, UInt<7>("h040")) @[Protocol.scala 60:25]
        when _T_2 : @[Protocol.scala 60:38]
          io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 61:34]
          io.ss <= UInt<1>("h01") @[Protocol.scala 62:23]
          state <= UInt<1>("h00") @[Protocol.scala 63:23]
          count <= UInt<1>("h00") @[Protocol.scala 64:23]
          skip @[Protocol.scala 60:38]
        else : @[Protocol.scala 65:24]
          io.ss <= UInt<1>("h00") @[Protocol.scala 66:23]
          node _io_mosi_T = bits(dataReg, 63, 63) @[Protocol.scala 67:35]
          io.mosi <= _io_mosi_T @[Protocol.scala 67:25]
          node _dataReg_T_1 = shl(dataReg, 1) @[Protocol.scala 68:36]
          dataReg <= _dataReg_T_1 @[Protocol.scala 68:25]
          node _count_T = add(count, UInt<1>("h01")) @[Protocol.scala 69:32]
          node _count_T_1 = tail(_count_T, 1) @[Protocol.scala 69:32]
          count <= _count_T_1 @[Protocol.scala 69:23]
          skip @[Protocol.scala 65:24]
        skip @[Conditional.scala 39:67]
    reg count1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 75:25]
    node _T_3 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      io.ss <= UInt<1>("h00") @[Protocol.scala 78:19]
      node _T_4 = eq(count1, UInt<7>("h040")) @[Protocol.scala 79:26]
      when _T_4 : @[Protocol.scala 79:63]
        io.data_out.bits <= miso_dataReg @[Protocol.scala 80:34]
        io.data_out.valid <= UInt<1>("h01") @[Protocol.scala 81:35]
        count1 <= UInt<1>("h00") @[Protocol.scala 82:24]
        skip @[Protocol.scala 79:63]
      else : @[Protocol.scala 83:24]
        node _miso_dataReg_T = shl(miso_dataReg, 1) @[Protocol.scala 84:46]
        node _miso_dataReg_T_1 = or(_miso_dataReg_T, io.miso) @[Protocol.scala 84:51]
        miso_dataReg <= _miso_dataReg_T_1 @[Protocol.scala 84:30]
        node _count1_T = add(count1, UInt<1>("h01")) @[Protocol.scala 85:34]
        node _count1_T_1 = tail(_count1_T, 1) @[Protocol.scala 85:34]
        count1 <= _count1_T_1 @[Protocol.scala 85:24]
        skip @[Protocol.scala 83:24]
      skip @[Conditional.scala 40:58]
    
  module SpiFlash : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cs_n : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}
    
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h060"))) @[SpiFlash.scala 28:29]
    reg TxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SpiFlash.scala 29:31]
    reg TxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 30:33]
    reg RxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SpiFlash.scala 31:31]
    reg RxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 32:33]
    wire maskedData : UInt<8>[4] @[SpiFlash.scala 34:26]
    wire _WIRE : UInt<1>[4] @[SpiFlash.scala 35:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[SpiFlash.scala 35:54]
    _WIRE[0] <= _T @[SpiFlash.scala 35:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[SpiFlash.scala 35:54]
    _WIRE[1] <= _T_1 @[SpiFlash.scala 35:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[SpiFlash.scala 35:54]
    _WIRE[2] <= _T_2 @[SpiFlash.scala 35:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[SpiFlash.scala 35:54]
    _WIRE[3] <= _T_3 @[SpiFlash.scala 35:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[SpiFlash.scala 35:16]
    maskedData[1] <= _T_7 @[SpiFlash.scala 35:16]
    maskedData[2] <= _T_9 @[SpiFlash.scala 35:16]
    maskedData[3] <= _T_11 @[SpiFlash.scala 35:16]
    io.req.ready <= UInt<1>("h01") @[SpiFlash.scala 37:18]
    io.rsp.valid <= UInt<1>("h00") @[SpiFlash.scala 38:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 41:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[SpiFlash.scala 41:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[SpiFlash.scala 41:71]
    node _T_15 = and(_T_13, _T_14) @[SpiFlash.scala 41:48]
    when _T_15 : @[SpiFlash.scala 41:79]
      node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 42:78]
      node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 42:78]
      node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[SpiFlash.scala 42:78]
      node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[SpiFlash.scala 42:65]
      node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[SpiFlash.scala 42:26]
      ControlReg <= _ControlReg_T_2 @[SpiFlash.scala 42:20]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[SpiFlash.scala 44:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[SpiFlash.scala 44:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[SpiFlash.scala 44:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[SpiFlash.scala 44:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[SpiFlash.scala 45:32]
      io_rsp_valid_REG <= io.req.valid @[SpiFlash.scala 45:32]
      io.rsp.valid <= io_rsp_valid_REG @[SpiFlash.scala 45:22]
      skip @[SpiFlash.scala 41:79]
    else : @[SpiFlash.scala 51:83]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 51:38]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[SpiFlash.scala 51:44]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 51:75]
      node _T_19 = and(_T_17, _T_18) @[SpiFlash.scala 51:52]
      when _T_19 : @[SpiFlash.scala 51:83]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[SpiFlash.scala 52:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[SpiFlash.scala 52:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[SpiFlash.scala 52:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[SpiFlash.scala 52:34]
        node _io_rsp_valid_T = mux(io.req.valid, UInt<1>("h01"), UInt<1>("h00")) @[SpiFlash.scala 53:36]
        reg io_rsp_valid_REG_1 : UInt, clock @[SpiFlash.scala 53:32]
        io_rsp_valid_REG_1 <= _io_rsp_valid_T @[SpiFlash.scala 53:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[SpiFlash.scala 53:22]
        skip @[SpiFlash.scala 51:83]
      else : @[SpiFlash.scala 59:83]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 59:38]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[SpiFlash.scala 59:44]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[SpiFlash.scala 59:75]
        node _T_23 = and(_T_21, _T_22) @[SpiFlash.scala 59:52]
        when _T_23 : @[SpiFlash.scala 59:83]
          node _T_24 = bits(ControlReg, 4, 2) @[SpiFlash.scala 60:24]
          node _T_25 = eq(_T_24, UInt<1>("h00")) @[SpiFlash.scala 60:30]
          when _T_25 : @[SpiFlash.scala 60:38]
            node TxDataReg_lo = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 61:100]
            node TxDataReg_hi = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 61:100]
            node _TxDataReg_T = cat(TxDataReg_hi, TxDataReg_lo) @[SpiFlash.scala 61:100]
            node _TxDataReg_T_1 = and(io.req.bits.dataRequest, _TxDataReg_T) @[SpiFlash.scala 61:87]
            node TxDataReg_lo_1 = bits(_TxDataReg_T_1, 23, 0) @[SpiFlash.scala 61:107]
            node _TxDataReg_T_2 = cat(UInt<2>("h03"), TxDataReg_lo_1) @[Cat.scala 30:58]
            node _TxDataReg_T_3 = mux(io.req.valid, _TxDataReg_T_2, UInt<1>("h00")) @[SpiFlash.scala 61:29]
            TxDataReg <= _TxDataReg_T_3 @[SpiFlash.scala 61:23]
            TxDataValidReg <= io.req.valid @[SpiFlash.scala 62:28]
            skip @[SpiFlash.scala 60:38]
          else : @[SpiFlash.scala 64:43]
            node _T_26 = bits(ControlReg, 4, 2) @[SpiFlash.scala 64:29]
            node _T_27 = eq(_T_26, UInt<1>("h01")) @[SpiFlash.scala 64:35]
            when _T_27 : @[SpiFlash.scala 64:43]
              node TxDataReg_lo_2 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _TxDataReg_T_4 = cat(UInt<3>("h06"), TxDataReg_lo_2) @[Cat.scala 30:58]
              node _TxDataReg_T_5 = mux(io.req.valid, _TxDataReg_T_4, UInt<1>("h00")) @[SpiFlash.scala 65:29]
              TxDataReg <= _TxDataReg_T_5 @[SpiFlash.scala 65:23]
              TxDataValidReg <= io.req.valid @[SpiFlash.scala 66:28]
              skip @[SpiFlash.scala 64:43]
            else : @[SpiFlash.scala 68:43]
              node _T_28 = bits(ControlReg, 4, 2) @[SpiFlash.scala 68:29]
              node _T_29 = eq(_T_28, UInt<2>("h02")) @[SpiFlash.scala 68:35]
              when _T_29 : @[SpiFlash.scala 68:43]
                node TxDataReg_lo_3 = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 69:100]
                node TxDataReg_hi_1 = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 69:100]
                node _TxDataReg_T_6 = cat(TxDataReg_hi_1, TxDataReg_lo_3) @[SpiFlash.scala 69:100]
                node _TxDataReg_T_7 = and(io.req.bits.dataRequest, _TxDataReg_T_6) @[SpiFlash.scala 69:87]
                node TxDataReg_lo_4 = bits(_TxDataReg_T_7, 23, 0) @[SpiFlash.scala 69:107]
                node _TxDataReg_T_8 = cat(UInt<2>("h02"), TxDataReg_lo_4) @[Cat.scala 30:58]
                node _TxDataReg_T_9 = mux(io.req.valid, _TxDataReg_T_8, UInt<1>("h00")) @[SpiFlash.scala 69:29]
                TxDataReg <= _TxDataReg_T_9 @[SpiFlash.scala 69:23]
                TxDataValidReg <= io.req.valid @[SpiFlash.scala 70:28]
                skip @[SpiFlash.scala 68:43]
              else : @[SpiFlash.scala 72:43]
                node _T_30 = bits(ControlReg, 4, 2) @[SpiFlash.scala 72:29]
                node _T_31 = eq(_T_30, UInt<2>("h03")) @[SpiFlash.scala 72:35]
                when _T_31 : @[SpiFlash.scala 72:43]
                  node TxDataReg_lo_5 = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 73:81]
                  node TxDataReg_hi_2 = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 73:81]
                  node _TxDataReg_T_10 = cat(TxDataReg_hi_2, TxDataReg_lo_5) @[SpiFlash.scala 73:81]
                  node _TxDataReg_T_11 = and(io.req.bits.dataRequest, _TxDataReg_T_10) @[SpiFlash.scala 73:68]
                  node _TxDataReg_T_12 = mux(io.req.valid, _TxDataReg_T_11, UInt<1>("h00")) @[SpiFlash.scala 73:29]
                  TxDataReg <= _TxDataReg_T_12 @[SpiFlash.scala 73:23]
                  TxDataValidReg <= io.req.valid @[SpiFlash.scala 74:28]
                  skip @[SpiFlash.scala 72:43]
                else : @[SpiFlash.scala 76:43]
                  node _T_32 = bits(ControlReg, 4, 2) @[SpiFlash.scala 76:29]
                  node _T_33 = eq(_T_32, UInt<3>("h04")) @[SpiFlash.scala 76:35]
                  when _T_33 : @[SpiFlash.scala 76:43]
                    node TxDataReg_lo_6 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _TxDataReg_T_13 = cat(UInt<3>("h04"), TxDataReg_lo_6) @[Cat.scala 30:58]
                    node _TxDataReg_T_14 = mux(io.req.valid, _TxDataReg_T_13, UInt<1>("h00")) @[SpiFlash.scala 77:29]
                    TxDataReg <= _TxDataReg_T_14 @[SpiFlash.scala 77:23]
                    TxDataValidReg <= io.req.valid @[SpiFlash.scala 78:28]
                    skip @[SpiFlash.scala 76:43]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, io.req.bits.addrRequest, UInt<1>("h00")) @[SpiFlash.scala 82:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[SpiFlash.scala 82:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[SpiFlash.scala 82:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[SpiFlash.scala 82:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[SpiFlash.scala 83:32]
          io_rsp_valid_REG_2 <= UInt<1>("h01") @[SpiFlash.scala 83:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[SpiFlash.scala 83:22]
          skip @[SpiFlash.scala 59:83]
        else : @[SpiFlash.scala 88:83]
          node _T_34 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 88:38]
          node _T_35 = eq(_T_34, UInt<3>("h04")) @[SpiFlash.scala 88:44]
          node _T_36 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 88:75]
          node _T_37 = and(_T_35, _T_36) @[SpiFlash.scala 88:52]
          when _T_37 : @[SpiFlash.scala 88:83]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, TxDataReg, UInt<1>("h00")) @[SpiFlash.scala 89:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[SpiFlash.scala 89:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[SpiFlash.scala 89:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[SpiFlash.scala 89:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[SpiFlash.scala 90:32]
            io_rsp_valid_REG_3 <= io.req.valid @[SpiFlash.scala 90:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[SpiFlash.scala 90:22]
            skip @[SpiFlash.scala 88:83]
          else : @[SpiFlash.scala 95:83]
            node _T_38 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 95:38]
            node _T_39 = eq(_T_38, UInt<4>("h08")) @[SpiFlash.scala 95:44]
            node _T_40 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 95:75]
            node _T_41 = and(_T_39, _T_40) @[SpiFlash.scala 95:52]
            when _T_41 : @[SpiFlash.scala 95:83]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, RxDataReg, UInt<1>("h00")) @[SpiFlash.scala 96:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[SpiFlash.scala 96:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[SpiFlash.scala 96:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[SpiFlash.scala 96:34]
              io.rsp.valid <= RxDataValidReg @[SpiFlash.scala 97:22]
              skip @[SpiFlash.scala 95:83]
            else : @[SpiFlash.scala 103:15]
              io.cs_n is invalid @[SpiFlash.scala 106:62]
              io.sclk is invalid @[SpiFlash.scala 106:62]
              io.mosi is invalid @[SpiFlash.scala 106:62]
              io.rsp.valid is invalid @[SpiFlash.scala 106:62]
              reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[SpiFlash.scala 107:44]
              io_rsp_bits_dataResponse_REG_5 <= io.req.bits.addrRequest @[SpiFlash.scala 107:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[SpiFlash.scala 107:34]
              skip @[SpiFlash.scala 103:15]
    inst spiProtocol of Protocol_1 @[SpiFlash.scala 126:29]
    spiProtocol.clock <= clock
    spiProtocol.reset <= reset
    node _spiProtocol_clock_T = bits(ControlReg, 31, 5) @[SpiFlash.scala 128:45]
    node _spiProtocol_clock_T_1 = shr(_spiProtocol_clock_T, 1) @[SpiFlash.scala 122:54]
    node _spiProtocol_clock_T_2 = sub(_spiProtocol_clock_T_1, UInt<1>("h01")) @[SpiFlash.scala 116:36]
    node _spiProtocol_clock_T_3 = tail(_spiProtocol_clock_T_2, 1) @[SpiFlash.scala 116:36]
    reg spiProtocol_clock_x : UInt<26>, clock with : (reset => (reset, UInt<26>("h00"))) @[SpiFlash.scala 112:24]
    node _spiProtocol_clock_x_T = eq(spiProtocol_clock_x, _spiProtocol_clock_T_3) @[SpiFlash.scala 113:20]
    node _spiProtocol_clock_x_T_1 = add(spiProtocol_clock_x, UInt<1>("h01")) @[SpiFlash.scala 113:36]
    node _spiProtocol_clock_x_T_2 = tail(_spiProtocol_clock_x_T_1, 1) @[SpiFlash.scala 113:36]
    node _spiProtocol_clock_x_T_3 = mux(_spiProtocol_clock_x_T, UInt<1>("h00"), _spiProtocol_clock_x_T_2) @[SpiFlash.scala 113:17]
    spiProtocol_clock_x <= _spiProtocol_clock_x_T_3 @[SpiFlash.scala 113:11]
    node _spiProtocol_clock_T_4 = eq(spiProtocol_clock_x, UInt<1>("h00")) @[SpiFlash.scala 116:43]
    reg spiProtocol_clock_x_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 118:24]
    node _spiProtocol_clock_x_T_4 = eq(spiProtocol_clock_x_1, UInt<1>("h00")) @[SpiFlash.scala 119:21]
    node _spiProtocol_clock_x_T_5 = mux(_spiProtocol_clock_T_4, _spiProtocol_clock_x_T_4, spiProtocol_clock_x_1) @[SpiFlash.scala 119:17]
    spiProtocol_clock_x_1 <= _spiProtocol_clock_x_T_5 @[SpiFlash.scala 119:11]
    node _spiProtocol_clock_T_5 = asClock(spiProtocol_clock_x_1) @[SpiFlash.scala 128:53]
    spiProtocol.clock <= _spiProtocol_clock_T_5 @[SpiFlash.scala 128:23]
    spiProtocol.io.data_in.bits <= TxDataReg @[SpiFlash.scala 129:34]
    spiProtocol.io.data_in.valid <= TxDataValidReg @[SpiFlash.scala 130:34]
    node _spiProtocol_io_CPOL_T = bits(ControlReg, 1, 1) @[SpiFlash.scala 131:38]
    spiProtocol.io.CPOL <= _spiProtocol_io_CPOL_T @[SpiFlash.scala 131:25]
    node _spiProtocol_io_CPHA_T = bits(ControlReg, 0, 0) @[SpiFlash.scala 132:38]
    spiProtocol.io.CPHA <= _spiProtocol_io_CPHA_T @[SpiFlash.scala 132:25]
    spiProtocol.io.miso <= io.miso @[SpiFlash.scala 133:25]
    spiProtocol.io.data_out.ready <= UInt<1>("h01") @[SpiFlash.scala 134:35]
    io.mosi <= spiProtocol.io.mosi @[SpiFlash.scala 135:121]
    io.sclk <= spiProtocol.io.sck @[SpiFlash.scala 135:121]
    io.cs_n <= spiProtocol.io.ss @[SpiFlash.scala 135:121]
    when spiProtocol.io.data_out.valid : @[SpiFlash.scala 136:40]
      RxDataReg <= spiProtocol.io.data_out.bits @[SpiFlash.scala 137:19]
      RxDataValidReg <= UInt<1>("h01") @[SpiFlash.scala 138:24]
      skip @[SpiFlash.scala 136:40]
    wire addr_hit : UInt<1>[3] @[SpiFlash.scala 143:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 145:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[SpiFlash.scala 146:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[SpiFlash.scala 152:39]
    addr_hit[0] <= _addr_hit_0_T @[SpiFlash.scala 152:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[SpiFlash.scala 152:39]
    addr_hit[1] <= _addr_hit_1_T @[SpiFlash.scala 152:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[SpiFlash.scala 152:39]
    addr_hit[2] <= _addr_hit_2_T @[SpiFlash.scala 152:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[SpiFlash.scala 160:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[SpiFlash.scala 160:37]
    node _addr_miss_T_2 = not(_addr_miss_T_1) @[SpiFlash.scala 160:18]
    addr_miss <= _addr_miss_T_2 @[SpiFlash.scala 160:15]
    node _T_42 = eq(wireAddr, UInt<4>("h08")) @[SpiFlash.scala 161:19]
    node _T_43 = and(_T_42, io.req.bits.isWrite) @[SpiFlash.scala 161:27]
    when _T_43 : @[SpiFlash.scala 161:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[SpiFlash.scala 161:78]
      io_rsp_bits_error_REG <= io.req.valid @[SpiFlash.scala 161:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[SpiFlash.scala 161:68]
      skip @[SpiFlash.scala 161:49]
    else : @[SpiFlash.scala 162:15]
      node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[SpiFlash.scala 162:58]
      reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[SpiFlash.scala 162:44]
      io_rsp_bits_error_REG_1 <= _io_rsp_bits_error_T @[SpiFlash.scala 162:44]
      io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[SpiFlash.scala 162:34]
      skip @[SpiFlash.scala 162:15]
    
  module WishboneDevice_6 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module i2c_master : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, flip addr : UInt<7>, flip data : UInt<8>, flip read_write : UInt<1>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, i2c_intr : UInt<1>}
    
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 25:24]
    reg count : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[i2c_master.scala 26:24]
    reg saved_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_master.scala 27:29]
    reg saved_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 28:29]
    reg i2c_scl_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[i2c_master.scala 29:33]
    reg intr_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 30:28]
    state <= UInt<3>("h00") @[i2c_master.scala 32:11]
    io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 34:16]
    io.ready <= UInt<1>("h00") @[i2c_master.scala 35:14]
    io.stop <= UInt<1>("h00") @[i2c_master.scala 36:13]
    node _clk_T = asUInt(clock) @[i2c_master.scala 38:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[i2c_master.scala 38:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _rst_T = asUInt(reset) @[i2c_master.scala 39:36]
    node _rst_T_1 = bits(_rst_T, 0, 0) @[i2c_master.scala 39:38]
    wire rst : UInt<1>
    rst <= _rst_T_1
    node _io_i2c_scl_T = eq(i2c_scl_enable, UInt<1>("h00")) @[i2c_master.scala 41:38]
    node _io_i2c_scl_T_1 = not(clk) @[i2c_master.scala 41:54]
    node _io_i2c_scl_T_2 = mux(_io_i2c_scl_T, UInt<1>("h01"), _io_i2c_scl_T_1) @[i2c_master.scala 41:22]
    io.i2c_scl <= _io_i2c_scl_T_2 @[i2c_master.scala 41:16]
    node _T = eq(rst, UInt<1>("h01")) @[i2c_master.scala 43:14]
    when _T : @[i2c_master.scala 43:22]
      i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 44:24]
      skip @[i2c_master.scala 43:22]
    else : @[i2c_master.scala 45:16]
      node _T_1 = eq(state, UInt<3>("h00")) @[i2c_master.scala 46:22]
      node _T_2 = eq(state, UInt<3>("h01")) @[i2c_master.scala 46:46]
      node _T_3 = or(_T_1, _T_2) @[i2c_master.scala 46:37]
      node _T_4 = eq(state, UInt<3>("h07")) @[i2c_master.scala 46:71]
      node _T_5 = or(_T_3, _T_4) @[i2c_master.scala 46:62]
      when _T_5 : @[i2c_master.scala 46:87]
        i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 47:28]
        skip @[i2c_master.scala 46:87]
      else : @[i2c_master.scala 48:20]
        i2c_scl_enable <= UInt<1>("h01") @[i2c_master.scala 49:29]
        skip @[i2c_master.scala 48:20]
      skip @[i2c_master.scala 45:16]
    node _T_6 = eq(rst, UInt<1>("h01")) @[i2c_master.scala 53:14]
    when _T_6 : @[i2c_master.scala 53:22]
      state <= UInt<3>("h00") @[i2c_master.scala 54:15]
      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 55:20]
      skip @[i2c_master.scala 53:22]
    else : @[i2c_master.scala 56:16]
      node _T_7 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 40:58]
        io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 59:28]
        intr_done <= UInt<1>("h00") @[i2c_master.scala 60:27]
        node _T_8 = eq(io.start, UInt<1>("h01")) @[i2c_master.scala 61:31]
        when _T_8 : @[i2c_master.scala 61:39]
          state <= UInt<3>("h01") @[i2c_master.scala 62:27]
          io.ready <= UInt<1>("h00") @[i2c_master.scala 63:30]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 64:29]
          skip @[i2c_master.scala 61:39]
        else : @[i2c_master.scala 65:28]
          state <= UInt<3>("h00") @[i2c_master.scala 66:27]
          skip @[i2c_master.scala 65:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 72:28]
          saved_addr <= io.addr @[i2c_master.scala 73:28]
          saved_data <= io.data @[i2c_master.scala 74:28]
          io.ready <= UInt<1>("h01") @[i2c_master.scala 75:26]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 76:25]
          state <= UInt<3>("h02") @[i2c_master.scala 77:23]
          count <= UInt<3>("h06") @[i2c_master.scala 78:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _io_i2c_sda_T = dshr(saved_addr, count) @[i2c_master.scala 82:41]
            node _io_i2c_sda_T_1 = bits(_io_i2c_sda_T, 0, 0) @[i2c_master.scala 82:41]
            io.i2c_sda <= _io_i2c_sda_T_1 @[i2c_master.scala 82:28]
            io.ready <= UInt<1>("h00") @[i2c_master.scala 83:26]
            io.stop <= UInt<1>("h00") @[i2c_master.scala 84:25]
            node _T_11 = eq(count, UInt<1>("h00")) @[i2c_master.scala 85:28]
            when _T_11 : @[i2c_master.scala 85:36]
              state <= UInt<3>("h03") @[i2c_master.scala 86:27]
              skip @[i2c_master.scala 85:36]
            else : @[i2c_master.scala 87:28]
              node _count_T = sub(count, UInt<1>("h01")) @[i2c_master.scala 88:36]
              node _count_T_1 = tail(_count_T, 1) @[i2c_master.scala 88:36]
              count <= _count_T_1 @[i2c_master.scala 88:27]
              state <= UInt<3>("h02") @[i2c_master.scala 89:27]
              skip @[i2c_master.scala 87:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.i2c_sda <= io.read_write @[i2c_master.scala 95:28]
              io.ready <= UInt<1>("h00") @[i2c_master.scala 96:26]
              io.stop <= UInt<1>("h00") @[i2c_master.scala 97:25]
              state <= UInt<3>("h04") @[i2c_master.scala 98:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 104:32]
                node _T_14 = eq(io.i2c_sda_in, UInt<1>("h00")) @[i2c_master.scala 105:40]
                when _T_14 : @[i2c_master.scala 105:48]
                  state <= UInt<3>("h05") @[i2c_master.scala 106:31]
                  count <= UInt<3>("h07") @[i2c_master.scala 107:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 108:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 109:33]
                  skip @[i2c_master.scala 105:48]
                else : @[i2c_master.scala 110:32]
                  state <= UInt<3>("h07") @[i2c_master.scala 111:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 112:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 113:33]
                  skip @[i2c_master.scala 110:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_15 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
                when _T_15 : @[Conditional.scala 39:67]
                  node _io_i2c_sda_T_2 = dshr(io.data, count) @[i2c_master.scala 120:38]
                  node _io_i2c_sda_T_3 = bits(_io_i2c_sda_T_2, 0, 0) @[i2c_master.scala 120:38]
                  io.i2c_sda <= _io_i2c_sda_T_3 @[i2c_master.scala 120:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 121:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 122:25]
                  node _T_16 = eq(count, UInt<1>("h00")) @[i2c_master.scala 123:28]
                  when _T_16 : @[i2c_master.scala 123:36]
                    state <= UInt<3>("h06") @[i2c_master.scala 124:27]
                    skip @[i2c_master.scala 123:36]
                  else : @[i2c_master.scala 125:28]
                    node _count_T_2 = sub(count, UInt<1>("h01")) @[i2c_master.scala 126:36]
                    node _count_T_3 = tail(_count_T_2, 1) @[i2c_master.scala 126:36]
                    count <= _count_T_3 @[i2c_master.scala 126:27]
                    state <= UInt<3>("h05") @[i2c_master.scala 127:27]
                    skip @[i2c_master.scala 125:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_17 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                  when _T_17 : @[Conditional.scala 39:67]
                    io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 133:28]
                    io.ready <= UInt<1>("h00") @[i2c_master.scala 134:26]
                    io.stop <= UInt<1>("h00") @[i2c_master.scala 135:25]
                    state <= UInt<3>("h07") @[i2c_master.scala 136:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_18 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
                    when _T_18 : @[Conditional.scala 39:67]
                      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 140:28]
                      intr_done <= UInt<1>("h01") @[i2c_master.scala 141:27]
                      io.ready <= UInt<1>("h00") @[i2c_master.scala 142:26]
                      io.stop <= UInt<1>("h01") @[i2c_master.scala 143:25]
                      state <= UInt<3>("h00") @[i2c_master.scala 144:23]
                      skip @[Conditional.scala 39:67]
      skip @[i2c_master.scala 56:16]
    io.i2c_intr <= intr_done @[i2c_master.scala 149:17]
    
  module I2C_Top : 
    input clock : Clock
    input reset : Reset
    output io : {flip wdata : UInt<32>, flip addr : UInt<7>, flip ren : UInt<1>, flip we : UInt<1>, flip sda_in : UInt<1>, sda : UInt<1>, scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, intr : UInt<1>}
    
    reg addr_start_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 31:33]
    reg addr_slave_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[I2C_Top.scala 32:34]
    reg addr_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C_Top.scala 33:28]
    reg addr_read_write_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 34:38]
    reg addr_sda_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C_Top.scala 35:30]
    node _T = eq(io.ren, UInt<1>("h00")) @[I2C_Top.scala 40:10]
    node _T_1 = and(_T, io.we) @[I2C_Top.scala 40:20]
    when _T_1 : @[I2C_Top.scala 40:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[I2C_Top.scala 41:18]
      when _T_2 : @[I2C_Top.scala 41:37]
        node _addr_start_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 42:35]
        addr_start_bit <= _addr_start_bit_T @[I2C_Top.scala 42:24]
        skip @[I2C_Top.scala 41:37]
      else : @[I2C_Top.scala 43:44]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[I2C_Top.scala 43:24]
        when _T_3 : @[I2C_Top.scala 43:44]
          node _addr_slave_addr_T = bits(io.wdata, 6, 0) @[I2C_Top.scala 44:36]
          addr_slave_addr <= _addr_slave_addr_T @[I2C_Top.scala 44:25]
          skip @[I2C_Top.scala 43:44]
        else : @[I2C_Top.scala 45:38]
          node _T_4 = eq(io.addr, UInt<5>("h010")) @[I2C_Top.scala 45:24]
          when _T_4 : @[I2C_Top.scala 45:38]
            node _addr_data_T = bits(io.wdata, 7, 0) @[I2C_Top.scala 46:30]
            addr_data <= _addr_data_T @[I2C_Top.scala 46:19]
            skip @[I2C_Top.scala 45:38]
          else : @[I2C_Top.scala 47:48]
            node _T_5 = eq(io.addr, UInt<4>("h08")) @[I2C_Top.scala 47:24]
            when _T_5 : @[I2C_Top.scala 47:48]
              node _addr_read_write_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 48:40]
              addr_read_write_bit <= _addr_read_write_bit_T @[I2C_Top.scala 48:29]
              skip @[I2C_Top.scala 47:48]
            else : @[I2C_Top.scala 49:40]
              node _T_6 = eq(io.addr, UInt<4>("h0c")) @[I2C_Top.scala 49:24]
              when _T_6 : @[I2C_Top.scala 49:40]
                node _addr_sda_in_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 50:33]
                addr_sda_in <= _addr_sda_in_T @[I2C_Top.scala 50:22]
                skip @[I2C_Top.scala 49:40]
              else : @[I2C_Top.scala 53:16]
                addr_start_bit <= UInt<1>("h00") @[I2C_Top.scala 54:24]
                addr_slave_addr <= UInt<1>("h00") @[I2C_Top.scala 55:25]
                addr_data <= UInt<1>("h00") @[I2C_Top.scala 56:19]
                skip @[I2C_Top.scala 53:16]
      skip @[I2C_Top.scala 40:29]
    inst i2c_master of i2c_master @[I2C_Top.scala 63:28]
    i2c_master.clock <= clock
    i2c_master.reset <= reset
    i2c_master.io.start <= addr_start_bit @[I2C_Top.scala 64:25]
    i2c_master.io.addr <= addr_slave_addr @[I2C_Top.scala 65:24]
    i2c_master.io.data <= addr_data @[I2C_Top.scala 66:24]
    i2c_master.io.read_write <= addr_read_write_bit @[I2C_Top.scala 67:30]
    i2c_master.io.i2c_sda_in <= addr_sda_in @[I2C_Top.scala 68:30]
    io.sda <= i2c_master.io.i2c_sda @[I2C_Top.scala 70:12]
    io.scl <= i2c_master.io.i2c_scl @[I2C_Top.scala 71:12]
    io.intr <= i2c_master.io.i2c_intr @[I2C_Top.scala 72:13]
    io.ready <= i2c_master.io.ready @[I2C_Top.scala 73:14]
    io.stop <= i2c_master.io.stop @[I2C_Top.scala 74:13]
    
  module i2c : 
    input clock : Clock
    input reset : Reset
    output io : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, response : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_i2c_sda_in : UInt<1>, cio_i2c_sda : UInt<1>, cio_i2c_scl : UInt<1>, cio_i2c_intr : UInt<1>}
    
    io.request.ready <= UInt<1>("h01") @[i2c.scala 17:22]
    inst i2c_top of I2C_Top @[i2c.scala 19:26]
    i2c_top.clock <= clock
    i2c_top.reset <= reset
    wire write_register : UInt<1> @[i2c.scala 22:46]
    wire read_register : UInt<1> @[i2c.scala 22:46]
    wire data_reg : UInt<32> @[i2c.scala 23:24]
    wire addr_reg : UInt<8> @[i2c.scala 24:24]
    node _write_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _write_register_T_1 = mux(_write_register_T, io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 26:26]
    write_register <= _write_register_T_1 @[i2c.scala 26:20]
    node _read_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _read_register_T_1 = eq(io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 27:45]
    node _read_register_T_2 = mux(_read_register_T, _read_register_T_1, UInt<1>("h00")) @[i2c.scala 27:25]
    read_register <= _read_register_T_2 @[i2c.scala 27:19]
    data_reg <= io.request.bits.dataRequest @[i2c.scala 28:14]
    node _addr_reg_T = bits(io.request.bits.addrRequest, 6, 0) @[i2c.scala 29:44]
    addr_reg <= _addr_reg_T @[i2c.scala 29:14]
    i2c_top.io.wdata <= data_reg @[i2c.scala 30:22]
    i2c_top.io.addr <= addr_reg @[i2c.scala 31:21]
    i2c_top.io.we <= write_register @[i2c.scala 32:19]
    i2c_top.io.ren <= read_register @[i2c.scala 33:20]
    node _io_response_bits_dataResponse_T = mux(io.response.ready, i2c_top.io.wdata, UInt<1>("h00")) @[i2c.scala 35:49]
    reg io_response_bits_dataResponse_REG : UInt, clock @[i2c.scala 35:45]
    io_response_bits_dataResponse_REG <= _io_response_bits_dataResponse_T @[i2c.scala 35:45]
    io.response.bits.dataResponse <= io_response_bits_dataResponse_REG @[i2c.scala 35:35]
    node _io_response_valid_T = or(write_register, read_register) @[i2c.scala 36:53]
    node _io_response_valid_T_1 = mux(_io_response_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[i2c.scala 36:37]
    reg io_response_valid_REG : UInt<1>, clock @[i2c.scala 36:33]
    io_response_valid_REG <= _io_response_valid_T_1 @[i2c.scala 36:33]
    io.response.valid <= io_response_valid_REG @[i2c.scala 36:23]
    node _io_response_bits_error_T = mux(io.response.ready, i2c_top.io.intr, UInt<1>("h00")) @[i2c.scala 37:42]
    reg io_response_bits_error_REG : UInt, clock @[i2c.scala 37:38]
    io_response_bits_error_REG <= _io_response_bits_error_T @[i2c.scala 37:38]
    io.response.bits.error <= io_response_bits_error_REG @[i2c.scala 37:28]
    i2c_top.io.sda_in <= io.cio_i2c_sda_in @[i2c.scala 39:23]
    io.cio_i2c_sda <= i2c_top.io.sda @[i2c.scala 41:20]
    io.cio_i2c_scl <= i2c_top.io.scl @[i2c.scala 42:20]
    io.cio_i2c_intr <= i2c_top.io.intr @[i2c.scala 43:21]
    
  module WishboneDevice_7 : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module BlockRamWithoutMasking : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire addrMisaligned : UInt<1> @[BlockRam.scala 67:28]
    wire addrOutOfBounds : UInt<1> @[BlockRam.scala 68:29]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 72:25]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 73:23]
    io.rsp.valid <= validReg @[BlockRam.scala 74:16]
    io.rsp.bits.error <= errReg @[BlockRam.scala 75:21]
    io.req.ready <= UInt<1>("h01") @[BlockRam.scala 76:16]
    node _addrMisaligned_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _addrMisaligned_T_1 = bits(io.req.bits.addrRequest, 1, 0) @[BlockRam.scala 78:63]
    node _addrMisaligned_T_2 = orr(_addrMisaligned_T_1) @[BlockRam.scala 78:72]
    node _addrMisaligned_T_3 = mux(_addrMisaligned_T, _addrMisaligned_T_2, UInt<1>("h00")) @[BlockRam.scala 78:24]
    addrMisaligned <= _addrMisaligned_T_3 @[BlockRam.scala 78:18]
    node _addrOutOfBounds_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _addrOutOfBounds_T_1 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 79:65]
    node _addrOutOfBounds_T_2 = geq(_addrOutOfBounds_T_1, UInt<10>("h03ff")) @[BlockRam.scala 79:71]
    node _addrOutOfBounds_T_3 = mux(_addrOutOfBounds_T, _addrOutOfBounds_T_2, UInt<1>("h00")) @[BlockRam.scala 79:25]
    addrOutOfBounds <= _addrOutOfBounds_T_3 @[BlockRam.scala 79:19]
    node _errReg_T = or(addrMisaligned, addrOutOfBounds) @[BlockRam.scala 81:28]
    errReg <= _errReg_T @[BlockRam.scala 81:10]
    smem mem : UInt<32>[1024], undefined @[BlockRam.scala 82:24]
    node _T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[BlockRam.scala 88:25]
    node _T_2 = and(_T, _T_1) @[BlockRam.scala 88:22]
    when _T_2 : @[BlockRam.scala 88:47]
      node _io_rsp_bits_dataResponse_T = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 90:65]
      node _io_rsp_bits_dataResponse_T_1 = bits(_io_rsp_bits_dataResponse_T, 9, 0) @[BlockRam.scala 90:41]
      read mport io_rsp_bits_dataResponse_MPORT = mem[_io_rsp_bits_dataResponse_T_1], clock @[BlockRam.scala 90:41]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_MPORT @[BlockRam.scala 90:30]
      validReg <= UInt<1>("h01") @[BlockRam.scala 91:14]
      skip @[BlockRam.scala 88:47]
    else : @[BlockRam.scala 92:53]
      node _T_3 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
      node _T_4 = and(_T_3, io.req.bits.isWrite) @[BlockRam.scala 92:29]
      when _T_4 : @[BlockRam.scala 92:53]
        node _T_5 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 94:38]
        node _T_6 = bits(_T_5, 9, 0)
        write mport MPORT = mem[_T_6], clock
        MPORT <= io.req.bits.dataRequest
        validReg <= UInt<1>("h01") @[BlockRam.scala 95:14]
        io.rsp.bits.dataResponse is invalid @[BlockRam.scala 96:30]
        skip @[BlockRam.scala 92:53]
      else : @[BlockRam.scala 97:16]
        validReg <= UInt<1>("h00") @[BlockRam.scala 98:14]
        io.rsp.bits.dataResponse is invalid @[BlockRam.scala 99:30]
        skip @[BlockRam.scala 97:16]
    
  module BlockRamWithMasking : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire wdata : UInt<8>[4] @[BlockRam.scala 113:19]
    wire rdata : UInt<8>[4] @[BlockRam.scala 115:19]
    wire mask : UInt<1>[4] @[BlockRam.scala 117:18]
    wire data : UInt<8>[4] @[BlockRam.scala 119:18]
    node _wdata_0_T = bits(io.req.bits.dataRequest, 7, 0) @[BlockRam.scala 121:38]
    wdata[0] <= _wdata_0_T @[BlockRam.scala 121:12]
    node _wdata_1_T = bits(io.req.bits.dataRequest, 15, 8) @[BlockRam.scala 122:38]
    wdata[1] <= _wdata_1_T @[BlockRam.scala 122:12]
    node _wdata_2_T = bits(io.req.bits.dataRequest, 23, 16) @[BlockRam.scala 123:38]
    wdata[2] <= _wdata_2_T @[BlockRam.scala 123:12]
    node _wdata_3_T = bits(io.req.bits.dataRequest, 31, 24) @[BlockRam.scala 124:38]
    wdata[3] <= _wdata_3_T @[BlockRam.scala 124:12]
    node byteLane_0 = bits(io.req.bits.activeByteLane, 0, 0) @[BlockRam.scala 128:52]
    node byteLane_1 = bits(io.req.bits.activeByteLane, 1, 1) @[BlockRam.scala 128:52]
    node byteLane_2 = bits(io.req.bits.activeByteLane, 2, 2) @[BlockRam.scala 128:52]
    node byteLane_3 = bits(io.req.bits.activeByteLane, 3, 3) @[BlockRam.scala 128:52]
    mask[0] <= byteLane_0 @[BlockRam.scala 130:7]
    mask[1] <= byteLane_1 @[BlockRam.scala 130:7]
    mask[2] <= byteLane_2 @[BlockRam.scala 130:7]
    mask[3] <= byteLane_3 @[BlockRam.scala 130:7]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 136:25]
    io.rsp.valid <= validReg @[BlockRam.scala 137:16]
    io.rsp.bits.error <= UInt<1>("h00") @[BlockRam.scala 138:21]
    io.req.ready <= UInt<1>("h01") @[BlockRam.scala 139:16]
    smem mem : UInt<8>[4][1024], undefined @[BlockRam.scala 141:24]
    node _T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[BlockRam.scala 143:25]
    node _T_2 = and(_T, _T_1) @[BlockRam.scala 143:22]
    when _T_2 : @[BlockRam.scala 143:47]
      node _T_3 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 145:46]
      node _T_4 = bits(_T_3, 9, 0) @[BlockRam.scala 145:22]
      read mport MPORT = mem[_T_4], clock @[BlockRam.scala 145:22]
      rdata[0] <= MPORT[0] @[BlockRam.scala 145:11]
      rdata[1] <= MPORT[1] @[BlockRam.scala 145:11]
      rdata[2] <= MPORT[2] @[BlockRam.scala 145:11]
      rdata[3] <= MPORT[3] @[BlockRam.scala 145:11]
      validReg <= UInt<1>("h01") @[BlockRam.scala 146:14]
      skip @[BlockRam.scala 143:47]
    else : @[BlockRam.scala 147:53]
      node _T_5 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
      node _T_6 = and(_T_5, io.req.bits.isWrite) @[BlockRam.scala 147:29]
      when _T_6 : @[BlockRam.scala 147:53]
        node _T_7 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 149:38]
        node _T_8 = bits(_T_7, 9, 0)
        write mport MPORT_1 = mem[_T_8], clock
        when mask[0] :
          MPORT_1[0] <= wdata[0]
          skip
        when mask[1] :
          MPORT_1[1] <= wdata[1]
          skip
        when mask[2] :
          MPORT_1[2] <= wdata[2]
          skip
        when mask[3] :
          MPORT_1[3] <= wdata[3]
          skip
        validReg <= UInt<1>("h01") @[BlockRam.scala 150:14]
        rdata[0] is invalid @[BlockRam.scala 151:18]
        rdata[1] is invalid @[BlockRam.scala 151:18]
        rdata[2] is invalid @[BlockRam.scala 151:18]
        rdata[3] is invalid @[BlockRam.scala 151:18]
        skip @[BlockRam.scala 147:53]
      else : @[BlockRam.scala 152:16]
        validReg <= UInt<1>("h00") @[BlockRam.scala 153:14]
        rdata[0] is invalid @[BlockRam.scala 154:18]
        rdata[1] is invalid @[BlockRam.scala 154:18]
        rdata[2] is invalid @[BlockRam.scala 154:18]
        rdata[3] is invalid @[BlockRam.scala 154:18]
        skip @[BlockRam.scala 152:16]
    node _T_9 = eq(mask[0], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_10 = mux(_T_9, rdata[0], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_11 = eq(mask[1], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_12 = mux(_T_11, rdata[1], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_13 = eq(mask[2], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_14 = mux(_T_13, rdata[2], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_15 = eq(mask[3], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_16 = mux(_T_15, rdata[3], UInt<1>("h00")) @[BlockRam.scala 160:8]
    data[0] <= _T_10 @[BlockRam.scala 159:8]
    data[1] <= _T_12 @[BlockRam.scala 159:8]
    data[2] <= _T_14 @[BlockRam.scala 159:8]
    data[3] <= _T_16 @[BlockRam.scala 159:8]
    node io_rsp_bits_dataResponse_lo = cat(data[1], data[0]) @[Cat.scala 30:58]
    node io_rsp_bits_dataResponse_hi = cat(data[3], data[2]) @[Cat.scala 30:58]
    node _io_rsp_bits_dataResponse_T = cat(io_rsp_bits_dataResponse_hi, io_rsp_bits_dataResponse_lo) @[Cat.scala 30:58]
    io.rsp.bits.dataResponse <= _io_rsp_bits_dataResponse_T @[BlockRam.scala 163:28]
    
  module WishboneErr : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}}
    
    reg ackReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneErr.scala 14:23]
    reg dataReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneErr.scala 15:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneErr.scala 16:23]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneErr.scala 17:25]
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneErr.scala 19:29]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneErr.scala 12:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneErr.scala 12:80]
    when _T_1 : @[WishboneErr.scala 21:16]
      errReg <= UInt<1>("h01") @[WishboneErr.scala 25:12]
      validReg <= UInt<1>("h01") @[WishboneErr.scala 26:14]
      when io.wbMasterReceiver.bits.we : @[WishboneErr.scala 27:39]
        dataReg is invalid @[WishboneErr.scala 29:15]
        skip @[WishboneErr.scala 27:39]
      else : @[WishboneErr.scala 30:18]
        node dataReg_hi = cat(UInt<4>("h0f"), UInt<4>("h0f")) @[Cat.scala 30:58]
        node dataReg_hi_1 = cat(dataReg_hi, dataReg_hi) @[Cat.scala 30:58]
        node _dataReg_T = cat(dataReg_hi_1, dataReg_hi_1) @[Cat.scala 30:58]
        dataReg <= _dataReg_T @[WishboneErr.scala 32:15]
        skip @[WishboneErr.scala 30:18]
      skip @[WishboneErr.scala 21:16]
    else : @[WishboneErr.scala 35:16]
      dataReg <= UInt<1>("h00") @[WishboneErr.scala 37:13]
      errReg <= UInt<1>("h00") @[WishboneErr.scala 38:12]
      validReg <= UInt<1>("h00") @[WishboneErr.scala 39:14]
      skip @[WishboneErr.scala 35:16]
    io.wbSlaveTransmitter.valid <= validReg @[WishboneErr.scala 42:31]
    io.wbSlaveTransmitter.bits.ack <= ackReg @[WishboneErr.scala 43:34]
    io.wbSlaveTransmitter.bits.dat <= dataReg @[WishboneErr.scala 44:34]
    io.wbSlaveTransmitter.bits.err <= errReg @[WishboneErr.scala 45:35]
    
  module InstructionFetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, instruction : UInt<32>, coreInstrReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip coreInstrResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.coreInstrResp.ready <= UInt<1>("h01") @[InstructionFetch.scala 17:26]
    io.coreInstrReq.bits.activeByteLane <= UInt<4>("h0f") @[InstructionFetch.scala 19:39]
    io.coreInstrReq.bits.isWrite <= UInt<1>("h00") @[InstructionFetch.scala 20:32]
    io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 21:36]
    io.coreInstrReq.bits.addrRequest <= io.address @[InstructionFetch.scala 23:36]
    node _T = mux(io.coreInstrReq.ready, UInt<1>("h01"), UInt<1>("h00")) @[InstructionFetch.scala 24:31]
    io.coreInstrReq.valid <= _T @[InstructionFetch.scala 24:25]
    wire _WIRE : UInt<32> @[InstructionFetch.scala 26:24]
    _WIRE is invalid @[InstructionFetch.scala 26:24]
    node _T_1 = mux(io.coreInstrResp.valid, io.coreInstrResp.bits.dataResponse, _WIRE) @[InstructionFetch.scala 26:24]
    io.instruction <= _T_1 @[InstructionFetch.scala 26:18]
    
  module HazardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_ex_memRead : UInt<1>, flip ex_mem_memRead : UInt<1>, flip id_ex_branch : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip dmem_resp_valid : UInt<1>, flip taken : UInt<1>, flip jump : UInt<2>, flip branch : UInt<1>, if_reg_write : UInt<1>, pc_write : UInt<1>, ctl_mux : UInt<1>, ifid_flush : UInt<1>, take_branch : UInt<1>}
    
    io.ctl_mux <= UInt<1>("h01") @[HazardUnit.scala 26:14]
    io.pc_write <= UInt<1>("h01") @[HazardUnit.scala 27:15]
    io.if_reg_write <= UInt<1>("h01") @[HazardUnit.scala 28:19]
    io.take_branch <= UInt<1>("h01") @[HazardUnit.scala 29:18]
    io.ifid_flush <= UInt<1>("h00") @[HazardUnit.scala 30:17]
    node _T = or(io.id_ex_memRead, io.branch) @[HazardUnit.scala 34:23]
    node _T_1 = eq(io.id_ex_rd, io.id_rs1) @[HazardUnit.scala 35:20]
    node _T_2 = eq(io.id_ex_rd, io.id_rs2) @[HazardUnit.scala 35:49]
    node _T_3 = or(_T_1, _T_2) @[HazardUnit.scala 35:34]
    node _T_4 = and(_T, _T_3) @[HazardUnit.scala 34:37]
    node _T_5 = neq(io.id_ex_rd, UInt<1>("h00")) @[HazardUnit.scala 36:21]
    node _T_6 = neq(io.id_rs1, UInt<1>("h00")) @[HazardUnit.scala 36:42]
    node _T_7 = and(_T_5, _T_6) @[HazardUnit.scala 36:29]
    node _T_8 = neq(io.id_ex_rd, UInt<1>("h00")) @[HazardUnit.scala 37:20]
    node _T_9 = neq(io.id_rs2, UInt<1>("h00")) @[HazardUnit.scala 37:41]
    node _T_10 = and(_T_8, _T_9) @[HazardUnit.scala 37:28]
    node _T_11 = or(_T_7, _T_10) @[HazardUnit.scala 36:51]
    node _T_12 = and(_T_4, _T_11) @[HazardUnit.scala 35:65]
    node _T_13 = eq(io.id_ex_branch, UInt<1>("h00")) @[HazardUnit.scala 38:7]
    node _T_14 = and(_T_12, _T_13) @[HazardUnit.scala 37:51]
    when _T_14 : @[HazardUnit.scala 40:3]
      io.ctl_mux <= UInt<1>("h00") @[HazardUnit.scala 41:16]
      io.pc_write <= UInt<1>("h00") @[HazardUnit.scala 42:17]
      io.if_reg_write <= UInt<1>("h00") @[HazardUnit.scala 43:21]
      io.take_branch <= UInt<1>("h00") @[HazardUnit.scala 44:20]
      skip @[HazardUnit.scala 40:3]
    node _T_15 = and(io.ex_mem_memRead, io.branch) @[HazardUnit.scala 47:26]
    node _T_16 = eq(io.ex_mem_rd, io.id_rs1) @[HazardUnit.scala 47:56]
    node _T_17 = eq(io.ex_mem_rd, io.id_rs2) @[HazardUnit.scala 47:86]
    node _T_18 = or(_T_16, _T_17) @[HazardUnit.scala 47:70]
    node _T_19 = and(_T_15, _T_18) @[HazardUnit.scala 47:39]
    when _T_19 : @[HazardUnit.scala 47:101]
      io.ctl_mux <= UInt<1>("h00") @[HazardUnit.scala 48:16]
      io.pc_write <= UInt<1>("h00") @[HazardUnit.scala 49:17]
      io.if_reg_write <= UInt<1>("h00") @[HazardUnit.scala 50:21]
      io.take_branch <= UInt<1>("h00") @[HazardUnit.scala 51:20]
      skip @[HazardUnit.scala 47:101]
    node _T_20 = neq(io.jump, UInt<1>("h00")) @[HazardUnit.scala 55:28]
    node _T_21 = or(io.taken, _T_20) @[HazardUnit.scala 55:17]
    when _T_21 : @[HazardUnit.scala 55:37]
      io.ifid_flush <= UInt<1>("h01") @[HazardUnit.scala 56:19]
      skip @[HazardUnit.scala 55:37]
    else : @[HazardUnit.scala 57:15]
      io.ifid_flush <= UInt<1>("h00") @[HazardUnit.scala 58:19]
      skip @[HazardUnit.scala 57:15]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, aluSrc : UInt<1>, memToReg : UInt<2>, regWrite : UInt<1>, memRead : UInt<1>, memWrite : UInt<1>, branch : UInt<1>, aluOp : UInt<2>, jump : UInt<2>, aluSrc1 : UInt<2>}
    
    node _T = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h01"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h01"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<2>("h02"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<2>("h02"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h01"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h01"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h01"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h01"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h01"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h01"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h00"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h00"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h00"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h00"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h00"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h00"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h01"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h00"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h00"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h00"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<2>("h02"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h01"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h00"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h00"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h00"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h00"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<2>("h02"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<2>("h02"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<1>("h00"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h01"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<2>("h02"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h00"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h00"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h00"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    io.aluSrc <= signals_0 @[Control.scala 135:13]
    io.memToReg <= signals_1 @[Control.scala 136:15]
    io.regWrite <= signals_2 @[Control.scala 137:15]
    io.memRead <= signals_3 @[Control.scala 138:14]
    io.memWrite <= signals_4 @[Control.scala 139:15]
    io.branch <= signals_5 @[Control.scala 140:13]
    io.jump <= signals_6 @[Control.scala 141:11]
    io.aluOp <= signals_7 @[Control.scala 142:12]
    io.aluSrc1 <= signals_8 @[Control.scala 143:14]
    
  module Registers : 
    input clock : Clock
    input reset : Reset
    output io : {flip readAddress : UInt<5>[2], flip writeEnable : UInt<1>, flip writeAddress : UInt<5>, flip writeData : UInt<32>, readData : UInt<32>[2]}
    
    wire _WIRE : UInt<32>[32] @[Registers.scala 14:28]
    _WIRE[0] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[1] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[2] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[3] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[4] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[5] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[6] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[7] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[8] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[9] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[10] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[11] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[12] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[13] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[14] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[15] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[16] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[17] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[18] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[19] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[20] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[21] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[22] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[23] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[24] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[25] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[26] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[27] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[28] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[29] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[30] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[31] <= UInt<32>("h00") @[Registers.scala 14:28]
    reg reg : UInt<32>[32], clock with : (reset => (reset, _WIRE)) @[Registers.scala 14:20]
    when io.writeEnable : @[Registers.scala 16:24]
      reg[io.writeAddress] <= io.writeData @[Registers.scala 17:26]
      skip @[Registers.scala 16:24]
    node _T = eq(io.readAddress[0], UInt<1>("h00")) @[Registers.scala 20:28]
    when _T : @[Registers.scala 20:37]
      io.readData[0] <= UInt<1>("h00") @[Registers.scala 21:22]
      skip @[Registers.scala 20:37]
    else : @[Registers.scala 22:17]
      io.readData[0] <= reg[io.readAddress[0]] @[Registers.scala 23:22]
      skip @[Registers.scala 22:17]
    node _T_1 = eq(io.readAddress[1], UInt<1>("h00")) @[Registers.scala 20:28]
    when _T_1 : @[Registers.scala 20:37]
      io.readData[1] <= UInt<1>("h00") @[Registers.scala 21:22]
      skip @[Registers.scala 20:37]
    else : @[Registers.scala 22:17]
      io.readData[1] <= reg[io.readAddress[1]] @[Registers.scala 23:22]
      skip @[Registers.scala 22:17]
    
  module ImmediateGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, out : UInt<32>}
    
    node opcode = bits(io.instruction, 6, 0) @[ImmediateGen.scala 11:30]
    node _T = eq(opcode, UInt<2>("h03")) @[ImmediateGen.scala 15:12]
    node _T_1 = eq(opcode, UInt<4>("h0f")) @[ImmediateGen.scala 15:30]
    node _T_2 = or(_T, _T_1) @[ImmediateGen.scala 15:20]
    node _T_3 = eq(opcode, UInt<5>("h013")) @[ImmediateGen.scala 15:49]
    node _T_4 = or(_T_2, _T_3) @[ImmediateGen.scala 15:39]
    node _T_5 = eq(opcode, UInt<5>("h01b")) @[ImmediateGen.scala 15:68]
    node _T_6 = or(_T_4, _T_5) @[ImmediateGen.scala 15:58]
    node _T_7 = eq(opcode, UInt<7>("h067")) @[ImmediateGen.scala 15:87]
    node _T_8 = or(_T_6, _T_7) @[ImmediateGen.scala 15:77]
    node _T_9 = eq(opcode, UInt<7>("h073")) @[ImmediateGen.scala 15:107]
    node _T_10 = or(_T_8, _T_9) @[ImmediateGen.scala 15:97]
    when _T_10 : @[ImmediateGen.scala 16:5]
      node lo = bits(io.instruction, 31, 20) @[ImmediateGen.scala 17:31]
      node _T_11 = bits(lo, 11, 11) @[ImmediateGen.scala 18:35]
      node _T_12 = bits(_T_11, 0, 0) @[Bitwise.scala 72:15]
      node hi = mux(_T_12, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node _T_13 = cat(hi, lo) @[Cat.scala 30:58]
      io.out <= _T_13 @[ImmediateGen.scala 19:12]
      skip @[ImmediateGen.scala 16:5]
    else : @[ImmediateGen.scala 23:51]
      node _T_14 = eq(opcode, UInt<5>("h017")) @[ImmediateGen.scala 23:22]
      node _T_15 = eq(opcode, UInt<6>("h037")) @[ImmediateGen.scala 23:41]
      node _T_16 = or(_T_14, _T_15) @[ImmediateGen.scala 23:31]
      when _T_16 : @[ImmediateGen.scala 23:51]
        node hi_1 = bits(io.instruction, 31, 12) @[ImmediateGen.scala 24:33]
        node lo_1 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_17 = cat(hi_1, lo_1) @[Cat.scala 30:58]
        io.out <= _T_17 @[ImmediateGen.scala 26:14]
        skip @[ImmediateGen.scala 23:51]
      else : @[ImmediateGen.scala 29:32]
        node _T_18 = eq(opcode, UInt<6>("h023")) @[ImmediateGen.scala 29:22]
        when _T_18 : @[ImmediateGen.scala 29:32]
          node hi_2 = bits(io.instruction, 31, 25) @[ImmediateGen.scala 30:37]
          node lo_2 = bits(io.instruction, 11, 7) @[ImmediateGen.scala 30:61]
          node lo_3 = cat(hi_2, lo_2) @[Cat.scala 30:58]
          node _T_19 = bits(lo_3, 11, 11) @[ImmediateGen.scala 31:37]
          node _T_20 = bits(_T_19, 0, 0) @[Bitwise.scala 72:15]
          node hi_3 = mux(_T_20, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node _T_21 = cat(hi_3, lo_3) @[Cat.scala 30:58]
          io.out <= _T_21 @[ImmediateGen.scala 32:14]
          skip @[ImmediateGen.scala 29:32]
        else : @[ImmediateGen.scala 35:32]
          node _T_22 = eq(opcode, UInt<7>("h063")) @[ImmediateGen.scala 35:22]
          when _T_22 : @[ImmediateGen.scala 35:32]
            node hi_hi = bits(io.instruction, 31, 31) @[ImmediateGen.scala 37:23]
            node hi_lo = bits(io.instruction, 7, 7) @[ImmediateGen.scala 38:23]
            node lo_hi = bits(io.instruction, 30, 25) @[ImmediateGen.scala 39:23]
            node lo_lo = bits(io.instruction, 11, 8) @[ImmediateGen.scala 40:23]
            node lo_4 = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
            node hi_4 = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
            node hi_lo_1 = cat(hi_4, lo_4) @[Cat.scala 30:58]
            node _T_23 = bits(hi_lo_1, 11, 11) @[ImmediateGen.scala 42:39]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node hi_hi_1 = mux(_T_24, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
            node hi_5 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
            node _T_25 = cat(hi_5, UInt<1>("h00")) @[Cat.scala 30:58]
            io.out <= _T_25 @[ImmediateGen.scala 43:14]
            skip @[ImmediateGen.scala 35:32]
          else : @[ImmediateGen.scala 47:3]
            node hi_hi_2 = bits(io.instruction, 31, 31) @[ImmediateGen.scala 49:21]
            node hi_lo_2 = bits(io.instruction, 19, 12) @[ImmediateGen.scala 50:21]
            node lo_hi_1 = bits(io.instruction, 20, 20) @[ImmediateGen.scala 51:21]
            node lo_lo_1 = bits(io.instruction, 30, 21) @[ImmediateGen.scala 52:21]
            node lo_5 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
            node hi_6 = cat(hi_hi_2, hi_lo_2) @[Cat.scala 30:58]
            node hi_lo_3 = cat(hi_6, lo_5) @[Cat.scala 30:58]
            node _T_26 = bits(hi_lo_3, 19, 19) @[ImmediateGen.scala 54:37]
            node _T_27 = bits(_T_26, 0, 0) @[Bitwise.scala 72:15]
            node hi_hi_3 = mux(_T_27, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
            node hi_7 = cat(hi_hi_3, hi_lo_3) @[Cat.scala 30:58]
            node _T_28 = cat(hi_7, UInt<1>("h00")) @[Cat.scala 30:58]
            io.out <= _T_28 @[ImmediateGen.scala 55:12]
            skip @[ImmediateGen.scala 47:3]
    
  module BranchUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip funct3 : UInt<3>, flip rd1 : UInt<32>, flip rd2 : UInt<32>, flip take_branch : UInt<1>, taken : UInt<1>}
    
    io.taken is invalid @[BranchUnit.scala 17:12]
    wire check : UInt<1> @[BranchUnit.scala 19:25]
    check is invalid @[BranchUnit.scala 20:9]
    node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.rd1, io.rd2) @[BranchUnit.scala 23:32]
      check <= _T_1 @[BranchUnit.scala 23:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.rd1, io.rd2) @[BranchUnit.scala 24:32]
        check <= _T_3 @[BranchUnit.scala 24:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = asSInt(io.rd1) @[BranchUnit.scala 25:32]
          node _T_6 = asSInt(io.rd2) @[BranchUnit.scala 25:48]
          node _T_7 = lt(_T_5, _T_6) @[BranchUnit.scala 25:39]
          check <= _T_7 @[BranchUnit.scala 25:21]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = asSInt(io.rd1) @[BranchUnit.scala 26:32]
            node _T_10 = asSInt(io.rd2) @[BranchUnit.scala 26:49]
            node _T_11 = geq(_T_9, _T_10) @[BranchUnit.scala 26:39]
            check <= _T_11 @[BranchUnit.scala 26:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              node _T_13 = lt(io.rd1, io.rd2) @[BranchUnit.scala 27:32]
              check <= _T_13 @[BranchUnit.scala 27:21]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = geq(io.rd1, io.rd2) @[BranchUnit.scala 28:32]
                check <= _T_15 @[BranchUnit.scala 28:21]
                skip @[Conditional.scala 39:67]
    node _T_16 = and(check, io.branch) @[BranchUnit.scala 31:21]
    node _T_17 = and(_T_16, io.take_branch) @[BranchUnit.scala 31:33]
    io.taken <= _T_17 @[BranchUnit.scala 31:12]
    
  module InstructionDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_instruction : UInt<32>, flip writeData : UInt<32>, flip writeReg : UInt<5>, flip pcAddress : UInt<32>, flip ctl_writeEnable : UInt<1>, flip id_ex_mem_read : UInt<1>, flip ex_mem_mem_read : UInt<1>, flip dmem_resp_valid : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_ex_branch : UInt<1>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ex_ins : UInt<32>, flip ex_result : UInt<32>, flip ex_mem_result : UInt<32>, flip mem_wb_result : UInt<32>, immediate : UInt<32>, writeRegAddress : UInt<5>, readData1 : UInt<32>, readData2 : UInt<32>, func7 : UInt<7>, func3 : UInt<3>, ctl_aluSrc : UInt<1>, ctl_memToReg : UInt<2>, ctl_regWrite : UInt<1>, ctl_memRead : UInt<1>, ctl_memWrite : UInt<1>, ctl_branch : UInt<1>, ctl_aluOp : UInt<2>, ctl_jump : UInt<2>, ctl_aluSrc1 : UInt<2>, hdu_pcWrite : UInt<1>, hdu_if_reg_write : UInt<1>, pcSrc : UInt<1>, pcPlusOffset : UInt<32>, ifid_flush : UInt<1>}
    
    inst hdu of HazardUnit @[InstructionDecode.scala 51:19]
    hdu.clock <= clock
    hdu.reset <= reset
    hdu.io.dmem_resp_valid <= io.dmem_resp_valid @[InstructionDecode.scala 52:26]
    hdu.io.id_ex_memRead <= io.id_ex_mem_read @[InstructionDecode.scala 53:24]
    hdu.io.ex_mem_memRead <= io.ex_mem_mem_read @[InstructionDecode.scala 55:25]
    hdu.io.id_ex_rd <= io.id_ex_rd @[InstructionDecode.scala 56:19]
    hdu.io.id_ex_branch <= io.id_ex_branch @[InstructionDecode.scala 57:23]
    hdu.io.ex_mem_rd <= io.ex_mem_rd @[InstructionDecode.scala 58:20]
    node _T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 59:37]
    hdu.io.id_rs1 <= _T @[InstructionDecode.scala 59:17]
    node _T_1 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 60:37]
    hdu.io.id_rs2 <= _T_1 @[InstructionDecode.scala 60:17]
    hdu.io.jump <= io.ctl_jump @[InstructionDecode.scala 61:15]
    hdu.io.branch <= io.ctl_branch @[InstructionDecode.scala 62:17]
    io.hdu_pcWrite <= hdu.io.pc_write @[InstructionDecode.scala 63:18]
    io.hdu_if_reg_write <= hdu.io.if_reg_write @[InstructionDecode.scala 64:23]
    inst control of Control @[InstructionDecode.scala 67:23]
    control.clock <= clock
    control.reset <= reset
    control.io.in <= io.id_instruction @[InstructionDecode.scala 68:17]
    io.ctl_aluOp <= control.io.aluOp @[InstructionDecode.scala 69:16]
    io.ctl_aluSrc <= control.io.aluSrc @[InstructionDecode.scala 70:17]
    io.ctl_aluSrc1 <= control.io.aluSrc1 @[InstructionDecode.scala 71:18]
    io.ctl_branch <= control.io.branch @[InstructionDecode.scala 72:17]
    io.ctl_memRead <= control.io.memRead @[InstructionDecode.scala 73:18]
    io.ctl_memToReg <= control.io.memToReg @[InstructionDecode.scala 74:19]
    io.ctl_jump <= control.io.jump @[InstructionDecode.scala 75:15]
    node _T_2 = neq(io.id_instruction, UInt<5>("h013")) @[InstructionDecode.scala 76:44]
    node _T_3 = and(hdu.io.ctl_mux, _T_2) @[InstructionDecode.scala 76:23]
    when _T_3 : @[InstructionDecode.scala 76:57]
      io.ctl_memWrite <= control.io.memWrite @[InstructionDecode.scala 77:21]
      io.ctl_regWrite <= control.io.regWrite @[InstructionDecode.scala 78:21]
      skip @[InstructionDecode.scala 76:57]
    else : @[InstructionDecode.scala 80:15]
      io.ctl_memWrite <= UInt<1>("h00") @[InstructionDecode.scala 81:21]
      io.ctl_regWrite <= UInt<1>("h00") @[InstructionDecode.scala 82:21]
      skip @[InstructionDecode.scala 80:15]
    inst registers of Registers @[InstructionDecode.scala 86:25]
    registers.clock <= clock
    registers.reset <= reset
    node registerRs1 = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 88:38]
    node registerRs2 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 89:38]
    registers.io.readAddress[0] <= registerRs1 @[InstructionDecode.scala 90:31]
    registers.io.readAddress[1] <= registerRs2 @[InstructionDecode.scala 91:31]
    registers.io.writeEnable <= io.ctl_writeEnable @[InstructionDecode.scala 92:28]
    registers.io.writeAddress <= io.writeReg @[InstructionDecode.scala 93:29]
    registers.io.writeData <= io.writeData @[InstructionDecode.scala 94:26]
    node _T_4 = eq(io.writeReg, registerRs1) @[InstructionDecode.scala 97:43]
    node _T_5 = and(io.ctl_writeEnable, _T_4) @[InstructionDecode.scala 97:27]
    when _T_5 : @[InstructionDecode.scala 97:60]
      node _T_6 = eq(registerRs1, UInt<1>("h00")) @[InstructionDecode.scala 98:22]
      when _T_6 : @[InstructionDecode.scala 98:30]
        io.readData1 <= UInt<1>("h00") @[InstructionDecode.scala 99:20]
        skip @[InstructionDecode.scala 98:30]
      else : @[InstructionDecode.scala 100:16]
        io.readData1 <= io.writeData @[InstructionDecode.scala 101:20]
        skip @[InstructionDecode.scala 100:16]
      skip @[InstructionDecode.scala 97:60]
    else : @[InstructionDecode.scala 103:14]
      io.readData1 <= registers.io.readData[0] @[InstructionDecode.scala 104:18]
      skip @[InstructionDecode.scala 103:14]
    node _T_7 = eq(io.writeReg, registerRs2) @[InstructionDecode.scala 106:43]
    node _T_8 = and(io.ctl_writeEnable, _T_7) @[InstructionDecode.scala 106:27]
    when _T_8 : @[InstructionDecode.scala 106:60]
      node _T_9 = eq(registerRs2, UInt<1>("h00")) @[InstructionDecode.scala 107:22]
      when _T_9 : @[InstructionDecode.scala 107:30]
        io.readData2 <= UInt<1>("h00") @[InstructionDecode.scala 108:20]
        skip @[InstructionDecode.scala 107:30]
      else : @[InstructionDecode.scala 109:16]
        io.readData2 <= io.writeData @[InstructionDecode.scala 110:20]
        skip @[InstructionDecode.scala 109:16]
      skip @[InstructionDecode.scala 106:60]
    else : @[InstructionDecode.scala 112:14]
      io.readData2 <= registers.io.readData[1] @[InstructionDecode.scala 113:18]
      skip @[InstructionDecode.scala 112:14]
    inst immediate of ImmediateGen @[InstructionDecode.scala 117:25]
    immediate.clock <= clock
    immediate.reset <= reset
    immediate.io.instruction <= io.id_instruction @[InstructionDecode.scala 118:28]
    io.immediate <= immediate.io.out @[InstructionDecode.scala 119:16]
    wire input1 : UInt<32> @[InstructionDecode.scala 122:20]
    wire input2 : UInt<32> @[InstructionDecode.scala 123:20]
    node _T_10 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 125:37]
    node _T_11 = eq(registerRs1, _T_10) @[InstructionDecode.scala 125:20]
    when _T_11 : @[InstructionDecode.scala 125:46]
      input1 <= io.ex_mem_result @[InstructionDecode.scala 126:12]
      skip @[InstructionDecode.scala 125:46]
    else : @[InstructionDecode.scala 127:52]
      node _T_12 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 127:43]
      node _T_13 = eq(registerRs1, _T_12) @[InstructionDecode.scala 127:26]
      when _T_13 : @[InstructionDecode.scala 127:52]
        input1 <= io.mem_wb_result @[InstructionDecode.scala 128:14]
        skip @[InstructionDecode.scala 127:52]
      else : @[InstructionDecode.scala 130:16]
        input1 <= io.readData1 @[InstructionDecode.scala 131:14]
        skip @[InstructionDecode.scala 130:16]
    node _T_14 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 133:37]
    node _T_15 = eq(registerRs2, _T_14) @[InstructionDecode.scala 133:20]
    when _T_15 : @[InstructionDecode.scala 133:46]
      input2 <= io.ex_mem_result @[InstructionDecode.scala 134:12]
      skip @[InstructionDecode.scala 133:46]
    else : @[InstructionDecode.scala 135:52]
      node _T_16 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 135:43]
      node _T_17 = eq(registerRs2, _T_16) @[InstructionDecode.scala 135:26]
      when _T_17 : @[InstructionDecode.scala 135:52]
        input2 <= io.mem_wb_result @[InstructionDecode.scala 136:14]
        skip @[InstructionDecode.scala 135:52]
      else : @[InstructionDecode.scala 138:16]
        input2 <= io.readData2 @[InstructionDecode.scala 139:14]
        skip @[InstructionDecode.scala 138:16]
    inst bu of BranchUnit @[InstructionDecode.scala 143:18]
    bu.clock <= clock
    bu.reset <= reset
    bu.io.branch <= io.ctl_branch @[InstructionDecode.scala 144:16]
    node _T_18 = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 145:36]
    bu.io.funct3 <= _T_18 @[InstructionDecode.scala 145:16]
    bu.io.rd1 <= input1 @[InstructionDecode.scala 146:13]
    bu.io.rd2 <= input2 @[InstructionDecode.scala 147:13]
    bu.io.take_branch <= hdu.io.take_branch @[InstructionDecode.scala 148:21]
    hdu.io.taken <= bu.io.taken @[InstructionDecode.scala 149:16]
    wire j_offset : UInt<32> @[InstructionDecode.scala 152:22]
    node _T_19 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 153:35]
    node _T_20 = eq(registerRs1, _T_19) @[InstructionDecode.scala 153:22]
    when _T_20 : @[InstructionDecode.scala 153:43]
      j_offset <= io.ex_result @[InstructionDecode.scala 154:16]
      skip @[InstructionDecode.scala 153:43]
    else : @[InstructionDecode.scala 155:54]
      node _T_21 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 155:45]
      node _T_22 = eq(registerRs1, _T_21) @[InstructionDecode.scala 155:28]
      when _T_22 : @[InstructionDecode.scala 155:54]
        j_offset <= io.ex_mem_result @[InstructionDecode.scala 156:14]
        skip @[InstructionDecode.scala 155:54]
      else : @[InstructionDecode.scala 157:52]
        node _T_23 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 157:43]
        node _T_24 = eq(registerRs1, _T_23) @[InstructionDecode.scala 157:26]
        when _T_24 : @[InstructionDecode.scala 157:52]
          j_offset <= io.mem_wb_result @[InstructionDecode.scala 158:14]
          skip @[InstructionDecode.scala 157:52]
        else : @[InstructionDecode.scala 159:47]
          node _T_25 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 159:39]
          node _T_26 = eq(registerRs1, _T_25) @[InstructionDecode.scala 159:26]
          when _T_26 : @[InstructionDecode.scala 159:47]
            j_offset <= io.ex_result @[InstructionDecode.scala 160:14]
            skip @[InstructionDecode.scala 159:47]
          else : @[InstructionDecode.scala 161:15]
            j_offset <= io.readData1 @[InstructionDecode.scala 162:16]
            skip @[InstructionDecode.scala 161:15]
    node _T_27 = eq(io.ctl_jump, UInt<1>("h01")) @[InstructionDecode.scala 166:20]
    when _T_27 : @[InstructionDecode.scala 166:29]
      node _T_28 = add(io.pcAddress, io.immediate) @[InstructionDecode.scala 167:37]
      node _T_29 = tail(_T_28, 1) @[InstructionDecode.scala 167:37]
      io.pcPlusOffset <= _T_29 @[InstructionDecode.scala 167:21]
      skip @[InstructionDecode.scala 166:29]
    else : @[InstructionDecode.scala 168:35]
      node _T_30 = eq(io.ctl_jump, UInt<2>("h02")) @[InstructionDecode.scala 168:26]
      when _T_30 : @[InstructionDecode.scala 168:35]
        node _T_31 = add(j_offset, io.immediate) @[InstructionDecode.scala 169:35]
        node _T_32 = tail(_T_31, 1) @[InstructionDecode.scala 169:35]
        io.pcPlusOffset <= _T_32 @[InstructionDecode.scala 169:23]
        skip @[InstructionDecode.scala 168:35]
      else : @[InstructionDecode.scala 171:16]
        node _T_33 = add(io.pcAddress, immediate.io.out) @[InstructionDecode.scala 172:39]
        node _T_34 = tail(_T_33, 1) @[InstructionDecode.scala 172:39]
        io.pcPlusOffset <= _T_34 @[InstructionDecode.scala 172:23]
        skip @[InstructionDecode.scala 171:16]
    node _T_35 = neq(io.ctl_jump, UInt<1>("h00")) @[InstructionDecode.scala 175:35]
    node _T_36 = or(bu.io.taken, _T_35) @[InstructionDecode.scala 175:20]
    when _T_36 : @[InstructionDecode.scala 175:44]
      io.pcSrc <= UInt<1>("h01") @[InstructionDecode.scala 176:14]
      skip @[InstructionDecode.scala 175:44]
    else : @[InstructionDecode.scala 177:15]
      io.pcSrc <= UInt<1>("h00") @[InstructionDecode.scala 178:14]
      skip @[InstructionDecode.scala 177:15]
    io.ifid_flush <= hdu.io.ifid_flush @[InstructionDecode.scala 182:17]
    node _T_37 = bits(io.id_instruction, 11, 7) @[InstructionDecode.scala 184:42]
    io.writeRegAddress <= _T_37 @[InstructionDecode.scala 184:22]
    node _T_38 = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 185:32]
    io.func3 <= _T_38 @[InstructionDecode.scala 185:12]
    node _T_39 = bits(io.id_instruction, 31, 25) @[InstructionDecode.scala 186:32]
    io.func7 <= _T_39 @[InstructionDecode.scala 186:12]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip input1 : UInt<32>, flip input2 : UInt<32>, flip aluCtl : UInt<4>, zero : UInt<1>, result : UInt<32>}
    
    node _T = eq(io.aluCtl, UInt<1>("h00")) @[ALU.scala 17:18]
    node _T_1 = and(io.input1, io.input2) @[ALU.scala 17:41]
    node _T_2 = eq(io.aluCtl, UInt<1>("h01")) @[ALU.scala 18:18]
    node _T_3 = or(io.input1, io.input2) @[ALU.scala 18:41]
    node _T_4 = eq(io.aluCtl, UInt<2>("h02")) @[ALU.scala 19:18]
    node _T_5 = add(io.input1, io.input2) @[ALU.scala 19:41]
    node _T_6 = tail(_T_5, 1) @[ALU.scala 19:41]
    node _T_7 = eq(io.aluCtl, UInt<2>("h03")) @[ALU.scala 20:18]
    node _T_8 = sub(io.input1, io.input2) @[ALU.scala 20:41]
    node _T_9 = tail(_T_8, 1) @[ALU.scala 20:41]
    node _T_10 = eq(io.aluCtl, UInt<3>("h04")) @[ALU.scala 21:18]
    node _T_11 = asSInt(io.input1) @[ALU.scala 21:41]
    node _T_12 = asSInt(io.input2) @[ALU.scala 21:60]
    node _T_13 = lt(_T_11, _T_12) @[ALU.scala 21:48]
    node _T_14 = eq(io.aluCtl, UInt<3>("h05")) @[ALU.scala 22:18]
    node _T_15 = lt(io.input1, io.input2) @[ALU.scala 22:41]
    node _T_16 = eq(io.aluCtl, UInt<3>("h06")) @[ALU.scala 23:18]
    node _T_17 = bits(io.input2, 4, 0) @[ALU.scala 23:53]
    node _T_18 = dshl(io.input1, _T_17) @[ALU.scala 23:41]
    node _T_19 = eq(io.aluCtl, UInt<3>("h07")) @[ALU.scala 24:18]
    node _T_20 = bits(io.input2, 4, 0) @[ALU.scala 24:53]
    node _T_21 = dshr(io.input1, _T_20) @[ALU.scala 24:41]
    node _T_22 = eq(io.aluCtl, UInt<4>("h08")) @[ALU.scala 25:18]
    node _T_23 = asSInt(io.input1) @[ALU.scala 25:41]
    node _T_24 = bits(io.input2, 4, 0) @[ALU.scala 25:60]
    node _T_25 = dshr(_T_23, _T_24) @[ALU.scala 25:48]
    node _T_26 = asUInt(_T_25) @[ALU.scala 25:68]
    node _T_27 = eq(io.aluCtl, UInt<4>("h09")) @[ALU.scala 26:18]
    node _T_28 = xor(io.input1, io.input2) @[ALU.scala 26:41]
    node _T_29 = mux(_T_27, _T_28, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_30 = mux(_T_22, _T_26, _T_29) @[Mux.scala 98:16]
    node _T_31 = mux(_T_19, _T_21, _T_30) @[Mux.scala 98:16]
    node _T_32 = mux(_T_16, _T_18, _T_31) @[Mux.scala 98:16]
    node _T_33 = mux(_T_14, _T_15, _T_32) @[Mux.scala 98:16]
    node _T_34 = mux(_T_10, _T_13, _T_33) @[Mux.scala 98:16]
    node _T_35 = mux(_T_7, _T_9, _T_34) @[Mux.scala 98:16]
    node _T_36 = mux(_T_4, _T_6, _T_35) @[Mux.scala 98:16]
    node _T_37 = mux(_T_2, _T_3, _T_36) @[Mux.scala 98:16]
    node _T_38 = mux(_T, _T_1, _T_37) @[Mux.scala 98:16]
    io.result <= _T_38 @[ALU.scala 14:13]
    io.zero is invalid @[ALU.scala 29:11]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<2>, flip f7 : UInt<1>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, out : UInt<4>}
    
    io.out <= UInt<4>("h0f") @[AluControl.scala 31:10]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[AluControl.scala 33:17]
    when _T : @[AluControl.scala 33:26]
      io.out <= UInt<2>("h02") @[AluControl.scala 34:12]
      skip @[AluControl.scala 33:26]
    else : @[AluControl.scala 35:15]
      node _T_1 = eq(UInt<1>("h00"), io.f3) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 40:58]
        node _T_2 = eq(io.aluSrc, UInt<1>("h00")) @[AluControl.scala 38:14]
        node _T_3 = eq(io.f7, UInt<1>("h00")) @[AluControl.scala 38:34]
        node _T_4 = or(_T_2, _T_3) @[AluControl.scala 38:25]
        when _T_4 : @[AluControl.scala 38:43]
          io.out <= UInt<2>("h02") @[AluControl.scala 39:18]
          skip @[AluControl.scala 38:43]
        else : @[AluControl.scala 41:22]
          io.out <= UInt<2>("h03") @[AluControl.scala 42:20]
          skip @[AluControl.scala 41:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<1>("h01"), io.f3) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          io.out <= UInt<3>("h06") @[AluControl.scala 46:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<2>("h02"), io.f3) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            io.out <= UInt<3>("h04") @[AluControl.scala 49:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_7 = eq(UInt<2>("h03"), io.f3) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              io.out <= UInt<3>("h05") @[AluControl.scala 52:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_8 = eq(UInt<3>("h05"), io.f3) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = eq(io.f7, UInt<1>("h00")) @[AluControl.scala 55:20]
                when _T_9 : @[AluControl.scala 55:29]
                  io.out <= UInt<3>("h07") @[AluControl.scala 56:18]
                  skip @[AluControl.scala 55:29]
                else : @[AluControl.scala 57:21]
                  io.out <= UInt<4>("h08") @[AluControl.scala 58:18]
                  skip @[AluControl.scala 57:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_10 = eq(UInt<3>("h07"), io.f3) @[Conditional.scala 37:30]
                when _T_10 : @[Conditional.scala 39:67]
                  io.out <= UInt<1>("h00") @[AluControl.scala 62:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_11 = eq(UInt<3>("h06"), io.f3) @[Conditional.scala 37:30]
                  when _T_11 : @[Conditional.scala 39:67]
                    io.out <= UInt<1>("h01") @[AluControl.scala 65:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_12 = eq(UInt<3>("h04"), io.f3) @[Conditional.scala 37:30]
                    when _T_12 : @[Conditional.scala 39:67]
                      io.out <= UInt<4>("h09") @[AluControl.scala 68:16]
                      skip @[Conditional.scala 39:67]
      skip @[AluControl.scala 35:15]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip ex_reg_rd : UInt<5>, flip mem_reg_rd : UInt<5>, flip reg_rs1 : UInt<5>, flip reg_rs2 : UInt<5>, flip ex_regWrite : UInt<1>, flip mem_regWrite : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    io.forwardA is invalid @[ForwardingUnit.scala 18:15]
    io.forwardB is invalid @[ForwardingUnit.scala 19:15]
    node _T = eq(io.reg_rs1, io.ex_reg_rd) @[ForwardingUnit.scala 21:19]
    node _T_1 = neq(io.ex_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 21:52]
    node _T_2 = and(_T, _T_1) @[ForwardingUnit.scala 21:36]
    node _T_3 = and(_T_2, io.ex_regWrite) @[ForwardingUnit.scala 21:60]
    when _T_3 : @[ForwardingUnit.scala 21:79]
      io.forwardA <= UInt<1>("h01") @[ForwardingUnit.scala 22:17]
      skip @[ForwardingUnit.scala 21:79]
    else : @[ForwardingUnit.scala 25:7]
      node _T_4 = eq(io.reg_rs1, io.mem_reg_rd) @[ForwardingUnit.scala 24:18]
      node _T_5 = neq(io.mem_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 24:53]
      node _T_6 = and(_T_4, _T_5) @[ForwardingUnit.scala 24:36]
      node _T_7 = and(_T_6, io.mem_regWrite) @[ForwardingUnit.scala 24:61]
      when _T_7 : @[ForwardingUnit.scala 25:7]
        io.forwardA <= UInt<2>("h02") @[ForwardingUnit.scala 26:19]
        skip @[ForwardingUnit.scala 25:7]
      else : @[ForwardingUnit.scala 28:16]
        io.forwardA <= UInt<1>("h00") @[ForwardingUnit.scala 29:19]
        skip @[ForwardingUnit.scala 28:16]
    node _T_8 = eq(io.reg_rs2, io.ex_reg_rd) @[ForwardingUnit.scala 32:19]
    node _T_9 = neq(io.ex_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 32:52]
    node _T_10 = and(_T_8, _T_9) @[ForwardingUnit.scala 32:36]
    node _T_11 = and(_T_10, io.ex_regWrite) @[ForwardingUnit.scala 32:60]
    when _T_11 : @[ForwardingUnit.scala 32:79]
      io.forwardB <= UInt<1>("h01") @[ForwardingUnit.scala 33:17]
      skip @[ForwardingUnit.scala 32:79]
    else : @[ForwardingUnit.scala 36:7]
      node _T_12 = eq(io.reg_rs2, io.mem_reg_rd) @[ForwardingUnit.scala 35:18]
      node _T_13 = neq(io.mem_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 35:53]
      node _T_14 = and(_T_12, _T_13) @[ForwardingUnit.scala 35:36]
      node _T_15 = and(_T_14, io.mem_regWrite) @[ForwardingUnit.scala 35:61]
      when _T_15 : @[ForwardingUnit.scala 36:7]
        io.forwardB <= UInt<2>("h02") @[ForwardingUnit.scala 37:19]
        skip @[ForwardingUnit.scala 36:7]
      else : @[ForwardingUnit.scala 39:16]
        io.forwardB <= UInt<1>("h00") @[ForwardingUnit.scala 40:19]
        skip @[ForwardingUnit.scala 39:16]
    
  module MDU : 
    input clock : Clock
    input reset : Reset
    output io : {flip src_a : SInt<32>, flip src_b : SInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : {valid : UInt<1>, bits : SInt<32>}}
    
    node _T = eq(io.op, UInt<1>("h00")) @[MDU.scala 18:30]
    node _T_1 = eq(io.op, UInt<1>("h01")) @[MDU.scala 18:47]
    node _T_2 = or(_T, _T_1) @[MDU.scala 18:38]
    node _T_3 = mul(io.src_a, io.src_b) @[MDU.scala 18:78]
    node _T_4 = eq(io.op, UInt<2>("h02")) @[MDU.scala 19:28]
    node _T_5 = asUInt(io.src_b) @[MDU.scala 19:90]
    node _T_6 = asSInt(_T_5) @[MDU.scala 19:98]
    node _T_7 = mul(io.src_a, _T_6) @[MDU.scala 19:78]
    node _T_8 = eq(io.op, UInt<2>("h03")) @[MDU.scala 20:28]
    node _T_9 = asUInt(io.src_a) @[MDU.scala 20:79]
    node _T_10 = asUInt(io.src_b) @[MDU.scala 20:97]
    node _T_11 = mul(_T_9, _T_10) @[MDU.scala 20:86]
    node _T_12 = asSInt(_T_11) @[MDU.scala 20:105]
    wire out_wire : SInt<64> @[MDU.scala 22:24]
    node _T_13 = mux(_T_8, _T_12, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _T_14 = mux(_T_4, _T_7, _T_13) @[Mux.scala 98:16]
    node _T_15 = mux(_T_2, _T_3, _T_14) @[Mux.scala 98:16]
    out_wire <= _T_15 @[MDU.scala 23:14]
    reg r_ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[MDU.scala 26:29]
    reg r_counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h020"))) @[MDU.scala 27:29]
    reg r_dividend : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MDU.scala 28:29]
    reg r_quotient : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MDU.scala 29:29]
    io.output.valid <= UInt<1>("h00") @[MDU.scala 31:21]
    node _T_16 = eq(io.op, UInt<3>("h05")) @[MDU.scala 34:16]
    node _T_17 = eq(io.op, UInt<3>("h07")) @[MDU.scala 34:33]
    node _T_18 = or(_T_16, _T_17) @[MDU.scala 34:24]
    when _T_18 : @[MDU.scala 34:41]
      node _T_19 = asUInt(io.src_a) @[MDU.scala 35:43]
      wire _WIRE : UInt
      _WIRE <= _T_19
      node _T_20 = asUInt(io.src_b) @[MDU.scala 36:43]
      wire _WIRE_1 : UInt
      _WIRE_1 <= _T_20
      node _T_21 = eq(io.valid, UInt<1>("h01")) @[MDU.scala 37:23]
      when _T_21 : @[MDU.scala 37:32]
        r_ready <= UInt<1>("h00") @[MDU.scala 38:24]
        r_counter <= UInt<6>("h020") @[MDU.scala 39:24]
        r_dividend <= _WIRE @[MDU.scala 40:24]
        r_quotient <= UInt<1>("h00") @[MDU.scala 41:24]
        skip @[MDU.scala 37:32]
      else : @[MDU.scala 42:38]
        node _T_22 = neq(r_counter, UInt<1>("h00")) @[MDU.scala 42:30]
        when _T_22 : @[MDU.scala 42:38]
          node _T_23 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 43:52]
          node _T_24 = tail(_T_23, 1) @[MDU.scala 43:52]
          node _T_25 = dshl(_WIRE_1, _T_24) @[MDU.scala 43:40]
          node _T_26 = geq(r_dividend, _T_25) @[MDU.scala 43:29]
          when _T_26 : @[MDU.scala 43:59]
            node _T_27 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 44:63]
            node _T_28 = tail(_T_27, 1) @[MDU.scala 44:63]
            node _T_29 = dshl(_WIRE_1, _T_28) @[MDU.scala 44:51]
            node _T_30 = sub(r_dividend, _T_29) @[MDU.scala 44:41]
            node _T_31 = tail(_T_30, 1) @[MDU.scala 44:41]
            r_dividend <= _T_31 @[MDU.scala 44:27]
            node _T_32 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 45:59]
            node _T_33 = tail(_T_32, 1) @[MDU.scala 45:59]
            node _T_34 = dshl(UInt<1>("h01"), _T_33) @[MDU.scala 45:47]
            node _T_35 = add(r_quotient, _T_34) @[MDU.scala 45:41]
            node _T_36 = tail(_T_35, 1) @[MDU.scala 45:41]
            r_quotient <= _T_36 @[MDU.scala 45:27]
            skip @[MDU.scala 43:59]
          else : @[MDU.scala 46:25]
            r_ready <= UInt<1>("h01") @[MDU.scala 46:34]
            skip @[MDU.scala 46:25]
          node _T_37 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 47:37]
          node _T_38 = tail(_T_37, 1) @[MDU.scala 47:37]
          r_counter <= _T_38 @[MDU.scala 47:24]
          node _T_39 = eq(r_counter, UInt<1>("h01")) @[MDU.scala 48:38]
          r_ready <= _T_39 @[MDU.scala 48:24]
          skip @[MDU.scala 42:38]
        else : @[MDU.scala 49:20]
          io.output.valid <= UInt<1>("h01") @[MDU.scala 49:37]
          skip @[MDU.scala 49:20]
      skip @[MDU.scala 34:41]
    io.ready <= r_ready @[MDU.scala 52:18]
    node _T_40 = eq(io.op, UInt<1>("h00")) @[MDU.scala 53:16]
    when _T_40 : @[MDU.scala 53:24]
      node _T_41 = bits(out_wire, 31, 0) @[MDU.scala 54:35]
      node _T_42 = asSInt(_T_41) @[MDU.scala 54:42]
      io.output.bits <= _T_42 @[MDU.scala 54:24]
      io.output.valid <= UInt<1>("h01") @[MDU.scala 55:25]
      skip @[MDU.scala 53:24]
    else : @[MDU.scala 56:81]
      node _T_43 = eq(io.op, UInt<1>("h01")) @[MDU.scala 56:22]
      node _T_44 = eq(io.op, UInt<1>("h01")) @[MDU.scala 56:39]
      node _T_45 = and(_T_43, _T_44) @[MDU.scala 56:30]
      node _T_46 = eq(io.op, UInt<2>("h02")) @[MDU.scala 56:56]
      node _T_47 = and(_T_45, _T_46) @[MDU.scala 56:47]
      node _T_48 = eq(io.op, UInt<2>("h03")) @[MDU.scala 56:73]
      node _T_49 = and(_T_47, _T_48) @[MDU.scala 56:64]
      when _T_49 : @[MDU.scala 56:81]
        node _T_50 = bits(out_wire, 63, 32) @[MDU.scala 57:35]
        node _T_51 = asSInt(_T_50) @[MDU.scala 57:43]
        io.output.bits <= _T_51 @[MDU.scala 57:24]
        io.output.valid <= UInt<1>("h01") @[MDU.scala 58:25]
        skip @[MDU.scala 56:81]
      else : @[MDU.scala 59:30]
        node _T_52 = eq(io.op, UInt<3>("h05")) @[MDU.scala 59:22]
        when _T_52 : @[MDU.scala 59:30]
          node _T_53 = asSInt(r_quotient) @[MDU.scala 60:38]
          io.output.bits <= _T_53 @[MDU.scala 60:24]
          skip @[MDU.scala 59:30]
        else : @[MDU.scala 61:30]
          node _T_54 = eq(io.op, UInt<3>("h07")) @[MDU.scala 61:22]
          when _T_54 : @[MDU.scala 61:30]
            node _T_55 = asSInt(r_dividend) @[MDU.scala 62:38]
            io.output.bits <= _T_55 @[MDU.scala 62:24]
            skip @[MDU.scala 61:30]
          else : @[MDU.scala 63:16]
            io.output.bits <= asSInt(UInt<1>("h00")) @[MDU.scala 64:24]
            skip @[MDU.scala 63:16]
    
  module MduControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<2>, flip f7 : UInt<7>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, op : UInt<4>}
    
    node _T = eq(io.f7, UInt<1>("h01")) @[MduControl.scala 15:14]
    node _T_1 = eq(io.f3, UInt<1>("h00")) @[MduControl.scala 15:32]
    node _T_2 = eq(io.f3, UInt<1>("h01")) @[MduControl.scala 15:49]
    node _T_3 = or(_T_1, _T_2) @[MduControl.scala 15:40]
    node _T_4 = eq(io.f3, UInt<2>("h02")) @[MduControl.scala 15:66]
    node _T_5 = or(_T_3, _T_4) @[MduControl.scala 15:57]
    node _T_6 = eq(io.f3, UInt<2>("h03")) @[MduControl.scala 15:83]
    node _T_7 = or(_T_5, _T_6) @[MduControl.scala 15:74]
    node _T_8 = eq(io.f3, UInt<3>("h04")) @[MduControl.scala 15:100]
    node _T_9 = or(_T_7, _T_8) @[MduControl.scala 15:91]
    node _T_10 = eq(io.f3, UInt<3>("h05")) @[MduControl.scala 15:117]
    node _T_11 = or(_T_9, _T_10) @[MduControl.scala 15:108]
    node _T_12 = eq(io.f3, UInt<3>("h06")) @[MduControl.scala 15:134]
    node _T_13 = or(_T_11, _T_12) @[MduControl.scala 15:125]
    node _T_14 = eq(io.f3, UInt<3>("h07")) @[MduControl.scala 15:151]
    node _T_15 = or(_T_13, _T_14) @[MduControl.scala 15:142]
    node _T_16 = and(_T, _T_15) @[MduControl.scala 15:22]
    when _T_16 : @[MduControl.scala 15:160]
      io.op <= io.f3 @[MduControl.scala 16:13]
      skip @[MduControl.scala 15:160]
    else : @[MduControl.scala 18:13]
      io.op <= io.aluOp @[MduControl.scala 19:13]
      skip @[MduControl.scala 18:13]
    
  module Execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip immediate : UInt<32>, flip readData1 : UInt<32>, flip readData2 : UInt<32>, flip pcAddress : UInt<32>, flip func7 : UInt<7>, flip func3 : UInt<3>, flip mem_result : UInt<32>, flip wb_result : UInt<32>, flip ex_mem_regWrite : UInt<1>, flip mem_wb_regWrite : UInt<1>, flip id_ex_ins : UInt<32>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ctl_aluSrc : UInt<1>, flip ctl_aluOp : UInt<2>, flip ctl_aluSrc1 : UInt<2>, writeData : UInt<32>, ALUresult : UInt<32>}
    
    inst alu of ALU @[Execute.scala 31:19]
    alu.clock <= clock
    alu.reset <= reset
    inst aluCtl of AluControl @[Execute.scala 32:22]
    aluCtl.clock <= clock
    aluCtl.reset <= reset
    inst ForwardingUnit of ForwardingUnit @[Execute.scala 33:18]
    ForwardingUnit.clock <= clock
    ForwardingUnit.reset <= reset
    ForwardingUnit.io.ex_regWrite <= io.ex_mem_regWrite @[Execute.scala 37:18]
    ForwardingUnit.io.mem_regWrite <= io.mem_wb_regWrite @[Execute.scala 38:19]
    node _T = bits(io.ex_mem_ins, 11, 7) @[Execute.scala 39:32]
    ForwardingUnit.io.ex_reg_rd <= _T @[Execute.scala 39:16]
    node _T_1 = bits(io.mem_wb_ins, 11, 7) @[Execute.scala 40:33]
    ForwardingUnit.io.mem_reg_rd <= _T_1 @[Execute.scala 40:17]
    node _T_2 = bits(io.id_ex_ins, 19, 15) @[Execute.scala 41:29]
    ForwardingUnit.io.reg_rs1 <= _T_2 @[Execute.scala 41:14]
    node _T_3 = bits(io.id_ex_ins, 24, 20) @[Execute.scala 42:29]
    ForwardingUnit.io.reg_rs2 <= _T_3 @[Execute.scala 42:14]
    node _T_4 = eq(ForwardingUnit.io.forwardA, UInt<1>("h00")) @[Execute.scala 47:20]
    node _T_5 = eq(ForwardingUnit.io.forwardA, UInt<1>("h01")) @[Execute.scala 48:20]
    node _T_6 = eq(ForwardingUnit.io.forwardA, UInt<2>("h02")) @[Execute.scala 49:20]
    node _T_7 = mux(_T_6, io.wb_result, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_8 = mux(_T_5, io.mem_result, _T_7) @[Mux.scala 98:16]
    node inputMux1 = mux(_T_4, io.readData1, _T_8) @[Mux.scala 98:16]
    node _T_9 = eq(ForwardingUnit.io.forwardB, UInt<1>("h00")) @[Execute.scala 55:20]
    node _T_10 = eq(ForwardingUnit.io.forwardB, UInt<1>("h01")) @[Execute.scala 56:20]
    node _T_11 = eq(ForwardingUnit.io.forwardB, UInt<2>("h02")) @[Execute.scala 57:20]
    node _T_12 = mux(_T_11, io.wb_result, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_13 = mux(_T_10, io.mem_result, _T_12) @[Mux.scala 98:16]
    node inputMux2 = mux(_T_9, io.readData2, _T_13) @[Mux.scala 98:16]
    node _T_14 = eq(io.ctl_aluSrc1, UInt<1>("h01")) @[Execute.scala 64:23]
    node _T_15 = eq(io.ctl_aluSrc1, UInt<2>("h02")) @[Execute.scala 65:23]
    node _T_16 = mux(_T_15, UInt<1>("h00"), inputMux1) @[Mux.scala 98:16]
    node aluIn1 = mux(_T_14, io.pcAddress, _T_16) @[Mux.scala 98:16]
    node aluIn2 = mux(io.ctl_aluSrc, inputMux2, io.immediate) @[Execute.scala 68:19]
    aluCtl.io.f3 <= io.func3 @[Execute.scala 70:16]
    node _T_17 = bits(io.func7, 5, 5) @[Execute.scala 71:27]
    aluCtl.io.f7 <= _T_17 @[Execute.scala 71:16]
    aluCtl.io.aluOp <= io.ctl_aluOp @[Execute.scala 72:19]
    aluCtl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 73:20]
    alu.io.input1 <= aluIn1 @[Execute.scala 75:17]
    alu.io.input2 <= aluIn2 @[Execute.scala 76:17]
    alu.io.aluCtl <= aluCtl.io.out @[Execute.scala 77:17]
    inst MDU of MDU @[Execute.scala 80:22]
    MDU.clock <= clock
    MDU.reset <= reset
    inst MduControl of MduControl @[Execute.scala 81:24]
    MduControl.clock <= clock
    MduControl.reset <= reset
    MduControl.io.f3 <= io.func3 @[Execute.scala 83:18]
    MduControl.io.f7 <= io.func7 @[Execute.scala 84:18]
    MduControl.io.aluOp <= io.ctl_aluOp @[Execute.scala 85:21]
    MduControl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 86:22]
    node _T_18 = asSInt(aluIn1) @[Execute.scala 88:28]
    MDU.io.src_a <= _T_18 @[Execute.scala 88:18]
    node _T_19 = asSInt(aluIn2) @[Execute.scala 89:28]
    MDU.io.src_b <= _T_19 @[Execute.scala 89:18]
    MDU.io.op <= MduControl.io.op @[Execute.scala 90:15]
    MDU.io.valid <= UInt<1>("h01") @[Execute.scala 91:18]
    node _T_20 = eq(io.func7, UInt<1>("h01")) @[Execute.scala 93:20]
    node _T_21 = and(_T_20, MDU.io.ready) @[Execute.scala 93:28]
    when _T_21 : @[Execute.scala 93:44]
      node _T_22 = mux(MDU.io.output.valid, MDU.io.output.bits, asSInt(UInt<1>("h00"))) @[Execute.scala 93:65]
      node _T_23 = asUInt(_T_22) @[Execute.scala 93:113]
      io.ALUresult <= _T_23 @[Execute.scala 93:58]
      skip @[Execute.scala 93:44]
    else : @[Execute.scala 94:15]
      io.ALUresult <= alu.io.result @[Execute.scala 94:29]
      skip @[Execute.scala 94:15]
    io.writeData <= inputMux2 @[Execute.scala 99:16]
    
  module MemoryFetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluResultIn : UInt<32>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, readData : UInt<32>, stall : UInt<1>, dccmReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dccmRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.dccmRsp.ready <= UInt<1>("h01") @[MemoryFetch.scala 27:20]
    io.dccmReq.bits.activeByteLane <= UInt<4>("h0f") @[MemoryFetch.scala 29:34]
    io.dccmReq.bits.dataRequest <= io.writeData @[MemoryFetch.scala 30:31]
    io.dccmReq.bits.addrRequest <= io.aluResultIn @[MemoryFetch.scala 31:31]
    io.dccmReq.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 32:27]
    node _T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 33:42]
    node _T_1 = mux(_T, UInt<1>("h01"), UInt<1>("h00")) @[MemoryFetch.scala 33:26]
    io.dccmReq.valid <= _T_1 @[MemoryFetch.scala 33:20]
    node _T_2 = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 35:31]
    node _T_3 = eq(io.dccmRsp.valid, UInt<1>("h00")) @[MemoryFetch.scala 35:52]
    node _T_4 = and(_T_2, _T_3) @[MemoryFetch.scala 35:49]
    io.stall <= _T_4 @[MemoryFetch.scala 35:12]
    wire _WIRE : UInt<32> @[MemoryFetch.scala 40:21]
    _WIRE is invalid @[MemoryFetch.scala 40:21]
    node _T_5 = mux(io.dccmRsp.valid, io.dccmRsp.bits.dataResponse, _WIRE) @[MemoryFetch.scala 40:21]
    io.readData <= _T_5 @[MemoryFetch.scala 40:15]
    node _T_6 = bits(io.aluResultIn, 31, 28) @[MemoryFetch.scala 42:40]
    node _T_7 = eq(_T_6, UInt<4>("h08")) @[MemoryFetch.scala 42:49]
    node _T_8 = and(io.writeEnable, _T_7) @[MemoryFetch.scala 42:23]
    when _T_8 : @[MemoryFetch.scala 42:67]
      node _T_9 = asUInt(reset) @[MemoryFetch.scala 43:11]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[MemoryFetch.scala 43:11]
      when _T_10 : @[MemoryFetch.scala 43:11]
        printf(clock, UInt<1>(1), "%x\n", io.writeData) @[MemoryFetch.scala 43:11]
        skip @[MemoryFetch.scala 43:11]
      skip @[MemoryFetch.scala 42:67]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, flip halt : UInt<1>, out : SInt<32>, pc4 : SInt<32>}
    
    reg pc_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h0fffffffc")))) @[PC.scala 12:23]
    pc_reg <= io.in @[PC.scala 13:10]
    io.out <= pc_reg @[PC.scala 14:10]
    node _T = add(pc_reg, asSInt(UInt<4>("h04"))) @[PC.scala 15:41]
    node _T_1 = tail(_T, 1) @[PC.scala 15:41]
    node _T_2 = asSInt(_T_1) @[PC.scala 15:41]
    node _T_3 = mux(io.halt, pc_reg, _T_2) @[PC.scala 15:16]
    io.pc4 <= _T_3 @[PC.scala 15:10]
    
  module RVFI : 
    input clock : Clock
    input reset : Reset
    output io : {flip stall : UInt<1>, flip insn : UInt<32>, flip rs1_rdata : UInt<32>, flip rs2_rdata : UInt<32>, flip rd_addr : UInt<5>, flip rd_wdata : UInt<32>, flip pc : SInt<32>, flip pc_offset : SInt<32>, flip pc_four : SInt<32>, flip pc_src : UInt<1>, rvfi : {valid : UInt<1>, order : UInt<64>, insn : UInt<32>, trap : UInt<1>, halt : UInt<1>, intr : UInt<1>, ixl : UInt<2>, mode : UInt<2>, rs1_addr : UInt<5>, rs1_rdata : SInt<32>, rs2_addr : UInt<5>, rs2_rdata : SInt<32>, rd_addr : UInt<5>, rd_wdata : SInt<32>, pc_rdata : UInt<32>, pc_wdata : UInt<32>}}
    
    reg rvfi_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 44:27]
    reg rvfi_order : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[RVFI.scala 45:27]
    reg rvfi_halt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 46:26]
    reg rvfi_intr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 47:26]
    reg rvfi_mode : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[RVFI.scala 48:26]
    node _T = asUInt(reset) @[RVFI.scala 50:30]
    node _T_1 = eq(_T, UInt<1>("h00")) @[RVFI.scala 50:17]
    node _T_2 = eq(io.stall, UInt<1>("h00")) @[RVFI.scala 50:36]
    node _T_3 = and(_T_1, _T_2) @[RVFI.scala 50:33]
    rvfi_valid <= _T_3 @[RVFI.scala 50:14]
    when rvfi_valid : @[RVFI.scala 52:19]
      node _T_4 = add(rvfi_order, UInt<1>("h01")) @[RVFI.scala 53:30]
      node _T_5 = tail(_T_4, 1) @[RVFI.scala 53:30]
      rvfi_order <= _T_5 @[RVFI.scala 53:16]
      skip @[RVFI.scala 52:19]
    node _T_6 = asUInt(io.pc) @[RVFI.scala 56:35]
    io.rvfi.pc_rdata <= _T_6 @[RVFI.scala 56:20]
    node _T_7 = asUInt(io.pc_offset) @[RVFI.scala 57:57]
    node _T_8 = asUInt(io.pc_four) @[RVFI.scala 57:78]
    node _T_9 = mux(io.pc_src, _T_7, _T_8) @[RVFI.scala 57:26]
    io.rvfi.pc_wdata <= _T_9 @[RVFI.scala 57:20]
    node _T_10 = bits(io.insn, 19, 15) @[RVFI.scala 59:30]
    io.rvfi.rs1_addr <= _T_10 @[RVFI.scala 59:20]
    node _T_11 = asSInt(io.rs1_rdata) @[RVFI.scala 60:43]
    io.rvfi.rs1_rdata <= _T_11 @[RVFI.scala 60:21]
    node _T_12 = bits(io.insn, 24, 20) @[RVFI.scala 61:30]
    io.rvfi.rs2_addr <= _T_12 @[RVFI.scala 61:20]
    node _T_13 = asSInt(io.rs2_rdata) @[RVFI.scala 62:43]
    io.rvfi.rs2_rdata <= _T_13 @[RVFI.scala 62:21]
    io.rvfi.rd_addr <= io.rd_addr @[RVFI.scala 64:19]
    node _T_14 = asSInt(io.rd_wdata) @[RVFI.scala 65:41]
    io.rvfi.rd_wdata <= _T_14 @[RVFI.scala 65:20]
    io.rvfi.mode <= rvfi_mode @[RVFI.scala 67:16]
    io.rvfi.valid <= rvfi_valid @[RVFI.scala 68:17]
    io.rvfi.order <= rvfi_order @[RVFI.scala 69:17]
    io.rvfi.insn <= io.insn @[RVFI.scala 70:16]
    io.rvfi.halt <= rvfi_halt @[RVFI.scala 71:16]
    io.rvfi.intr <= rvfi_intr @[RVFI.scala 72:16]
    io.rvfi.ixl <= UInt<1>("h01") @[RVFI.scala 73:16]
    io.rvfi.trap <= UInt<1>("h00") @[RVFI.scala 74:16]
    
  module Core : 
    input clock : Clock
    input reset : Reset
    output io : {pin : UInt<32>, dmemReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip dmemRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, imemReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip imemRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, rvfi : {valid : UInt<1>, order : UInt<64>, insn : UInt<32>, trap : UInt<1>, halt : UInt<1>, intr : UInt<1>, ixl : UInt<2>, mode : UInt<2>, rs1_addr : UInt<5>, rs1_rdata : SInt<32>, rs2_addr : UInt<5>, rs2_rdata : SInt<32>, rd_addr : UInt<5>, rd_wdata : SInt<32>, pc_rdata : UInt<32>, pc_wdata : UInt<32>}}
    
    reg if_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 23:26]
    reg if_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 24:27]
    reg id_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 27:26]
    reg id_reg_rd1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 28:27]
    reg id_reg_rd2 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 29:27]
    reg id_reg_imm : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 30:27]
    reg id_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 31:27]
    reg id_reg_f7 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Core.scala 32:26]
    reg id_reg_f3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Core.scala 33:26]
    reg id_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 34:27]
    reg id_reg_ctl_aluSrc : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 35:34]
    reg id_reg_ctl_aluSrc1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 36:35]
    reg id_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 37:36]
    reg id_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 38:36]
    reg id_reg_ctl_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 39:35]
    reg id_reg_ctl_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 40:36]
    reg id_reg_ctl_branch : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 41:34]
    reg id_reg_ctl_aluOp : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 42:33]
    reg id_reg_ctl_jump : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 43:32]
    reg ex_reg_branch : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 46:30]
    reg ex_reg_zero : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 47:28]
    reg ex_reg_result : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 48:30]
    reg ex_reg_wd : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 49:26]
    reg ex_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 50:27]
    reg ex_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 51:27]
    reg ex_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 52:36]
    reg ex_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 53:36]
    reg ex_reg_ctl_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 54:35]
    reg ex_reg_ctl_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 55:36]
    reg ex_reg_ctl_branch_taken : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 56:40]
    reg ex_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 57:26]
    reg mem_reg_rd : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 60:27]
    reg mem_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 61:28]
    reg mem_reg_result : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 62:31]
    reg mem_reg_branch : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 63:31]
    reg mem_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 64:28]
    reg mem_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 65:37]
    reg mem_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 66:37]
    reg mem_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 67:27]
    inst InstructionFetch of InstructionFetch @[Core.scala 70:18]
    InstructionFetch.clock <= clock
    InstructionFetch.reset <= reset
    inst InstructionDecode of InstructionDecode @[Core.scala 71:18]
    InstructionDecode.clock <= clock
    InstructionDecode.reset <= reset
    inst Execute of Execute @[Core.scala 72:18]
    Execute.clock <= clock
    Execute.reset <= reset
    inst MEM of MemoryFetch @[Core.scala 73:19]
    MEM.clock <= clock
    MEM.reset <= reset
    inst pc of PC @[Core.scala 79:18]
    pc.clock <= clock
    pc.reset <= reset
    io.imemReq.bits.isWrite <= InstructionFetch.io.coreInstrReq.bits.isWrite @[Core.scala 81:14]
    io.imemReq.bits.activeByteLane <= InstructionFetch.io.coreInstrReq.bits.activeByteLane @[Core.scala 81:14]
    io.imemReq.bits.dataRequest <= InstructionFetch.io.coreInstrReq.bits.dataRequest @[Core.scala 81:14]
    io.imemReq.bits.addrRequest <= InstructionFetch.io.coreInstrReq.bits.addrRequest @[Core.scala 81:14]
    io.imemReq.valid <= InstructionFetch.io.coreInstrReq.valid @[Core.scala 81:14]
    InstructionFetch.io.coreInstrReq.ready <= io.imemReq.ready @[Core.scala 81:14]
    InstructionFetch.io.coreInstrResp.bits.error <= io.imemRsp.bits.error @[Core.scala 82:20]
    InstructionFetch.io.coreInstrResp.bits.dataResponse <= io.imemRsp.bits.dataResponse @[Core.scala 82:20]
    InstructionFetch.io.coreInstrResp.valid <= io.imemRsp.valid @[Core.scala 82:20]
    io.imemRsp.ready <= InstructionFetch.io.coreInstrResp.ready @[Core.scala 82:20]
    node _T = asUInt(pc.io.in) @[Core.scala 84:32]
    InstructionFetch.io.address <= _T @[Core.scala 84:14]
    node instruction = mux(io.imemRsp.valid, InstructionFetch.io.instruction, UInt<32>("h013")) @[Core.scala 85:24]
    node _T_1 = mux(io.imemReq.valid, UInt<1>("h00"), UInt<1>("h01")) @[Core.scala 87:20]
    pc.io.halt <= _T_1 @[Core.scala 87:14]
    node _T_2 = eq(MEM.io.stall, UInt<1>("h00")) @[Core.scala 88:37]
    node _T_3 = and(InstructionDecode.io.hdu_pcWrite, _T_2) @[Core.scala 88:34]
    node _T_4 = asSInt(InstructionDecode.io.pcPlusOffset) @[Core.scala 88:88]
    node _T_5 = mux(InstructionDecode.io.pcSrc, _T_4, pc.io.pc4) @[Core.scala 88:55]
    node _T_6 = mux(_T_3, _T_5, pc.io.out) @[Core.scala 88:18]
    pc.io.in <= _T_6 @[Core.scala 88:12]
    node _T_7 = eq(MEM.io.stall, UInt<1>("h00")) @[Core.scala 91:31]
    node _T_8 = and(InstructionDecode.io.hdu_if_reg_write, _T_7) @[Core.scala 91:28]
    when _T_8 : @[Core.scala 91:46]
      node _T_9 = asUInt(pc.io.out) @[Core.scala 92:34]
      if_reg_pc <= _T_9 @[Core.scala 92:15]
      if_reg_ins <= instruction @[Core.scala 93:16]
      skip @[Core.scala 91:46]
    when InstructionDecode.io.ifid_flush : @[Core.scala 95:23]
      if_reg_ins <= UInt<1>("h00") @[Core.scala 96:16]
      skip @[Core.scala 95:23]
    id_reg_rd1 <= InstructionDecode.io.readData1 @[Core.scala 104:14]
    id_reg_rd2 <= InstructionDecode.io.readData2 @[Core.scala 105:14]
    id_reg_imm <= InstructionDecode.io.immediate @[Core.scala 106:14]
    id_reg_wra <= InstructionDecode.io.writeRegAddress @[Core.scala 107:14]
    id_reg_f3 <= InstructionDecode.io.func3 @[Core.scala 108:13]
    id_reg_f7 <= InstructionDecode.io.func7 @[Core.scala 109:13]
    id_reg_ins <= if_reg_ins @[Core.scala 110:14]
    id_reg_pc <= if_reg_pc @[Core.scala 111:13]
    id_reg_ctl_aluSrc <= InstructionDecode.io.ctl_aluSrc @[Core.scala 112:21]
    id_reg_ctl_memToReg <= InstructionDecode.io.ctl_memToReg @[Core.scala 113:23]
    id_reg_ctl_regWrite <= InstructionDecode.io.ctl_regWrite @[Core.scala 114:23]
    id_reg_ctl_memRead <= InstructionDecode.io.ctl_memRead @[Core.scala 115:22]
    id_reg_ctl_memWrite <= InstructionDecode.io.ctl_memWrite @[Core.scala 116:23]
    id_reg_ctl_branch <= InstructionDecode.io.ctl_branch @[Core.scala 117:21]
    id_reg_ctl_aluOp <= InstructionDecode.io.ctl_aluOp @[Core.scala 118:20]
    id_reg_ctl_jump <= InstructionDecode.io.ctl_jump @[Core.scala 119:19]
    id_reg_ctl_aluSrc1 <= InstructionDecode.io.ctl_aluSrc1 @[Core.scala 120:22]
    InstructionDecode.io.id_instruction <= if_reg_ins @[Core.scala 122:21]
    InstructionDecode.io.pcAddress <= if_reg_pc @[Core.scala 123:16]
    InstructionDecode.io.dmem_resp_valid <= io.dmemRsp.valid @[Core.scala 124:22]
    InstructionDecode.io.ex_ins <= id_reg_ins @[Core.scala 127:13]
    InstructionDecode.io.ex_mem_ins <= ex_reg_ins @[Core.scala 128:17]
    InstructionDecode.io.mem_wb_ins <= mem_reg_ins @[Core.scala 129:17]
    InstructionDecode.io.ex_mem_result <= ex_reg_result @[Core.scala 130:20]
    ex_reg_wd <= Execute.io.writeData @[Core.scala 138:13]
    ex_reg_result <= Execute.io.ALUresult @[Core.scala 139:17]
    Execute.io.immediate <= id_reg_imm @[Core.scala 141:16]
    Execute.io.readData1 <= id_reg_rd1 @[Core.scala 142:16]
    Execute.io.readData2 <= id_reg_rd2 @[Core.scala 143:16]
    Execute.io.pcAddress <= id_reg_pc @[Core.scala 144:16]
    Execute.io.func3 <= id_reg_f3 @[Core.scala 145:12]
    Execute.io.func7 <= id_reg_f7 @[Core.scala 146:12]
    Execute.io.ctl_aluSrc <= id_reg_ctl_aluSrc @[Core.scala 147:17]
    Execute.io.ctl_aluOp <= id_reg_ctl_aluOp @[Core.scala 148:16]
    Execute.io.ctl_aluSrc1 <= id_reg_ctl_aluSrc1 @[Core.scala 149:18]
    ex_reg_pc <= id_reg_pc @[Core.scala 152:13]
    ex_reg_wra <= id_reg_wra @[Core.scala 153:14]
    ex_reg_ins <= id_reg_ins @[Core.scala 154:14]
    ex_reg_ctl_memToReg <= id_reg_ctl_memToReg @[Core.scala 155:23]
    ex_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 156:23]
    InstructionDecode.io.id_ex_mem_read <= id_reg_ctl_memRead @[Core.scala 159:21]
    InstructionDecode.io.ex_mem_mem_read <= ex_reg_ctl_memRead @[Core.scala 160:22]
    Execute.io.id_ex_ins <= id_reg_ins @[Core.scala 164:16]
    Execute.io.ex_mem_ins <= ex_reg_ins @[Core.scala 165:17]
    Execute.io.mem_wb_ins <= mem_reg_ins @[Core.scala 166:17]
    node _T_10 = bits(id_reg_ins, 11, 7) @[Core.scala 167:28]
    InstructionDecode.io.id_ex_rd <= _T_10 @[Core.scala 167:15]
    node _T_11 = bits(id_reg_ins, 6, 0) @[Core.scala 168:36]
    node _T_12 = eq(_T_11, UInt<7>("h063")) @[Core.scala 168:42]
    node _T_13 = mux(_T_12, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 168:25]
    InstructionDecode.io.id_ex_branch <= _T_13 @[Core.scala 168:19]
    node _T_14 = bits(ex_reg_ins, 11, 7) @[Core.scala 169:29]
    InstructionDecode.io.ex_mem_rd <= _T_14 @[Core.scala 169:16]
    InstructionDecode.io.ex_result <= Execute.io.ALUresult @[Core.scala 170:16]
    io.dmemReq.bits.isWrite <= MEM.io.dccmReq.bits.isWrite @[Core.scala 177:14]
    io.dmemReq.bits.activeByteLane <= MEM.io.dccmReq.bits.activeByteLane @[Core.scala 177:14]
    io.dmemReq.bits.dataRequest <= MEM.io.dccmReq.bits.dataRequest @[Core.scala 177:14]
    io.dmemReq.bits.addrRequest <= MEM.io.dccmReq.bits.addrRequest @[Core.scala 177:14]
    io.dmemReq.valid <= MEM.io.dccmReq.valid @[Core.scala 177:14]
    MEM.io.dccmReq.ready <= io.dmemReq.ready @[Core.scala 177:14]
    MEM.io.dccmRsp.bits.error <= io.dmemRsp.bits.error @[Core.scala 178:18]
    MEM.io.dccmRsp.bits.dataResponse <= io.dmemRsp.bits.dataResponse @[Core.scala 178:18]
    MEM.io.dccmRsp.valid <= io.dmemRsp.valid @[Core.scala 178:18]
    io.dmemRsp.ready <= MEM.io.dccmRsp.ready @[Core.scala 178:18]
    when MEM.io.stall : @[Core.scala 181:21]
      mem_reg_rd <= mem_reg_rd @[Core.scala 182:16]
      mem_reg_result <= mem_reg_result @[Core.scala 183:20]
      ex_reg_wra <= ex_reg_wra @[Core.scala 185:16]
      ex_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 186:25]
      ex_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 188:25]
      mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 189:26]
      mem_reg_ins <= mem_reg_ins @[Core.scala 190:17]
      mem_reg_pc <= mem_reg_pc @[Core.scala 191:16]
      ex_reg_ctl_memRead <= ex_reg_ctl_memRead @[Core.scala 193:24]
      ex_reg_ctl_memWrite <= ex_reg_ctl_memWrite @[Core.scala 194:25]
      skip @[Core.scala 181:21]
    else : @[Core.scala 196:5]
      mem_reg_rd <= MEM.io.readData @[Core.scala 197:16]
      mem_reg_result <= ex_reg_result @[Core.scala 198:20]
      mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 200:26]
      mem_reg_ins <= ex_reg_ins @[Core.scala 201:17]
      mem_reg_pc <= ex_reg_pc @[Core.scala 202:16]
      mem_reg_wra <= ex_reg_wra @[Core.scala 203:17]
      ex_reg_ctl_memRead <= id_reg_ctl_memRead @[Core.scala 204:24]
      ex_reg_ctl_memWrite <= id_reg_ctl_memWrite @[Core.scala 205:25]
      skip @[Core.scala 196:5]
    mem_reg_wra <= ex_reg_wra @[Core.scala 207:15]
    mem_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 208:24]
    Execute.io.ex_mem_regWrite <= ex_reg_ctl_regWrite @[Core.scala 209:22]
    MEM.io.aluResultIn <= ex_reg_result @[Core.scala 210:22]
    MEM.io.writeData <= ex_reg_wd @[Core.scala 211:20]
    MEM.io.readEnable <= ex_reg_ctl_memRead @[Core.scala 212:21]
    MEM.io.writeEnable <= ex_reg_ctl_memWrite @[Core.scala 213:22]
    Execute.io.mem_result <= ex_reg_result @[Core.scala 214:17]
    wire wb_data : UInt<32> @[Core.scala 220:21]
    wire wb_addr : UInt<5> @[Core.scala 221:21]
    node _T_15 = eq(mem_reg_ctl_memToReg, UInt<1>("h01")) @[Core.scala 223:29]
    when _T_15 : @[Core.scala 223:38]
      wb_data <= MEM.io.readData @[Core.scala 224:13]
      node _T_16 = mux(io.dmemRsp.valid, mem_reg_wra, UInt<1>("h00")) @[Core.scala 225:19]
      wb_addr <= _T_16 @[Core.scala 225:13]
      skip @[Core.scala 223:38]
    else : @[Core.scala 226:44]
      node _T_17 = eq(mem_reg_ctl_memToReg, UInt<2>("h02")) @[Core.scala 226:35]
      when _T_17 : @[Core.scala 226:44]
        wb_data <= mem_reg_pc @[Core.scala 227:15]
        wb_addr <= mem_reg_wra @[Core.scala 228:15]
        skip @[Core.scala 226:44]
      else : @[Core.scala 230:16]
        wb_data <= mem_reg_result @[Core.scala 231:15]
        wb_addr <= mem_reg_wra @[Core.scala 232:15]
        skip @[Core.scala 230:16]
    InstructionDecode.io.mem_wb_result <= wb_data @[Core.scala 235:20]
    InstructionDecode.io.writeData <= wb_data @[Core.scala 236:16]
    Execute.io.wb_result <= wb_data @[Core.scala 237:16]
    Execute.io.mem_wb_regWrite <= mem_reg_ctl_regWrite @[Core.scala 238:22]
    InstructionDecode.io.writeReg <= wb_addr @[Core.scala 239:15]
    InstructionDecode.io.ctl_writeEnable <= mem_reg_ctl_regWrite @[Core.scala 240:22]
    io.pin <= wb_data @[Core.scala 241:10]
    inst rvfi of RVFI @[Core.scala 245:20]
    rvfi.clock <= clock
    rvfi.reset <= reset
    rvfi.io.stall <= MEM.io.stall @[Core.scala 246:17]
    rvfi.io.pc <= pc.io.out @[Core.scala 247:14]
    rvfi.io.pc_src <= InstructionDecode.io.pcSrc @[Core.scala 248:18]
    rvfi.io.pc_four <= pc.io.pc4 @[Core.scala 249:19]
    rvfi.io.pc_offset <= pc.io.in @[Core.scala 250:21]
    rvfi.io.rd_wdata <= wb_data @[Core.scala 251:20]
    rvfi.io.rd_addr <= wb_addr @[Core.scala 252:19]
    rvfi.io.rs1_rdata <= InstructionDecode.io.readData1 @[Core.scala 253:21]
    rvfi.io.rs2_rdata <= InstructionDecode.io.readData2 @[Core.scala 254:21]
    rvfi.io.insn <= if_reg_ins @[Core.scala 255:16]
    io.rvfi.pc_wdata <= rvfi.io.rvfi.pc_wdata @[Core.scala 257:11]
    io.rvfi.pc_rdata <= rvfi.io.rvfi.pc_rdata @[Core.scala 257:11]
    io.rvfi.rd_wdata <= rvfi.io.rvfi.rd_wdata @[Core.scala 257:11]
    io.rvfi.rd_addr <= rvfi.io.rvfi.rd_addr @[Core.scala 257:11]
    io.rvfi.rs2_rdata <= rvfi.io.rvfi.rs2_rdata @[Core.scala 257:11]
    io.rvfi.rs2_addr <= rvfi.io.rvfi.rs2_addr @[Core.scala 257:11]
    io.rvfi.rs1_rdata <= rvfi.io.rvfi.rs1_rdata @[Core.scala 257:11]
    io.rvfi.rs1_addr <= rvfi.io.rvfi.rs1_addr @[Core.scala 257:11]
    io.rvfi.mode <= rvfi.io.rvfi.mode @[Core.scala 257:11]
    io.rvfi.ixl <= rvfi.io.rvfi.ixl @[Core.scala 257:11]
    io.rvfi.intr <= rvfi.io.rvfi.intr @[Core.scala 257:11]
    io.rvfi.halt <= rvfi.io.rvfi.halt @[Core.scala 257:11]
    io.rvfi.trap <= rvfi.io.rvfi.trap @[Core.scala 257:11]
    io.rvfi.insn <= rvfi.io.rvfi.insn @[Core.scala 257:11]
    io.rvfi.order <= rvfi.io.rvfi.order @[Core.scala 257:11]
    io.rvfi.valid <= rvfi.io.rvfi.valid @[Core.scala 257:11]
    
  module Switch1toN : 
    input clock : Clock
    input reset : Reset
    output io : {flip hostIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, hostOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, devOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}[8], flip devIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}[8], flip devSel : UInt<3>}
    
    io.hostIn.ready <= UInt<1>("h01") @[Switch1toN.scala 17:19]
    io.devIn[0].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[1].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[2].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[3].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[4].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[5].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[6].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    io.devIn[7].ready <= UInt<1>("h01") @[Switch1toN.scala 19:29]
    node _io_devOut_7_valid_T = eq(io.devSel, UInt<3>("h07")) @[Switch1toN.scala 23:55]
    node _io_devOut_7_valid_T_1 = and(io.hostIn.valid, _io_devOut_7_valid_T) @[Switch1toN.scala 23:41]
    io.devOut[7].valid <= _io_devOut_7_valid_T_1 @[Switch1toN.scala 23:22]
    io.hostOut.valid <= io.devIn[7].valid @[Switch1toN.scala 26:20]
    io.hostOut.bits.err <= io.devIn[7].bits.err @[Switch1toN.scala 27:19]
    io.hostOut.bits.dat <= io.devIn[7].bits.dat @[Switch1toN.scala 27:19]
    io.hostOut.bits.ack <= io.devIn[7].bits.ack @[Switch1toN.scala 27:19]
    io.devOut[0].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[0].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[0].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[0].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[0].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[0].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[1].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[1].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[1].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[1].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[1].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[1].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[2].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[2].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[2].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[2].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[2].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[2].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[3].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[3].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[3].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[3].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[3].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[3].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[4].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[4].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[4].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[4].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[4].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[4].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[5].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[5].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[5].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[5].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[5].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[5].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[6].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[6].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[6].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[6].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[6].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[6].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    io.devOut[7].bits.sel <= io.hostIn.bits.sel @[Switch1toN.scala 31:33]
    io.devOut[7].bits.dat <= io.hostIn.bits.dat @[Switch1toN.scala 31:33]
    io.devOut[7].bits.adr <= io.hostIn.bits.adr @[Switch1toN.scala 31:33]
    io.devOut[7].bits.we <= io.hostIn.bits.we @[Switch1toN.scala 31:33]
    io.devOut[7].bits.stb <= io.hostIn.bits.stb @[Switch1toN.scala 31:33]
    io.devOut[7].bits.cyc <= io.hostIn.bits.cyc @[Switch1toN.scala 31:33]
    node _io_devOut_0_valid_T = eq(io.devSel, UInt<1>("h00")) @[Switch1toN.scala 33:57]
    node _io_devOut_0_valid_T_1 = and(io.hostIn.valid, _io_devOut_0_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[0].valid <= _io_devOut_0_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_1_valid_T = eq(io.devSel, UInt<1>("h01")) @[Switch1toN.scala 33:57]
    node _io_devOut_1_valid_T_1 = and(io.hostIn.valid, _io_devOut_1_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[1].valid <= _io_devOut_1_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_2_valid_T = eq(io.devSel, UInt<2>("h02")) @[Switch1toN.scala 33:57]
    node _io_devOut_2_valid_T_1 = and(io.hostIn.valid, _io_devOut_2_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[2].valid <= _io_devOut_2_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_3_valid_T = eq(io.devSel, UInt<2>("h03")) @[Switch1toN.scala 33:57]
    node _io_devOut_3_valid_T_1 = and(io.hostIn.valid, _io_devOut_3_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[3].valid <= _io_devOut_3_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_4_valid_T = eq(io.devSel, UInt<3>("h04")) @[Switch1toN.scala 33:57]
    node _io_devOut_4_valid_T_1 = and(io.hostIn.valid, _io_devOut_4_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[4].valid <= _io_devOut_4_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_5_valid_T = eq(io.devSel, UInt<3>("h05")) @[Switch1toN.scala 33:57]
    node _io_devOut_5_valid_T_1 = and(io.hostIn.valid, _io_devOut_5_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[5].valid <= _io_devOut_5_valid_T_1 @[Switch1toN.scala 33:24]
    node _io_devOut_6_valid_T = eq(io.devSel, UInt<3>("h06")) @[Switch1toN.scala 33:57]
    node _io_devOut_6_valid_T_1 = and(io.hostIn.valid, _io_devOut_6_valid_T) @[Switch1toN.scala 33:43]
    io.devOut[6].valid <= _io_devOut_6_valid_T_1 @[Switch1toN.scala 33:24]
    node _T = eq(io.devSel, UInt<1>("h00")) @[Switch1toN.scala 39:20]
    when _T : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[0].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[0].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[0].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[0].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_1 = eq(io.devSel, UInt<1>("h01")) @[Switch1toN.scala 39:20]
    when _T_1 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[1].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[1].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[1].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[1].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_2 = eq(io.devSel, UInt<2>("h02")) @[Switch1toN.scala 39:20]
    when _T_2 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[2].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[2].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[2].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[2].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_3 = eq(io.devSel, UInt<2>("h03")) @[Switch1toN.scala 39:20]
    when _T_3 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[3].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[3].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[3].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[3].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_4 = eq(io.devSel, UInt<3>("h04")) @[Switch1toN.scala 39:20]
    when _T_4 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[4].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[4].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[4].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[4].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_5 = eq(io.devSel, UInt<3>("h05")) @[Switch1toN.scala 39:20]
    when _T_5 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[5].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[5].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[5].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[5].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    node _T_6 = eq(io.devSel, UInt<3>("h06")) @[Switch1toN.scala 39:20]
    when _T_6 : @[Switch1toN.scala 39:35]
      io.hostOut.bits.err <= io.devIn[6].bits.err @[Switch1toN.scala 40:23]
      io.hostOut.bits.dat <= io.devIn[6].bits.dat @[Switch1toN.scala 40:23]
      io.hostOut.bits.ack <= io.devIn[6].bits.ack @[Switch1toN.scala 40:23]
      io.hostOut.valid <= io.devIn[6].valid @[Switch1toN.scala 41:24]
      skip @[Switch1toN.scala 39:35]
    
  module Generator : 
    input clock : Clock
    input reset : UInt<1>
    output io : {gpio_o : UInt<4>, gpio_en_o : UInt<4>, flip gpio_i : UInt<4>, spi_cs_n : UInt<1>, spi_sclk : UInt<1>, spi_mosi : UInt<1>, flip spi_miso : UInt<1>, flip cio_uart_rx_i : UInt<1>, cio_uart_tx_o : UInt<1>, cio_uart_intr_tx_o : UInt<1>, timer_intr_cmp : UInt<1>, timer_intr_ovf : UInt<1>, spi_flash_cs_n : UInt<1>, spi_flash_sclk : UInt<1>, spi_flash_mosi : UInt<1>, flip spi_flash_miso : UInt<1>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, i2c_intr : UInt<1>}
    
    inst gen_imem_host of WishboneHost @[Generator.scala 122:31]
    gen_imem_host.clock <= clock
    gen_imem_host.reset <= reset
    inst gen_imem_slave of WishboneDevice @[Generator.scala 123:32]
    gen_imem_slave.clock <= clock
    gen_imem_slave.reset <= reset
    inst gen_dmem_host of WishboneHost_1 @[Generator.scala 124:31]
    gen_dmem_host.clock <= clock
    gen_dmem_host.reset <= reset
    inst gen_dmem_slave of WishboneDevice_1 @[Generator.scala 125:32]
    gen_dmem_slave.clock <= clock
    gen_dmem_slave.reset <= reset
    inst gpio of Gpio @[Generator.scala 133:26]
    gpio.clock <= clock
    gpio.reset <= reset
    inst gen_gpio_slave of WishboneDevice_2 @[Generator.scala 134:36]
    gen_gpio_slave.clock <= clock
    gen_gpio_slave.reset <= reset
    gpio.io.req.bits.isWrite <= gen_gpio_slave.io.reqOut.bits.isWrite @[Generator.scala 136:34]
    gpio.io.req.bits.activeByteLane <= gen_gpio_slave.io.reqOut.bits.activeByteLane @[Generator.scala 136:34]
    gpio.io.req.bits.dataRequest <= gen_gpio_slave.io.reqOut.bits.dataRequest @[Generator.scala 136:34]
    gpio.io.req.bits.addrRequest <= gen_gpio_slave.io.reqOut.bits.addrRequest @[Generator.scala 136:34]
    gpio.io.req.valid <= gen_gpio_slave.io.reqOut.valid @[Generator.scala 136:34]
    gen_gpio_slave.io.reqOut.ready <= gpio.io.req.ready @[Generator.scala 136:34]
    gen_gpio_slave.io.rspIn.bits.error <= gpio.io.rsp.bits.error @[Generator.scala 137:33]
    gen_gpio_slave.io.rspIn.bits.dataResponse <= gpio.io.rsp.bits.dataResponse @[Generator.scala 137:33]
    gen_gpio_slave.io.rspIn.valid <= gpio.io.rsp.valid @[Generator.scala 137:33]
    gpio.io.rsp.ready <= gen_gpio_slave.io.rspIn.ready @[Generator.scala 137:33]
    node _io_gpio_o_T = bits(gpio.io.cio_gpio_o, 3, 0) @[Generator.scala 139:44]
    io.gpio_o <= _io_gpio_o_T @[Generator.scala 139:23]
    node _io_gpio_en_o_T = bits(gpio.io.cio_gpio_en_o, 3, 0) @[Generator.scala 140:50]
    io.gpio_en_o <= _io_gpio_en_o_T @[Generator.scala 140:26]
    gpio.io.cio_gpio_i <= io.gpio_i @[Generator.scala 141:28]
    inst spi of Spi @[Generator.scala 147:23]
    spi.clock <= clock
    spi.reset <= reset
    inst gen_spi_slave of WishboneDevice_3 @[Generator.scala 148:33]
    gen_spi_slave.clock <= clock
    gen_spi_slave.reset <= reset
    spi.io.req.bits.isWrite <= gen_spi_slave.io.reqOut.bits.isWrite @[Generator.scala 150:31]
    spi.io.req.bits.activeByteLane <= gen_spi_slave.io.reqOut.bits.activeByteLane @[Generator.scala 150:31]
    spi.io.req.bits.dataRequest <= gen_spi_slave.io.reqOut.bits.dataRequest @[Generator.scala 150:31]
    spi.io.req.bits.addrRequest <= gen_spi_slave.io.reqOut.bits.addrRequest @[Generator.scala 150:31]
    spi.io.req.valid <= gen_spi_slave.io.reqOut.valid @[Generator.scala 150:31]
    gen_spi_slave.io.reqOut.ready <= spi.io.req.ready @[Generator.scala 150:31]
    gen_spi_slave.io.rspIn.bits.error <= spi.io.rsp.bits.error @[Generator.scala 151:30]
    gen_spi_slave.io.rspIn.bits.dataResponse <= spi.io.rsp.bits.dataResponse @[Generator.scala 151:30]
    gen_spi_slave.io.rspIn.valid <= spi.io.rsp.valid @[Generator.scala 151:30]
    spi.io.rsp.ready <= gen_spi_slave.io.rspIn.ready @[Generator.scala 151:30]
    io.spi_cs_n <= spi.io.cs_n @[Generator.scala 153:23]
    io.spi_sclk <= spi.io.sclk @[Generator.scala 154:23]
    io.spi_mosi <= spi.io.mosi @[Generator.scala 155:23]
    spi.io.miso <= io.spi_miso @[Generator.scala 156:19]
    inst uart of uart @[Generator.scala 161:24]
    uart.clock <= clock
    uart.reset <= reset
    inst gen_uart_slave of WishboneDevice_4 @[Generator.scala 162:34]
    gen_uart_slave.clock <= clock
    gen_uart_slave.reset <= reset
    uart.io.request.bits.isWrite <= gen_uart_slave.io.reqOut.bits.isWrite @[Generator.scala 164:32]
    uart.io.request.bits.activeByteLane <= gen_uart_slave.io.reqOut.bits.activeByteLane @[Generator.scala 164:32]
    uart.io.request.bits.dataRequest <= gen_uart_slave.io.reqOut.bits.dataRequest @[Generator.scala 164:32]
    uart.io.request.bits.addrRequest <= gen_uart_slave.io.reqOut.bits.addrRequest @[Generator.scala 164:32]
    uart.io.request.valid <= gen_uart_slave.io.reqOut.valid @[Generator.scala 164:32]
    gen_uart_slave.io.reqOut.ready <= uart.io.request.ready @[Generator.scala 164:32]
    gen_uart_slave.io.rspIn.bits.error <= uart.io.response.bits.error @[Generator.scala 165:31]
    gen_uart_slave.io.rspIn.bits.dataResponse <= uart.io.response.bits.dataResponse @[Generator.scala 165:31]
    gen_uart_slave.io.rspIn.valid <= uart.io.response.valid @[Generator.scala 165:31]
    uart.io.response.ready <= gen_uart_slave.io.rspIn.ready @[Generator.scala 165:31]
    uart.io.cio_uart_rx_i <= io.cio_uart_rx_i @[Generator.scala 167:29]
    io.cio_uart_tx_o <= uart.io.cio_uart_tx_o @[Generator.scala 168:28]
    io.cio_uart_intr_tx_o <= uart.io.cio_uart_intr_tx_o @[Generator.scala 169:33]
    inst timer of Timer @[Generator.scala 174:25]
    timer.clock <= clock
    timer.reset <= reset
    inst gen_timer_slave of WishboneDevice_5 @[Generator.scala 175:35]
    gen_timer_slave.clock <= clock
    gen_timer_slave.reset <= reset
    timer.io.req.bits.isWrite <= gen_timer_slave.io.reqOut.bits.isWrite @[Generator.scala 177:33]
    timer.io.req.bits.activeByteLane <= gen_timer_slave.io.reqOut.bits.activeByteLane @[Generator.scala 177:33]
    timer.io.req.bits.dataRequest <= gen_timer_slave.io.reqOut.bits.dataRequest @[Generator.scala 177:33]
    timer.io.req.bits.addrRequest <= gen_timer_slave.io.reqOut.bits.addrRequest @[Generator.scala 177:33]
    timer.io.req.valid <= gen_timer_slave.io.reqOut.valid @[Generator.scala 177:33]
    gen_timer_slave.io.reqOut.ready <= timer.io.req.ready @[Generator.scala 177:33]
    gen_timer_slave.io.rspIn.bits.error <= timer.io.rsp.bits.error @[Generator.scala 178:32]
    gen_timer_slave.io.rspIn.bits.dataResponse <= timer.io.rsp.bits.dataResponse @[Generator.scala 178:32]
    gen_timer_slave.io.rspIn.valid <= timer.io.rsp.valid @[Generator.scala 178:32]
    timer.io.rsp.ready <= gen_timer_slave.io.rspIn.ready @[Generator.scala 178:32]
    io.timer_intr_cmp <= timer.io.cio_timer_intr_cmp @[Generator.scala 180:29]
    io.timer_intr_ovf <= timer.io.cio_timer_intr_ovf @[Generator.scala 181:29]
    inst spi_flash of SpiFlash @[Generator.scala 186:29]
    spi_flash.clock <= clock
    spi_flash.reset <= reset
    inst gen_spi_flash_slave of WishboneDevice_6 @[Generator.scala 187:39]
    gen_spi_flash_slave.clock <= clock
    gen_spi_flash_slave.reset <= reset
    spi_flash.io.req.bits.isWrite <= gen_spi_flash_slave.io.reqOut.bits.isWrite @[Generator.scala 189:37]
    spi_flash.io.req.bits.activeByteLane <= gen_spi_flash_slave.io.reqOut.bits.activeByteLane @[Generator.scala 189:37]
    spi_flash.io.req.bits.dataRequest <= gen_spi_flash_slave.io.reqOut.bits.dataRequest @[Generator.scala 189:37]
    spi_flash.io.req.bits.addrRequest <= gen_spi_flash_slave.io.reqOut.bits.addrRequest @[Generator.scala 189:37]
    spi_flash.io.req.valid <= gen_spi_flash_slave.io.reqOut.valid @[Generator.scala 189:37]
    gen_spi_flash_slave.io.reqOut.ready <= spi_flash.io.req.ready @[Generator.scala 189:37]
    gen_spi_flash_slave.io.rspIn.bits.error <= spi_flash.io.rsp.bits.error @[Generator.scala 190:36]
    gen_spi_flash_slave.io.rspIn.bits.dataResponse <= spi_flash.io.rsp.bits.dataResponse @[Generator.scala 190:36]
    gen_spi_flash_slave.io.rspIn.valid <= spi_flash.io.rsp.valid @[Generator.scala 190:36]
    spi_flash.io.rsp.ready <= gen_spi_flash_slave.io.rspIn.ready @[Generator.scala 190:36]
    io.spi_flash_cs_n <= spi_flash.io.cs_n @[Generator.scala 192:29]
    io.spi_flash_sclk <= spi_flash.io.sclk @[Generator.scala 193:29]
    io.spi_flash_mosi <= spi_flash.io.mosi @[Generator.scala 194:29]
    spi_flash.io.miso <= io.spi_flash_miso @[Generator.scala 195:25]
    inst i2c of i2c @[Generator.scala 200:23]
    i2c.clock <= clock
    i2c.reset <= reset
    inst gen_i2c_slave of WishboneDevice_7 @[Generator.scala 201:33]
    gen_i2c_slave.clock <= clock
    gen_i2c_slave.reset <= reset
    i2c.io.request.bits.isWrite <= gen_i2c_slave.io.reqOut.bits.isWrite @[Generator.scala 203:31]
    i2c.io.request.bits.activeByteLane <= gen_i2c_slave.io.reqOut.bits.activeByteLane @[Generator.scala 203:31]
    i2c.io.request.bits.dataRequest <= gen_i2c_slave.io.reqOut.bits.dataRequest @[Generator.scala 203:31]
    i2c.io.request.bits.addrRequest <= gen_i2c_slave.io.reqOut.bits.addrRequest @[Generator.scala 203:31]
    i2c.io.request.valid <= gen_i2c_slave.io.reqOut.valid @[Generator.scala 203:31]
    gen_i2c_slave.io.reqOut.ready <= i2c.io.request.ready @[Generator.scala 203:31]
    gen_i2c_slave.io.rspIn.bits.error <= i2c.io.response.bits.error @[Generator.scala 204:30]
    gen_i2c_slave.io.rspIn.bits.dataResponse <= i2c.io.response.bits.dataResponse @[Generator.scala 204:30]
    gen_i2c_slave.io.rspIn.valid <= i2c.io.response.valid @[Generator.scala 204:30]
    i2c.io.response.ready <= gen_i2c_slave.io.rspIn.ready @[Generator.scala 204:30]
    i2c.io.cio_i2c_sda_in <= io.i2c_sda_in @[Generator.scala 206:29]
    io.i2c_sda <= i2c.io.cio_i2c_sda @[Generator.scala 207:22]
    io.i2c_scl <= i2c.io.cio_i2c_scl @[Generator.scala 208:22]
    io.i2c_intr <= i2c.io.cio_i2c_intr @[Generator.scala 209:23]
    inst imem of BlockRamWithoutMasking @[Generator.scala 215:22]
    imem.clock <= clock
    imem.reset <= reset
    inst dmem of BlockRamWithMasking @[Generator.scala 216:22]
    dmem.clock <= clock
    dmem.reset <= reset
    inst wbErr of WishboneErr @[Generator.scala 218:23]
    wbErr.clock <= clock
    wbErr.reset <= reset
    inst core of Core @[Generator.scala 219:22]
    core.clock <= clock
    core.reset <= reset
    inst switch of Switch1toN @[Generator.scala 224:24]
    switch.clock <= clock
    switch.reset <= reset
    gen_imem_host.io.reqIn.bits.isWrite <= core.io.imemReq.bits.isWrite @[Generator.scala 227:28]
    gen_imem_host.io.reqIn.bits.activeByteLane <= core.io.imemReq.bits.activeByteLane @[Generator.scala 227:28]
    gen_imem_host.io.reqIn.bits.dataRequest <= core.io.imemReq.bits.dataRequest @[Generator.scala 227:28]
    gen_imem_host.io.reqIn.bits.addrRequest <= core.io.imemReq.bits.addrRequest @[Generator.scala 227:28]
    gen_imem_host.io.reqIn.valid <= core.io.imemReq.valid @[Generator.scala 227:28]
    core.io.imemReq.ready <= gen_imem_host.io.reqIn.ready @[Generator.scala 227:28]
    core.io.imemRsp.bits.error <= gen_imem_host.io.rspOut.bits.error @[Generator.scala 228:21]
    core.io.imemRsp.bits.dataResponse <= gen_imem_host.io.rspOut.bits.dataResponse @[Generator.scala 228:21]
    core.io.imemRsp.valid <= gen_imem_host.io.rspOut.valid @[Generator.scala 228:21]
    gen_imem_host.io.rspOut.ready <= core.io.imemRsp.ready @[Generator.scala 228:21]
    imem.io.req.bits.isWrite <= gen_imem_slave.io.reqOut.bits.isWrite @[Generator.scala 229:30]
    imem.io.req.bits.activeByteLane <= gen_imem_slave.io.reqOut.bits.activeByteLane @[Generator.scala 229:30]
    imem.io.req.bits.dataRequest <= gen_imem_slave.io.reqOut.bits.dataRequest @[Generator.scala 229:30]
    imem.io.req.bits.addrRequest <= gen_imem_slave.io.reqOut.bits.addrRequest @[Generator.scala 229:30]
    imem.io.req.valid <= gen_imem_slave.io.reqOut.valid @[Generator.scala 229:30]
    gen_imem_slave.io.reqOut.ready <= imem.io.req.ready @[Generator.scala 229:30]
    gen_imem_slave.io.rspIn.bits.error <= imem.io.rsp.bits.error @[Generator.scala 230:29]
    gen_imem_slave.io.rspIn.bits.dataResponse <= imem.io.rsp.bits.dataResponse @[Generator.scala 230:29]
    gen_imem_slave.io.rspIn.valid <= imem.io.rsp.valid @[Generator.scala 230:29]
    imem.io.rsp.ready <= gen_imem_slave.io.rspIn.ready @[Generator.scala 230:29]
    gen_imem_slave.io.wbMasterReceiver.bits.sel <= gen_imem_host.io.wbMasterTransmitter.bits.sel @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.bits.dat <= gen_imem_host.io.wbMasterTransmitter.bits.dat @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.bits.adr <= gen_imem_host.io.wbMasterTransmitter.bits.adr @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.bits.we <= gen_imem_host.io.wbMasterTransmitter.bits.we @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.bits.stb <= gen_imem_host.io.wbMasterTransmitter.bits.stb @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.bits.cyc <= gen_imem_host.io.wbMasterTransmitter.bits.cyc @[Generator.scala 233:42]
    gen_imem_slave.io.wbMasterReceiver.valid <= gen_imem_host.io.wbMasterTransmitter.valid @[Generator.scala 233:42]
    gen_imem_host.io.wbMasterTransmitter.ready <= gen_imem_slave.io.wbMasterReceiver.ready @[Generator.scala 233:42]
    gen_imem_host.io.wbSlaveReceiver.bits.err <= gen_imem_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 234:42]
    gen_imem_host.io.wbSlaveReceiver.bits.dat <= gen_imem_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 234:42]
    gen_imem_host.io.wbSlaveReceiver.bits.ack <= gen_imem_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 234:42]
    gen_imem_host.io.wbSlaveReceiver.valid <= gen_imem_slave.io.wbSlaveTransmitter.valid @[Generator.scala 234:42]
    gen_imem_slave.io.wbSlaveTransmitter.ready <= gen_imem_host.io.wbSlaveReceiver.ready @[Generator.scala 234:42]
    gen_dmem_host.io.reqIn.bits.isWrite <= core.io.dmemReq.bits.isWrite @[Generator.scala 237:28]
    gen_dmem_host.io.reqIn.bits.activeByteLane <= core.io.dmemReq.bits.activeByteLane @[Generator.scala 237:28]
    gen_dmem_host.io.reqIn.bits.dataRequest <= core.io.dmemReq.bits.dataRequest @[Generator.scala 237:28]
    gen_dmem_host.io.reqIn.bits.addrRequest <= core.io.dmemReq.bits.addrRequest @[Generator.scala 237:28]
    gen_dmem_host.io.reqIn.valid <= core.io.dmemReq.valid @[Generator.scala 237:28]
    core.io.dmemReq.ready <= gen_dmem_host.io.reqIn.ready @[Generator.scala 237:28]
    core.io.dmemRsp.bits.error <= gen_dmem_host.io.rspOut.bits.error @[Generator.scala 238:21]
    core.io.dmemRsp.bits.dataResponse <= gen_dmem_host.io.rspOut.bits.dataResponse @[Generator.scala 238:21]
    core.io.dmemRsp.valid <= gen_dmem_host.io.rspOut.valid @[Generator.scala 238:21]
    gen_dmem_host.io.rspOut.ready <= core.io.dmemRsp.ready @[Generator.scala 238:21]
    dmem.io.req.bits.isWrite <= gen_dmem_slave.io.reqOut.bits.isWrite @[Generator.scala 239:30]
    dmem.io.req.bits.activeByteLane <= gen_dmem_slave.io.reqOut.bits.activeByteLane @[Generator.scala 239:30]
    dmem.io.req.bits.dataRequest <= gen_dmem_slave.io.reqOut.bits.dataRequest @[Generator.scala 239:30]
    dmem.io.req.bits.addrRequest <= gen_dmem_slave.io.reqOut.bits.addrRequest @[Generator.scala 239:30]
    dmem.io.req.valid <= gen_dmem_slave.io.reqOut.valid @[Generator.scala 239:30]
    gen_dmem_slave.io.reqOut.ready <= dmem.io.req.ready @[Generator.scala 239:30]
    gen_dmem_slave.io.rspIn.bits.error <= dmem.io.rsp.bits.error @[Generator.scala 240:29]
    gen_dmem_slave.io.rspIn.bits.dataResponse <= dmem.io.rsp.bits.dataResponse @[Generator.scala 240:29]
    gen_dmem_slave.io.rspIn.valid <= dmem.io.rsp.valid @[Generator.scala 240:29]
    dmem.io.rsp.ready <= gen_dmem_slave.io.rspIn.ready @[Generator.scala 240:29]
    switch.io.hostIn.bits.sel <= gen_dmem_host.io.wbMasterTransmitter.bits.sel @[Generator.scala 244:22]
    switch.io.hostIn.bits.dat <= gen_dmem_host.io.wbMasterTransmitter.bits.dat @[Generator.scala 244:22]
    switch.io.hostIn.bits.adr <= gen_dmem_host.io.wbMasterTransmitter.bits.adr @[Generator.scala 244:22]
    switch.io.hostIn.bits.we <= gen_dmem_host.io.wbMasterTransmitter.bits.we @[Generator.scala 244:22]
    switch.io.hostIn.bits.stb <= gen_dmem_host.io.wbMasterTransmitter.bits.stb @[Generator.scala 244:22]
    switch.io.hostIn.bits.cyc <= gen_dmem_host.io.wbMasterTransmitter.bits.cyc @[Generator.scala 244:22]
    switch.io.hostIn.valid <= gen_dmem_host.io.wbMasterTransmitter.valid @[Generator.scala 244:22]
    gen_dmem_host.io.wbMasterTransmitter.ready <= switch.io.hostIn.ready @[Generator.scala 244:22]
    gen_dmem_host.io.wbSlaveReceiver.bits.err <= switch.io.hostOut.bits.err @[Generator.scala 245:23]
    gen_dmem_host.io.wbSlaveReceiver.bits.dat <= switch.io.hostOut.bits.dat @[Generator.scala 245:23]
    gen_dmem_host.io.wbSlaveReceiver.bits.ack <= switch.io.hostOut.bits.ack @[Generator.scala 245:23]
    gen_dmem_host.io.wbSlaveReceiver.valid <= switch.io.hostOut.valid @[Generator.scala 245:23]
    switch.io.hostOut.ready <= gen_dmem_host.io.wbSlaveReceiver.ready @[Generator.scala 245:23]
    switch.io.devIn[0].bits.err <= gen_dmem_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[0].bits.dat <= gen_dmem_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[0].bits.ack <= gen_dmem_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[0].valid <= gen_dmem_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_dmem_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[0].ready @[Generator.scala 247:55]
    gen_dmem_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[0].bits.sel @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[0].bits.dat @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[0].bits.adr @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[0].bits.we @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[0].bits.stb @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[0].bits.cyc @[Generator.scala 248:56]
    gen_dmem_slave.io.wbMasterReceiver.valid <= switch.io.devOut[0].valid @[Generator.scala 248:56]
    switch.io.devOut[0].ready <= gen_dmem_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[6].bits.err <= gen_i2c_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[6].bits.dat <= gen_i2c_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[6].bits.ack <= gen_i2c_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[6].valid <= gen_i2c_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_i2c_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[6].ready @[Generator.scala 247:55]
    gen_i2c_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[6].bits.sel @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[6].bits.dat @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[6].bits.adr @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[6].bits.we @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[6].bits.stb @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[6].bits.cyc @[Generator.scala 248:56]
    gen_i2c_slave.io.wbMasterReceiver.valid <= switch.io.devOut[6].valid @[Generator.scala 248:56]
    switch.io.devOut[6].ready <= gen_i2c_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[4].bits.err <= gen_timer_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[4].bits.dat <= gen_timer_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[4].bits.ack <= gen_timer_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[4].valid <= gen_timer_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_timer_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[4].ready @[Generator.scala 247:55]
    gen_timer_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[4].bits.sel @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[4].bits.dat @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[4].bits.adr @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[4].bits.we @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[4].bits.stb @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[4].bits.cyc @[Generator.scala 248:56]
    gen_timer_slave.io.wbMasterReceiver.valid <= switch.io.devOut[4].valid @[Generator.scala 248:56]
    switch.io.devOut[4].ready <= gen_timer_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[5].bits.err <= gen_spi_flash_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[5].bits.dat <= gen_spi_flash_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[5].bits.ack <= gen_spi_flash_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[5].valid <= gen_spi_flash_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_spi_flash_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[5].ready @[Generator.scala 247:55]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[5].bits.sel @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[5].bits.dat @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[5].bits.adr @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[5].bits.we @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[5].bits.stb @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[5].bits.cyc @[Generator.scala 248:56]
    gen_spi_flash_slave.io.wbMasterReceiver.valid <= switch.io.devOut[5].valid @[Generator.scala 248:56]
    switch.io.devOut[5].ready <= gen_spi_flash_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[3].bits.err <= gen_uart_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[3].bits.dat <= gen_uart_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[3].bits.ack <= gen_uart_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[3].valid <= gen_uart_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_uart_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[3].ready @[Generator.scala 247:55]
    gen_uart_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[3].bits.sel @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[3].bits.dat @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[3].bits.adr @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[3].bits.we @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[3].bits.stb @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[3].bits.cyc @[Generator.scala 248:56]
    gen_uart_slave.io.wbMasterReceiver.valid <= switch.io.devOut[3].valid @[Generator.scala 248:56]
    switch.io.devOut[3].ready <= gen_uart_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[1].bits.err <= gen_gpio_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[1].bits.dat <= gen_gpio_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[1].bits.ack <= gen_gpio_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[1].valid <= gen_gpio_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_gpio_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[1].ready @[Generator.scala 247:55]
    gen_gpio_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[1].bits.sel @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[1].bits.dat @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[1].bits.adr @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[1].bits.we @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[1].bits.stb @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[1].bits.cyc @[Generator.scala 248:56]
    gen_gpio_slave.io.wbMasterReceiver.valid <= switch.io.devOut[1].valid @[Generator.scala 248:56]
    switch.io.devOut[1].ready <= gen_gpio_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[2].bits.err <= gen_spi_slave.io.wbSlaveTransmitter.bits.err @[Generator.scala 247:55]
    switch.io.devIn[2].bits.dat <= gen_spi_slave.io.wbSlaveTransmitter.bits.dat @[Generator.scala 247:55]
    switch.io.devIn[2].bits.ack <= gen_spi_slave.io.wbSlaveTransmitter.bits.ack @[Generator.scala 247:55]
    switch.io.devIn[2].valid <= gen_spi_slave.io.wbSlaveTransmitter.valid @[Generator.scala 247:55]
    gen_spi_slave.io.wbSlaveTransmitter.ready <= switch.io.devIn[2].ready @[Generator.scala 247:55]
    gen_spi_slave.io.wbMasterReceiver.bits.sel <= switch.io.devOut[2].bits.sel @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.bits.dat <= switch.io.devOut[2].bits.dat @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.bits.adr <= switch.io.devOut[2].bits.adr @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.bits.we <= switch.io.devOut[2].bits.we @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.bits.stb <= switch.io.devOut[2].bits.stb @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[2].bits.cyc @[Generator.scala 248:56]
    gen_spi_slave.io.wbMasterReceiver.valid <= switch.io.devOut[2].valid @[Generator.scala 248:56]
    switch.io.devOut[2].ready <= gen_spi_slave.io.wbMasterReceiver.ready @[Generator.scala 248:56]
    switch.io.devIn[7].bits.err <= wbErr.io.wbSlaveTransmitter.bits.err @[Generator.scala 250:35]
    switch.io.devIn[7].bits.dat <= wbErr.io.wbSlaveTransmitter.bits.dat @[Generator.scala 250:35]
    switch.io.devIn[7].bits.ack <= wbErr.io.wbSlaveTransmitter.bits.ack @[Generator.scala 250:35]
    switch.io.devIn[7].valid <= wbErr.io.wbSlaveTransmitter.valid @[Generator.scala 250:35]
    wbErr.io.wbSlaveTransmitter.ready <= switch.io.devIn[7].ready @[Generator.scala 250:35]
    wbErr.io.wbMasterReceiver.bits.sel <= switch.io.devOut[7].bits.sel @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.bits.dat <= switch.io.devOut[7].bits.dat @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.bits.adr <= switch.io.devOut[7].bits.adr @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.bits.we <= switch.io.devOut[7].bits.we @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.bits.stb <= switch.io.devOut[7].bits.stb @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.bits.cyc <= switch.io.devOut[7].bits.cyc @[Generator.scala 251:36]
    wbErr.io.wbMasterReceiver.valid <= switch.io.devOut[7].valid @[Generator.scala 251:36]
    switch.io.devOut[7].ready <= wbErr.io.wbMasterReceiver.ready @[Generator.scala 251:36]
    wire switch_io_devSel_addr_hit : UInt<1>[7] @[BusDecoder.scala 37:24]
    wire switch_io_devSel_id : UInt<3>[7] @[BusDecoder.scala 39:18]
    node _switch_io_devSel_addr_hit_0_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_0_T_1 = and(_switch_io_devSel_addr_hit_0_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_0_T_2 = eq(_switch_io_devSel_addr_hit_0_T_1, UInt<32>("h040005000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[0] <= _switch_io_devSel_addr_hit_0_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_0_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_0_T_1 = and(_switch_io_devSel_id_0_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_0_T_2 = eq(_switch_io_devSel_id_0_T_1, UInt<32>("h040005000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_0_T_3 = asUInt(UInt<3>("h06")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_0_T_4 = mux(_switch_io_devSel_id_0_T_2, _switch_io_devSel_id_0_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[0] <= _switch_io_devSel_id_0_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_1_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_1_T_1 = and(_switch_io_devSel_addr_hit_1_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_1_T_2 = eq(_switch_io_devSel_addr_hit_1_T_1, UInt<32>("h040002000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[1] <= _switch_io_devSel_addr_hit_1_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_1_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_1_T_1 = and(_switch_io_devSel_id_1_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_1_T_2 = eq(_switch_io_devSel_id_1_T_1, UInt<32>("h040002000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_1_T_3 = asUInt(UInt<2>("h02")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_1_T_4 = mux(_switch_io_devSel_id_1_T_2, _switch_io_devSel_id_1_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[1] <= _switch_io_devSel_id_1_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_2_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_2_T_1 = and(_switch_io_devSel_addr_hit_2_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_2_T_2 = eq(_switch_io_devSel_addr_hit_2_T_1, UInt<32>("h040001000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[2] <= _switch_io_devSel_addr_hit_2_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_2_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_2_T_1 = and(_switch_io_devSel_id_2_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_2_T_2 = eq(_switch_io_devSel_id_2_T_1, UInt<32>("h040001000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_2_T_3 = asUInt(UInt<1>("h01")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_2_T_4 = mux(_switch_io_devSel_id_2_T_2, _switch_io_devSel_id_2_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[2] <= _switch_io_devSel_id_2_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_3_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_3_T_1 = and(_switch_io_devSel_addr_hit_3_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_3_T_2 = eq(_switch_io_devSel_addr_hit_3_T_1, UInt<32>("h040003000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[3] <= _switch_io_devSel_addr_hit_3_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_3_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_3_T_1 = and(_switch_io_devSel_id_3_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_3_T_2 = eq(_switch_io_devSel_id_3_T_1, UInt<32>("h040003000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_3_T_3 = asUInt(UInt<2>("h03")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_3_T_4 = mux(_switch_io_devSel_id_3_T_2, _switch_io_devSel_id_3_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[3] <= _switch_io_devSel_id_3_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_4_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_4_T_1 = and(_switch_io_devSel_addr_hit_4_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_4_T_2 = eq(_switch_io_devSel_addr_hit_4_T_1, UInt<32>("h040006000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[4] <= _switch_io_devSel_addr_hit_4_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_4_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_4_T_1 = and(_switch_io_devSel_id_4_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_4_T_2 = eq(_switch_io_devSel_id_4_T_1, UInt<32>("h040006000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_4_T_3 = asUInt(UInt<3>("h04")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_4_T_4 = mux(_switch_io_devSel_id_4_T_2, _switch_io_devSel_id_4_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[4] <= _switch_io_devSel_id_4_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_5_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_5_T_1 = and(_switch_io_devSel_addr_hit_5_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_5_T_2 = eq(_switch_io_devSel_addr_hit_5_T_1, UInt<32>("h040004000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[5] <= _switch_io_devSel_addr_hit_5_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_5_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_5_T_1 = and(_switch_io_devSel_id_5_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_5_T_2 = eq(_switch_io_devSel_id_5_T_1, UInt<32>("h040004000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_5_T_3 = asUInt(UInt<3>("h05")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_5_T_4 = mux(_switch_io_devSel_id_5_T_2, _switch_io_devSel_id_5_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[5] <= _switch_io_devSel_id_5_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_addr_hit_6_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 45:23]
    node _switch_io_devSel_addr_hit_6_T_1 = and(_switch_io_devSel_addr_hit_6_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 45:60]
    node _switch_io_devSel_addr_hit_6_T_2 = eq(_switch_io_devSel_addr_hit_6_T_1, UInt<32>("h040000000")) @[BusDecoder.scala 45:68]
    switch_io_devSel_addr_hit[6] <= _switch_io_devSel_addr_hit_6_T_2 @[BusDecoder.scala 45:19]
    node _switch_io_devSel_id_6_T = not(UInt<32>("h0fff")) @[BusDecoder.scala 46:21]
    node _switch_io_devSel_id_6_T_1 = and(_switch_io_devSel_id_6_T, gen_dmem_host.io.wbMasterTransmitter.bits.adr) @[BusDecoder.scala 46:58]
    node _switch_io_devSel_id_6_T_2 = eq(_switch_io_devSel_id_6_T_1, UInt<32>("h040000000")) @[BusDecoder.scala 46:66]
    node _switch_io_devSel_id_6_T_3 = asUInt(UInt<1>("h00")) @[BusDecoder.scala 47:52]
    node _switch_io_devSel_id_6_T_4 = mux(_switch_io_devSel_id_6_T_2, _switch_io_devSel_id_6_T_3, UInt<3>("h07")) @[BusDecoder.scala 46:19]
    switch_io_devSel_id[6] <= _switch_io_devSel_id_6_T_4 @[BusDecoder.scala 46:13]
    node _switch_io_devSel_T = mux(switch_io_devSel_addr_hit[6], switch_io_devSel_id[6], UInt<3>("h07")) @[Mux.scala 98:16]
    node _switch_io_devSel_T_1 = mux(switch_io_devSel_addr_hit[5], switch_io_devSel_id[5], _switch_io_devSel_T) @[Mux.scala 98:16]
    node _switch_io_devSel_T_2 = mux(switch_io_devSel_addr_hit[4], switch_io_devSel_id[4], _switch_io_devSel_T_1) @[Mux.scala 98:16]
    node _switch_io_devSel_T_3 = mux(switch_io_devSel_addr_hit[3], switch_io_devSel_id[3], _switch_io_devSel_T_2) @[Mux.scala 98:16]
    node _switch_io_devSel_T_4 = mux(switch_io_devSel_addr_hit[2], switch_io_devSel_id[2], _switch_io_devSel_T_3) @[Mux.scala 98:16]
    node _switch_io_devSel_T_5 = mux(switch_io_devSel_addr_hit[1], switch_io_devSel_id[1], _switch_io_devSel_T_4) @[Mux.scala 98:16]
    node _switch_io_devSel_T_6 = mux(switch_io_devSel_addr_hit[0], switch_io_devSel_id[0], _switch_io_devSel_T_5) @[Mux.scala 98:16]
    switch.io.devSel <= _switch_io_devSel_T_6 @[Generator.scala 252:22]
    

;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit SpiFlashHarnessTL : 
  module TilelinkHost : 
    input clock : Clock
    input reset : Reset
    output io : {tlMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<4>, a_corrupt : UInt<1>, a_data : UInt<32>}}, flip tlSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<32>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 19:27]
    reg addrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 20:27]
    io.tlSlaveReceiver.ready <= UInt<1>("h00") @[TilelinkHost.scala 32:33]
    io.reqIn.ready <= UInt<1>("h01") @[TilelinkHost.scala 33:33]
    io.tlMasterTransmitter.bits.a_opcode <= UInt<1>("h00") @[TilelinkHost.scala 40:45]
    io.tlMasterTransmitter.bits.a_data <= UInt<1>("h00") @[TilelinkHost.scala 41:45]
    io.tlMasterTransmitter.bits.a_address <= addrReg @[TilelinkHost.scala 42:45]
    io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 43:45]
    io.tlMasterTransmitter.bits.a_source <= UInt<1>("h00") @[TilelinkHost.scala 44:45]
    io.tlMasterTransmitter.bits.a_size <= UInt<1>("h00") @[TilelinkHost.scala 45:45]
    io.tlMasterTransmitter.bits.a_mask <= UInt<1>("h00") @[TilelinkHost.scala 46:45]
    io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 47:45]
    io.tlMasterTransmitter.valid <= UInt<1>("h00") @[TilelinkHost.scala 48:45]
    io.rspOut.bits.dataResponse <= UInt<1>("h00") @[TilelinkHost.scala 50:45]
    io.rspOut.bits.error <= UInt<1>("h00") @[TilelinkHost.scala 51:45]
    io.rspOut.valid <= UInt<1>("h00") @[TilelinkHost.scala 53:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkHost.scala 56:19]
    when _T : @[TilelinkHost.scala 56:28]
      when io.reqIn.valid : @[TilelinkHost.scala 60:29]
        node _io_tlMasterTransmitter_bits_a_opcode_T = eq(io.reqIn.bits.activeByteLane, UInt<4>("h0f")) @[TilelinkHost.scala 62:116]
        node _io_tlMasterTransmitter_bits_a_opcode_T_1 = mux(_io_tlMasterTransmitter_bits_a_opcode_T, UInt<1>("h00"), UInt<1>("h01")) @[TilelinkHost.scala 62:86]
        node _io_tlMasterTransmitter_bits_a_opcode_T_2 = mux(io.reqIn.bits.isWrite, _io_tlMasterTransmitter_bits_a_opcode_T_1, UInt<3>("h04")) @[TilelinkHost.scala 62:59]
        io.tlMasterTransmitter.bits.a_opcode <= _io_tlMasterTransmitter_bits_a_opcode_T_2 @[TilelinkHost.scala 62:53]
        io.tlMasterTransmitter.bits.a_data <= io.reqIn.bits.dataRequest @[TilelinkHost.scala 63:53]
        io.tlMasterTransmitter.bits.a_address <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 64:53]
        io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 65:53]
        io.tlMasterTransmitter.bits.a_source <= UInt<2>("h02") @[TilelinkHost.scala 66:53]
        node _io_tlMasterTransmitter_bits_a_size_T = eq(UInt<1>("h01"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_1 = mux(_io_tlMasterTransmitter_bits_a_size_T, UInt<1>("h00"), UInt<2>("h02")) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_2 = eq(UInt<2>("h02"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_3 = mux(_io_tlMasterTransmitter_bits_a_size_T_2, UInt<1>("h01"), _io_tlMasterTransmitter_bits_a_size_T_1) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_4 = eq(UInt<3>("h04"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_5 = mux(_io_tlMasterTransmitter_bits_a_size_T_4, UInt<2>("h02"), _io_tlMasterTransmitter_bits_a_size_T_3) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_6 = eq(UInt<4>("h08"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_7 = mux(_io_tlMasterTransmitter_bits_a_size_T_6, UInt<2>("h03"), _io_tlMasterTransmitter_bits_a_size_T_5) @[Mux.scala 80:57]
        io.tlMasterTransmitter.bits.a_size <= _io_tlMasterTransmitter_bits_a_size_T_7 @[TilelinkHost.scala 67:53]
        io.tlMasterTransmitter.bits.a_mask <= io.reqIn.bits.activeByteLane @[TilelinkHost.scala 73:53]
        io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 74:53]
        io.tlMasterTransmitter.valid <= io.reqIn.valid @[TilelinkHost.scala 75:53]
        stateReg <= UInt<1>("h01") @[TilelinkHost.scala 77:22]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 78:38]
        addrReg <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 79:21]
        skip @[TilelinkHost.scala 60:29]
      skip @[TilelinkHost.scala 56:28]
    else : @[TilelinkHost.scala 84:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkHost.scala 84:25]
      when _T_1 : @[TilelinkHost.scala 84:43]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 86:34]
        io.reqIn.ready <= UInt<1>("h00") @[TilelinkHost.scala 87:34]
        when io.tlSlaveReceiver.valid : @[TilelinkHost.scala 89:39]
          io.rspOut.bits.dataResponse <= io.tlSlaveReceiver.bits.d_data @[TilelinkHost.scala 91:41]
          io.rspOut.bits.error <= io.tlSlaveReceiver.bits.d_denied @[TilelinkHost.scala 92:34]
          io.rspOut.valid <= io.tlSlaveReceiver.valid @[TilelinkHost.scala 94:29]
          stateReg <= UInt<1>("h00") @[TilelinkHost.scala 95:22]
          skip @[TilelinkHost.scala 89:39]
        skip @[TilelinkHost.scala 84:43]
    
  module TilelinkDevice : 
    input clock : Clock
    input reset : Reset
    output io : {tlSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<32>}}, flip tlMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<4>, a_corrupt : UInt<1>, a_data : UInt<32>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkDevice.scala 17:27]
    io.tlMasterReceiver.ready <= UInt<1>("h01") @[TilelinkDevice.scala 19:31]
    io.rspIn.ready <= UInt<1>("h00") @[TilelinkDevice.scala 20:20]
    io.reqOut.bits.addrRequest <= UInt<1>("h00") @[TilelinkDevice.scala 23:37]
    io.reqOut.bits.dataRequest <= UInt<1>("h00") @[TilelinkDevice.scala 24:37]
    io.reqOut.bits.activeByteLane <= UInt<1>("h00") @[TilelinkDevice.scala 25:37]
    io.reqOut.bits.isWrite <= UInt<1>("h00") @[TilelinkDevice.scala 26:37]
    io.reqOut.valid <= UInt<1>("h00") @[TilelinkDevice.scala 27:37]
    io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h00") @[TilelinkDevice.scala 29:45]
    io.tlSlaveTransmitter.bits.d_data <= UInt<1>("h00") @[TilelinkDevice.scala 30:45]
    io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 31:45]
    io.tlSlaveTransmitter.bits.d_size <= UInt<1>("h00") @[TilelinkDevice.scala 32:45]
    io.tlSlaveTransmitter.bits.d_source <= UInt<1>("h00") @[TilelinkDevice.scala 33:45]
    io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 34:45]
    io.tlSlaveTransmitter.bits.d_denied <= UInt<1>("h00") @[TilelinkDevice.scala 35:45]
    io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 36:45]
    io.tlSlaveTransmitter.valid <= UInt<1>("h00") @[TilelinkDevice.scala 37:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkDevice.scala 41:19]
    when _T : @[TilelinkDevice.scala 41:28]
      when io.tlMasterReceiver.valid : @[TilelinkDevice.scala 43:40]
        io.reqOut.bits.addrRequest <= io.tlMasterReceiver.bits.a_address @[TilelinkDevice.scala 45:40]
        io.reqOut.bits.dataRequest <= io.tlMasterReceiver.bits.a_data @[TilelinkDevice.scala 46:40]
        io.reqOut.bits.activeByteLane <= io.tlMasterReceiver.bits.a_mask @[TilelinkDevice.scala 47:43]
        node _io_reqOut_bits_isWrite_T = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h00")) @[TilelinkDevice.scala 48:73]
        node _io_reqOut_bits_isWrite_T_1 = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h01")) @[TilelinkDevice.scala 48:128]
        node _io_reqOut_bits_isWrite_T_2 = or(_io_reqOut_bits_isWrite_T, _io_reqOut_bits_isWrite_T_1) @[TilelinkDevice.scala 48:91]
        io.reqOut.bits.isWrite <= _io_reqOut_bits_isWrite_T_2 @[TilelinkDevice.scala 48:36]
        io.reqOut.valid <= UInt<1>("h01") @[TilelinkDevice.scala 49:29]
        stateReg <= UInt<1>("h01") @[TilelinkDevice.scala 51:22]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 52:28]
        skip @[TilelinkDevice.scala 43:40]
      skip @[TilelinkDevice.scala 41:28]
    else : @[TilelinkDevice.scala 56:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkDevice.scala 56:25]
      when _T_1 : @[TilelinkDevice.scala 56:43]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 58:24]
        when io.rspIn.valid : @[TilelinkDevice.scala 60:29]
          io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h01") @[TilelinkDevice.scala 62:49]
          io.tlSlaveTransmitter.bits.d_data <= io.rspIn.bits.dataResponse @[TilelinkDevice.scala 63:47]
          io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 64:48]
          io.tlSlaveTransmitter.bits.d_size <= io.tlMasterReceiver.bits.a_size @[TilelinkDevice.scala 65:47]
          io.tlSlaveTransmitter.bits.d_source <= io.tlMasterReceiver.bits.a_source @[TilelinkDevice.scala 66:49]
          io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 67:47]
          io.tlSlaveTransmitter.bits.d_denied <= io.rspIn.bits.error @[TilelinkDevice.scala 68:49]
          io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 69:50]
          io.tlSlaveTransmitter.valid <= io.rspIn.valid @[TilelinkDevice.scala 70:41]
          stateReg <= UInt<1>("h00") @[TilelinkDevice.scala 72:22]
          skip @[TilelinkDevice.scala 60:29]
        skip @[TilelinkDevice.scala 56:43]
    
  module Protocol : 
    input clock : Clock
    input reset : Reset
    output io : {flip miso : UInt<1>, mosi : UInt<1>, ss : UInt<1>, sck : UInt<1>, flip data_in : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, data_out : {flip ready : UInt<1>, valid : UInt<1>, bits : UInt<32>}, flip CPOL : UInt<1>, flip CPHA : UInt<1>}
    
    wire CPOL : UInt<1>
    CPOL <= io.CPOL
    wire CPHA : UInt<1>
    CPHA <= io.CPHA
    reg state : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Protocol.scala 28:24]
    reg miso_dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Protocol.scala 30:31]
    reg count : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 31:24]
    reg dataReg : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[Protocol.scala 32:26]
    node _clk_T = asUInt(clock) @[Protocol.scala 34:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[Protocol.scala 34:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _io_sck_T = eq(state, UInt<1>("h01")) @[Protocol.scala 35:25]
    node _io_sck_T_1 = not(clk) @[Protocol.scala 35:44]
    node _io_sck_T_2 = mux(CPOL, _io_sck_T_1, clk) @[Protocol.scala 35:38]
    node _io_sck_T_3 = mux(_io_sck_T, _io_sck_T_2, UInt<1>("h00")) @[Protocol.scala 35:18]
    io.sck <= _io_sck_T_3 @[Protocol.scala 35:12]
    io.data_in.ready <= UInt<1>("h00") @[Protocol.scala 39:22]
    io.data_out.valid <= UInt<1>("h00") @[Protocol.scala 40:23]
    io.data_out.bits <= UInt<1>("h00") @[Protocol.scala 41:22]
    io.ss <= UInt<1>("h01") @[Protocol.scala 42:11]
    io.mosi <= UInt<1>("h00") @[Protocol.scala 43:13]
    node _T = eq(UInt<1>("h00"), state) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 48:30]
      when io.data_in.valid : @[Protocol.scala 49:59]
        node dataReg_lo = mux(UInt<1>("h00"), UInt<32>("h0ffffffff"), UInt<32>("h00")) @[Bitwise.scala 72:12]
        node _dataReg_T = cat(io.data_in.bits, dataReg_lo) @[Cat.scala 30:58]
        dataReg <= _dataReg_T @[Protocol.scala 50:25]
        state <= UInt<1>("h01") @[Protocol.scala 51:23]
        skip @[Protocol.scala 49:59]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        node _T_2 = eq(count, UInt<7>("h040")) @[Protocol.scala 60:25]
        when _T_2 : @[Protocol.scala 60:38]
          io.data_in.ready <= UInt<1>("h01") @[Protocol.scala 61:34]
          io.ss <= UInt<1>("h01") @[Protocol.scala 62:23]
          state <= UInt<1>("h00") @[Protocol.scala 63:23]
          count <= UInt<1>("h00") @[Protocol.scala 64:23]
          skip @[Protocol.scala 60:38]
        else : @[Protocol.scala 65:24]
          io.ss <= UInt<1>("h00") @[Protocol.scala 66:23]
          node _io_mosi_T = bits(dataReg, 63, 63) @[Protocol.scala 67:35]
          io.mosi <= _io_mosi_T @[Protocol.scala 67:25]
          node _dataReg_T_1 = shl(dataReg, 1) @[Protocol.scala 68:36]
          dataReg <= _dataReg_T_1 @[Protocol.scala 68:25]
          node _count_T = add(count, UInt<1>("h01")) @[Protocol.scala 69:32]
          node _count_T_1 = tail(_count_T, 1) @[Protocol.scala 69:32]
          count <= _count_T_1 @[Protocol.scala 69:23]
          skip @[Protocol.scala 65:24]
        skip @[Conditional.scala 39:67]
    reg count1 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Protocol.scala 75:25]
    node _T_3 = eq(UInt<1>("h01"), state) @[Conditional.scala 37:30]
    when _T_3 : @[Conditional.scala 40:58]
      io.ss <= UInt<1>("h00") @[Protocol.scala 78:19]
      node _T_4 = eq(count1, UInt<7>("h040")) @[Protocol.scala 79:26]
      when _T_4 : @[Protocol.scala 79:63]
        io.data_out.bits <= miso_dataReg @[Protocol.scala 80:34]
        io.data_out.valid <= UInt<1>("h01") @[Protocol.scala 81:35]
        count1 <= UInt<1>("h00") @[Protocol.scala 82:24]
        skip @[Protocol.scala 79:63]
      else : @[Protocol.scala 83:24]
        node _miso_dataReg_T = shl(miso_dataReg, 1) @[Protocol.scala 84:46]
        node _miso_dataReg_T_1 = or(_miso_dataReg_T, io.miso) @[Protocol.scala 84:51]
        miso_dataReg <= _miso_dataReg_T_1 @[Protocol.scala 84:30]
        node _count1_T = add(count1, UInt<1>("h01")) @[Protocol.scala 85:34]
        node _count1_T_1 = tail(_count1_T, 1) @[Protocol.scala 85:34]
        count1 <= _count1_T_1 @[Protocol.scala 85:24]
        skip @[Protocol.scala 83:24]
      skip @[Conditional.scala 40:58]
    
  module SpiFlash : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cs_n : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}
    
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h060"))) @[SpiFlash.scala 28:29]
    reg TxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SpiFlash.scala 29:31]
    reg TxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 30:33]
    reg RxDataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[SpiFlash.scala 31:31]
    reg RxDataValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 32:33]
    wire maskedData : UInt<8>[4] @[SpiFlash.scala 34:26]
    wire _WIRE : UInt<1>[4] @[SpiFlash.scala 35:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[SpiFlash.scala 35:54]
    _WIRE[0] <= _T @[SpiFlash.scala 35:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[SpiFlash.scala 35:54]
    _WIRE[1] <= _T_1 @[SpiFlash.scala 35:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[SpiFlash.scala 35:54]
    _WIRE[2] <= _T_2 @[SpiFlash.scala 35:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[SpiFlash.scala 35:54]
    _WIRE[3] <= _T_3 @[SpiFlash.scala 35:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[SpiFlash.scala 35:16]
    maskedData[1] <= _T_7 @[SpiFlash.scala 35:16]
    maskedData[2] <= _T_9 @[SpiFlash.scala 35:16]
    maskedData[3] <= _T_11 @[SpiFlash.scala 35:16]
    io.req.ready <= UInt<1>("h01") @[SpiFlash.scala 37:18]
    io.rsp.valid <= UInt<1>("h00") @[SpiFlash.scala 38:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 41:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[SpiFlash.scala 41:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[SpiFlash.scala 41:71]
    node _T_15 = and(_T_13, _T_14) @[SpiFlash.scala 41:48]
    when _T_15 : @[SpiFlash.scala 41:79]
      node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 42:78]
      node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 42:78]
      node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[SpiFlash.scala 42:78]
      node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[SpiFlash.scala 42:65]
      node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[SpiFlash.scala 42:26]
      ControlReg <= _ControlReg_T_2 @[SpiFlash.scala 42:20]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[SpiFlash.scala 44:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[SpiFlash.scala 44:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[SpiFlash.scala 44:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[SpiFlash.scala 44:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[SpiFlash.scala 45:32]
      io_rsp_valid_REG <= io.req.valid @[SpiFlash.scala 45:32]
      io.rsp.valid <= io_rsp_valid_REG @[SpiFlash.scala 45:22]
      skip @[SpiFlash.scala 41:79]
    else : @[SpiFlash.scala 51:83]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 51:38]
      node _T_17 = eq(_T_16, UInt<1>("h00")) @[SpiFlash.scala 51:44]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 51:75]
      node _T_19 = and(_T_17, _T_18) @[SpiFlash.scala 51:52]
      when _T_19 : @[SpiFlash.scala 51:83]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[SpiFlash.scala 52:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[SpiFlash.scala 52:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[SpiFlash.scala 52:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[SpiFlash.scala 52:34]
        node _io_rsp_valid_T = mux(io.req.valid, UInt<1>("h01"), UInt<1>("h00")) @[SpiFlash.scala 53:36]
        reg io_rsp_valid_REG_1 : UInt, clock @[SpiFlash.scala 53:32]
        io_rsp_valid_REG_1 <= _io_rsp_valid_T @[SpiFlash.scala 53:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[SpiFlash.scala 53:22]
        skip @[SpiFlash.scala 51:83]
      else : @[SpiFlash.scala 59:83]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 59:38]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[SpiFlash.scala 59:44]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[SpiFlash.scala 59:75]
        node _T_23 = and(_T_21, _T_22) @[SpiFlash.scala 59:52]
        when _T_23 : @[SpiFlash.scala 59:83]
          node _T_24 = bits(ControlReg, 4, 2) @[SpiFlash.scala 60:24]
          node _T_25 = eq(_T_24, UInt<1>("h00")) @[SpiFlash.scala 60:30]
          when _T_25 : @[SpiFlash.scala 60:38]
            node TxDataReg_lo = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 61:100]
            node TxDataReg_hi = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 61:100]
            node _TxDataReg_T = cat(TxDataReg_hi, TxDataReg_lo) @[SpiFlash.scala 61:100]
            node _TxDataReg_T_1 = and(io.req.bits.dataRequest, _TxDataReg_T) @[SpiFlash.scala 61:87]
            node TxDataReg_lo_1 = bits(_TxDataReg_T_1, 23, 0) @[SpiFlash.scala 61:107]
            node _TxDataReg_T_2 = cat(UInt<2>("h03"), TxDataReg_lo_1) @[Cat.scala 30:58]
            node _TxDataReg_T_3 = mux(io.req.valid, _TxDataReg_T_2, UInt<1>("h00")) @[SpiFlash.scala 61:29]
            TxDataReg <= _TxDataReg_T_3 @[SpiFlash.scala 61:23]
            TxDataValidReg <= io.req.valid @[SpiFlash.scala 62:28]
            skip @[SpiFlash.scala 60:38]
          else : @[SpiFlash.scala 64:43]
            node _T_26 = bits(ControlReg, 4, 2) @[SpiFlash.scala 64:29]
            node _T_27 = eq(_T_26, UInt<1>("h01")) @[SpiFlash.scala 64:35]
            when _T_27 : @[SpiFlash.scala 64:43]
              node TxDataReg_lo_2 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
              node _TxDataReg_T_4 = cat(UInt<3>("h06"), TxDataReg_lo_2) @[Cat.scala 30:58]
              node _TxDataReg_T_5 = mux(io.req.valid, _TxDataReg_T_4, UInt<1>("h00")) @[SpiFlash.scala 65:29]
              TxDataReg <= _TxDataReg_T_5 @[SpiFlash.scala 65:23]
              TxDataValidReg <= io.req.valid @[SpiFlash.scala 66:28]
              skip @[SpiFlash.scala 64:43]
            else : @[SpiFlash.scala 68:43]
              node _T_28 = bits(ControlReg, 4, 2) @[SpiFlash.scala 68:29]
              node _T_29 = eq(_T_28, UInt<2>("h02")) @[SpiFlash.scala 68:35]
              when _T_29 : @[SpiFlash.scala 68:43]
                node TxDataReg_lo_3 = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 69:100]
                node TxDataReg_hi_1 = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 69:100]
                node _TxDataReg_T_6 = cat(TxDataReg_hi_1, TxDataReg_lo_3) @[SpiFlash.scala 69:100]
                node _TxDataReg_T_7 = and(io.req.bits.dataRequest, _TxDataReg_T_6) @[SpiFlash.scala 69:87]
                node TxDataReg_lo_4 = bits(_TxDataReg_T_7, 23, 0) @[SpiFlash.scala 69:107]
                node _TxDataReg_T_8 = cat(UInt<2>("h02"), TxDataReg_lo_4) @[Cat.scala 30:58]
                node _TxDataReg_T_9 = mux(io.req.valid, _TxDataReg_T_8, UInt<1>("h00")) @[SpiFlash.scala 69:29]
                TxDataReg <= _TxDataReg_T_9 @[SpiFlash.scala 69:23]
                TxDataValidReg <= io.req.valid @[SpiFlash.scala 70:28]
                skip @[SpiFlash.scala 68:43]
              else : @[SpiFlash.scala 72:43]
                node _T_30 = bits(ControlReg, 4, 2) @[SpiFlash.scala 72:29]
                node _T_31 = eq(_T_30, UInt<2>("h03")) @[SpiFlash.scala 72:35]
                when _T_31 : @[SpiFlash.scala 72:43]
                  node TxDataReg_lo_5 = cat(maskedData[1], maskedData[0]) @[SpiFlash.scala 73:81]
                  node TxDataReg_hi_2 = cat(maskedData[3], maskedData[2]) @[SpiFlash.scala 73:81]
                  node _TxDataReg_T_10 = cat(TxDataReg_hi_2, TxDataReg_lo_5) @[SpiFlash.scala 73:81]
                  node _TxDataReg_T_11 = and(io.req.bits.dataRequest, _TxDataReg_T_10) @[SpiFlash.scala 73:68]
                  node _TxDataReg_T_12 = mux(io.req.valid, _TxDataReg_T_11, UInt<1>("h00")) @[SpiFlash.scala 73:29]
                  TxDataReg <= _TxDataReg_T_12 @[SpiFlash.scala 73:23]
                  TxDataValidReg <= io.req.valid @[SpiFlash.scala 74:28]
                  skip @[SpiFlash.scala 72:43]
                else : @[SpiFlash.scala 76:43]
                  node _T_32 = bits(ControlReg, 4, 2) @[SpiFlash.scala 76:29]
                  node _T_33 = eq(_T_32, UInt<3>("h04")) @[SpiFlash.scala 76:35]
                  when _T_33 : @[SpiFlash.scala 76:43]
                    node TxDataReg_lo_6 = mux(UInt<1>("h00"), UInt<24>("h0ffffff"), UInt<24>("h00")) @[Bitwise.scala 72:12]
                    node _TxDataReg_T_13 = cat(UInt<3>("h04"), TxDataReg_lo_6) @[Cat.scala 30:58]
                    node _TxDataReg_T_14 = mux(io.req.valid, _TxDataReg_T_13, UInt<1>("h00")) @[SpiFlash.scala 77:29]
                    TxDataReg <= _TxDataReg_T_14 @[SpiFlash.scala 77:23]
                    TxDataValidReg <= io.req.valid @[SpiFlash.scala 78:28]
                    skip @[SpiFlash.scala 76:43]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, io.req.bits.addrRequest, UInt<1>("h00")) @[SpiFlash.scala 82:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[SpiFlash.scala 82:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[SpiFlash.scala 82:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[SpiFlash.scala 82:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[SpiFlash.scala 83:32]
          io_rsp_valid_REG_2 <= UInt<1>("h01") @[SpiFlash.scala 83:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[SpiFlash.scala 83:22]
          skip @[SpiFlash.scala 59:83]
        else : @[SpiFlash.scala 88:83]
          node _T_34 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 88:38]
          node _T_35 = eq(_T_34, UInt<3>("h04")) @[SpiFlash.scala 88:44]
          node _T_36 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 88:75]
          node _T_37 = and(_T_35, _T_36) @[SpiFlash.scala 88:52]
          when _T_37 : @[SpiFlash.scala 88:83]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, TxDataReg, UInt<1>("h00")) @[SpiFlash.scala 89:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[SpiFlash.scala 89:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[SpiFlash.scala 89:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[SpiFlash.scala 89:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[SpiFlash.scala 90:32]
            io_rsp_valid_REG_3 <= io.req.valid @[SpiFlash.scala 90:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[SpiFlash.scala 90:22]
            skip @[SpiFlash.scala 88:83]
          else : @[SpiFlash.scala 95:83]
            node _T_38 = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 95:38]
            node _T_39 = eq(_T_38, UInt<4>("h08")) @[SpiFlash.scala 95:44]
            node _T_40 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[SpiFlash.scala 95:75]
            node _T_41 = and(_T_39, _T_40) @[SpiFlash.scala 95:52]
            when _T_41 : @[SpiFlash.scala 95:83]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, RxDataReg, UInt<1>("h00")) @[SpiFlash.scala 96:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[SpiFlash.scala 96:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[SpiFlash.scala 96:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[SpiFlash.scala 96:34]
              io.rsp.valid <= RxDataValidReg @[SpiFlash.scala 97:22]
              skip @[SpiFlash.scala 95:83]
            else : @[SpiFlash.scala 103:15]
              io.cs_n is invalid @[SpiFlash.scala 106:62]
              io.sclk is invalid @[SpiFlash.scala 106:62]
              io.mosi is invalid @[SpiFlash.scala 106:62]
              io.rsp.valid is invalid @[SpiFlash.scala 106:62]
              reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[SpiFlash.scala 107:44]
              io_rsp_bits_dataResponse_REG_5 <= io.req.bits.addrRequest @[SpiFlash.scala 107:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[SpiFlash.scala 107:34]
              skip @[SpiFlash.scala 103:15]
    inst spiProtocol of Protocol @[SpiFlash.scala 126:29]
    spiProtocol.clock <= clock
    spiProtocol.reset <= reset
    node _spiProtocol_clock_T = bits(ControlReg, 31, 5) @[SpiFlash.scala 128:45]
    node _spiProtocol_clock_T_1 = shr(_spiProtocol_clock_T, 1) @[SpiFlash.scala 122:54]
    node _spiProtocol_clock_T_2 = sub(_spiProtocol_clock_T_1, UInt<1>("h01")) @[SpiFlash.scala 116:36]
    node _spiProtocol_clock_T_3 = tail(_spiProtocol_clock_T_2, 1) @[SpiFlash.scala 116:36]
    reg spiProtocol_clock_x : UInt<26>, clock with : (reset => (reset, UInt<26>("h00"))) @[SpiFlash.scala 112:24]
    node _spiProtocol_clock_x_T = eq(spiProtocol_clock_x, _spiProtocol_clock_T_3) @[SpiFlash.scala 113:20]
    node _spiProtocol_clock_x_T_1 = add(spiProtocol_clock_x, UInt<1>("h01")) @[SpiFlash.scala 113:36]
    node _spiProtocol_clock_x_T_2 = tail(_spiProtocol_clock_x_T_1, 1) @[SpiFlash.scala 113:36]
    node _spiProtocol_clock_x_T_3 = mux(_spiProtocol_clock_x_T, UInt<1>("h00"), _spiProtocol_clock_x_T_2) @[SpiFlash.scala 113:17]
    spiProtocol_clock_x <= _spiProtocol_clock_x_T_3 @[SpiFlash.scala 113:11]
    node _spiProtocol_clock_T_4 = eq(spiProtocol_clock_x, UInt<1>("h00")) @[SpiFlash.scala 116:43]
    reg spiProtocol_clock_x_1 : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[SpiFlash.scala 118:24]
    node _spiProtocol_clock_x_T_4 = eq(spiProtocol_clock_x_1, UInt<1>("h00")) @[SpiFlash.scala 119:21]
    node _spiProtocol_clock_x_T_5 = mux(_spiProtocol_clock_T_4, _spiProtocol_clock_x_T_4, spiProtocol_clock_x_1) @[SpiFlash.scala 119:17]
    spiProtocol_clock_x_1 <= _spiProtocol_clock_x_T_5 @[SpiFlash.scala 119:11]
    node _spiProtocol_clock_T_5 = asClock(spiProtocol_clock_x_1) @[SpiFlash.scala 128:53]
    spiProtocol.clock <= _spiProtocol_clock_T_5 @[SpiFlash.scala 128:23]
    spiProtocol.io.data_in.bits <= TxDataReg @[SpiFlash.scala 129:34]
    spiProtocol.io.data_in.valid <= TxDataValidReg @[SpiFlash.scala 130:34]
    node _spiProtocol_io_CPOL_T = bits(ControlReg, 1, 1) @[SpiFlash.scala 131:38]
    spiProtocol.io.CPOL <= _spiProtocol_io_CPOL_T @[SpiFlash.scala 131:25]
    node _spiProtocol_io_CPHA_T = bits(ControlReg, 0, 0) @[SpiFlash.scala 132:38]
    spiProtocol.io.CPHA <= _spiProtocol_io_CPHA_T @[SpiFlash.scala 132:25]
    spiProtocol.io.miso <= io.miso @[SpiFlash.scala 133:25]
    spiProtocol.io.data_out.ready <= UInt<1>("h01") @[SpiFlash.scala 134:35]
    io.mosi <= spiProtocol.io.mosi @[SpiFlash.scala 135:121]
    io.sclk <= spiProtocol.io.sck @[SpiFlash.scala 135:121]
    io.cs_n <= spiProtocol.io.ss @[SpiFlash.scala 135:121]
    when spiProtocol.io.data_out.valid : @[SpiFlash.scala 136:40]
      RxDataReg <= spiProtocol.io.data_out.bits @[SpiFlash.scala 137:19]
      RxDataValidReg <= UInt<1>("h01") @[SpiFlash.scala 138:24]
      skip @[SpiFlash.scala 136:40]
    wire addr_hit : UInt<1>[3] @[SpiFlash.scala 143:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[SpiFlash.scala 145:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[SpiFlash.scala 146:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[SpiFlash.scala 152:39]
    addr_hit[0] <= _addr_hit_0_T @[SpiFlash.scala 152:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[SpiFlash.scala 152:39]
    addr_hit[1] <= _addr_hit_1_T @[SpiFlash.scala 152:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[SpiFlash.scala 152:39]
    addr_hit[2] <= _addr_hit_2_T @[SpiFlash.scala 152:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[SpiFlash.scala 160:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[SpiFlash.scala 160:37]
    node _addr_miss_T_2 = not(_addr_miss_T_1) @[SpiFlash.scala 160:18]
    addr_miss <= _addr_miss_T_2 @[SpiFlash.scala 160:15]
    node _T_42 = eq(wireAddr, UInt<4>("h08")) @[SpiFlash.scala 161:19]
    node _T_43 = and(_T_42, io.req.bits.isWrite) @[SpiFlash.scala 161:27]
    when _T_43 : @[SpiFlash.scala 161:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[SpiFlash.scala 161:78]
      io_rsp_bits_error_REG <= io.req.valid @[SpiFlash.scala 161:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[SpiFlash.scala 161:68]
      skip @[SpiFlash.scala 161:49]
    else : @[SpiFlash.scala 162:15]
      node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[SpiFlash.scala 162:58]
      reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[SpiFlash.scala 162:44]
      io_rsp_bits_error_REG_1 <= _io_rsp_bits_error_T @[SpiFlash.scala 162:44]
      io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[SpiFlash.scala 162:34]
      skip @[SpiFlash.scala 162:15]
    
  module SpiFlashHarnessTL : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cs_n : UInt<1>, sclk : UInt<1>, mosi : UInt<1>, flip miso : UInt<1>}
    
    inst hostAdapter of TilelinkHost @[SpiFlashHarness.scala 66:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of TilelinkDevice @[SpiFlashHarness.scala 67:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst spi of SpiFlash @[SpiFlashHarness.scala 68:19]
    spi.clock <= clock
    spi.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[SpiFlashHarness.scala 70:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[SpiFlashHarness.scala 70:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[SpiFlashHarness.scala 70:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[SpiFlashHarness.scala 70:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[SpiFlashHarness.scala 70:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[SpiFlashHarness.scala 70:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[SpiFlashHarness.scala 71:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[SpiFlashHarness.scala 71:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[SpiFlashHarness.scala 71:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[SpiFlashHarness.scala 71:10]
    deviceAdapter.io.tlMasterReceiver.bits.a_data <= hostAdapter.io.tlMasterTransmitter.bits.a_data @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_corrupt <= hostAdapter.io.tlMasterTransmitter.bits.a_corrupt @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_mask <= hostAdapter.io.tlMasterTransmitter.bits.a_mask @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_address <= hostAdapter.io.tlMasterTransmitter.bits.a_address @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_source <= hostAdapter.io.tlMasterTransmitter.bits.a_source @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_size <= hostAdapter.io.tlMasterTransmitter.bits.a_size @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_param <= hostAdapter.io.tlMasterTransmitter.bits.a_param @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_opcode <= hostAdapter.io.tlMasterTransmitter.bits.a_opcode @[SpiFlashHarness.scala 72:38]
    deviceAdapter.io.tlMasterReceiver.valid <= hostAdapter.io.tlMasterTransmitter.valid @[SpiFlashHarness.scala 72:38]
    hostAdapter.io.tlMasterTransmitter.ready <= deviceAdapter.io.tlMasterReceiver.ready @[SpiFlashHarness.scala 72:38]
    hostAdapter.io.tlSlaveReceiver.bits.d_data <= deviceAdapter.io.tlSlaveTransmitter.bits.d_data @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_corrupt <= deviceAdapter.io.tlSlaveTransmitter.bits.d_corrupt @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_denied <= deviceAdapter.io.tlSlaveTransmitter.bits.d_denied @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_sink <= deviceAdapter.io.tlSlaveTransmitter.bits.d_sink @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_source <= deviceAdapter.io.tlSlaveTransmitter.bits.d_source @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_size <= deviceAdapter.io.tlSlaveTransmitter.bits.d_size @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_param <= deviceAdapter.io.tlSlaveTransmitter.bits.d_param @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_opcode <= deviceAdapter.io.tlSlaveTransmitter.bits.d_opcode @[SpiFlashHarness.scala 73:34]
    hostAdapter.io.tlSlaveReceiver.valid <= deviceAdapter.io.tlSlaveTransmitter.valid @[SpiFlashHarness.scala 73:34]
    deviceAdapter.io.tlSlaveTransmitter.ready <= hostAdapter.io.tlSlaveReceiver.ready @[SpiFlashHarness.scala 73:34]
    spi.io.req.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[SpiFlashHarness.scala 75:14]
    spi.io.req.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[SpiFlashHarness.scala 75:14]
    spi.io.req.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[SpiFlashHarness.scala 75:14]
    spi.io.req.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[SpiFlashHarness.scala 75:14]
    spi.io.req.valid <= deviceAdapter.io.reqOut.valid @[SpiFlashHarness.scala 75:14]
    deviceAdapter.io.reqOut.ready <= spi.io.req.ready @[SpiFlashHarness.scala 75:14]
    deviceAdapter.io.rspIn.bits.error <= spi.io.rsp.bits.error @[SpiFlashHarness.scala 76:14]
    deviceAdapter.io.rspIn.bits.dataResponse <= spi.io.rsp.bits.dataResponse @[SpiFlashHarness.scala 76:14]
    deviceAdapter.io.rspIn.valid <= spi.io.rsp.valid @[SpiFlashHarness.scala 76:14]
    spi.io.rsp.ready <= deviceAdapter.io.rspIn.ready @[SpiFlashHarness.scala 76:14]
    io.cs_n <= spi.io.cs_n @[SpiFlashHarness.scala 79:13]
    io.sclk <= spi.io.sclk @[SpiFlashHarness.scala 80:13]
    io.mosi <= spi.io.mosi @[SpiFlashHarness.scala 81:13]
    spi.io.miso <= io.miso @[SpiFlashHarness.scala 83:17]
    

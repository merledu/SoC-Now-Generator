;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TopTL : 
  module InstructionFetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip address : UInt<32>, instruction : UInt<32>, coreInstrReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip coreInstrResp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    io.coreInstrResp.ready <= UInt<1>("h01") @[InstructionFetch.scala 17:26]
    io.coreInstrReq.bits.activeByteLane <= UInt<4>("h0f") @[InstructionFetch.scala 19:39]
    io.coreInstrReq.bits.isWrite <= UInt<1>("h00") @[InstructionFetch.scala 20:32]
    io.coreInstrReq.bits.dataRequest is invalid @[InstructionFetch.scala 21:36]
    io.coreInstrReq.bits.addrRequest <= io.address @[InstructionFetch.scala 23:36]
    node _T = mux(io.coreInstrReq.ready, UInt<1>("h01"), UInt<1>("h00")) @[InstructionFetch.scala 24:31]
    io.coreInstrReq.valid <= _T @[InstructionFetch.scala 24:25]
    wire _WIRE : UInt<256> @[InstructionFetch.scala 26:24]
    _WIRE is invalid @[InstructionFetch.scala 26:24]
    node _T_1 = mux(io.coreInstrResp.valid, io.coreInstrResp.bits.dataResponse, _WIRE) @[InstructionFetch.scala 26:24]
    io.instruction <= _T_1 @[InstructionFetch.scala 26:18]
    
  module HazardUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_ex_memRead : UInt<1>, flip ex_mem_memRead : UInt<1>, flip id_ex_branch : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip dmem_resp_valid : UInt<1>, flip taken : UInt<1>, flip jump : UInt<2>, flip branch : UInt<1>, if_reg_write : UInt<1>, pc_write : UInt<1>, ctl_mux : UInt<1>, ifid_flush : UInt<1>, take_branch : UInt<1>}
    
    io.ctl_mux <= UInt<1>("h01") @[HazardUnit.scala 26:14]
    io.pc_write <= UInt<1>("h01") @[HazardUnit.scala 27:15]
    io.if_reg_write <= UInt<1>("h01") @[HazardUnit.scala 28:19]
    io.take_branch <= UInt<1>("h01") @[HazardUnit.scala 29:18]
    io.ifid_flush <= UInt<1>("h00") @[HazardUnit.scala 30:17]
    node _T = or(io.id_ex_memRead, io.branch) @[HazardUnit.scala 34:23]
    node _T_1 = eq(io.id_ex_rd, io.id_rs1) @[HazardUnit.scala 35:20]
    node _T_2 = eq(io.id_ex_rd, io.id_rs2) @[HazardUnit.scala 35:49]
    node _T_3 = or(_T_1, _T_2) @[HazardUnit.scala 35:34]
    node _T_4 = and(_T, _T_3) @[HazardUnit.scala 34:37]
    node _T_5 = neq(io.id_ex_rd, UInt<1>("h00")) @[HazardUnit.scala 36:21]
    node _T_6 = neq(io.id_rs1, UInt<1>("h00")) @[HazardUnit.scala 36:42]
    node _T_7 = and(_T_5, _T_6) @[HazardUnit.scala 36:29]
    node _T_8 = neq(io.id_ex_rd, UInt<1>("h00")) @[HazardUnit.scala 37:20]
    node _T_9 = neq(io.id_rs2, UInt<1>("h00")) @[HazardUnit.scala 37:41]
    node _T_10 = and(_T_8, _T_9) @[HazardUnit.scala 37:28]
    node _T_11 = or(_T_7, _T_10) @[HazardUnit.scala 36:51]
    node _T_12 = and(_T_4, _T_11) @[HazardUnit.scala 35:65]
    node _T_13 = eq(io.id_ex_branch, UInt<1>("h00")) @[HazardUnit.scala 38:7]
    node _T_14 = and(_T_12, _T_13) @[HazardUnit.scala 37:51]
    when _T_14 : @[HazardUnit.scala 40:3]
      io.ctl_mux <= UInt<1>("h00") @[HazardUnit.scala 41:16]
      io.pc_write <= UInt<1>("h00") @[HazardUnit.scala 42:17]
      io.if_reg_write <= UInt<1>("h00") @[HazardUnit.scala 43:21]
      io.take_branch <= UInt<1>("h00") @[HazardUnit.scala 44:20]
      skip @[HazardUnit.scala 40:3]
    node _T_15 = and(io.ex_mem_memRead, io.branch) @[HazardUnit.scala 47:26]
    node _T_16 = eq(io.ex_mem_rd, io.id_rs1) @[HazardUnit.scala 47:56]
    node _T_17 = eq(io.ex_mem_rd, io.id_rs2) @[HazardUnit.scala 47:86]
    node _T_18 = or(_T_16, _T_17) @[HazardUnit.scala 47:70]
    node _T_19 = and(_T_15, _T_18) @[HazardUnit.scala 47:39]
    when _T_19 : @[HazardUnit.scala 47:101]
      io.ctl_mux <= UInt<1>("h00") @[HazardUnit.scala 48:16]
      io.pc_write <= UInt<1>("h00") @[HazardUnit.scala 49:17]
      io.if_reg_write <= UInt<1>("h00") @[HazardUnit.scala 50:21]
      io.take_branch <= UInt<1>("h00") @[HazardUnit.scala 51:20]
      skip @[HazardUnit.scala 47:101]
    node _T_20 = neq(io.jump, UInt<1>("h00")) @[HazardUnit.scala 55:28]
    node _T_21 = or(io.taken, _T_20) @[HazardUnit.scala 55:17]
    when _T_21 : @[HazardUnit.scala 55:37]
      io.ifid_flush <= UInt<1>("h01") @[HazardUnit.scala 56:19]
      skip @[HazardUnit.scala 55:37]
    else : @[HazardUnit.scala 57:15]
      io.ifid_flush <= UInt<1>("h00") @[HazardUnit.scala 58:19]
      skip @[HazardUnit.scala 57:15]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : UInt<32>, aluSrc : UInt<1>, memToReg : UInt<2>, regWrite : UInt<1>, memRead : UInt<1>, memWrite : UInt<1>, branch : UInt<1>, aluOp : UInt<2>, jump : UInt<2>, aluSrc1 : UInt<2>}
    
    node _T = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_1 = eq(UInt<6>("h033"), _T) @[Lookup.scala 31:38]
    node _T_2 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_3 = eq(UInt<5>("h013"), _T_2) @[Lookup.scala 31:38]
    node _T_4 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_5 = eq(UInt<2>("h03"), _T_4) @[Lookup.scala 31:38]
    node _T_6 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_7 = eq(UInt<6>("h023"), _T_6) @[Lookup.scala 31:38]
    node _T_8 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_9 = eq(UInt<7>("h063"), _T_8) @[Lookup.scala 31:38]
    node _T_10 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_11 = eq(UInt<6>("h037"), _T_10) @[Lookup.scala 31:38]
    node _T_12 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_13 = eq(UInt<5>("h017"), _T_12) @[Lookup.scala 31:38]
    node _T_14 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_15 = eq(UInt<7>("h06f"), _T_14) @[Lookup.scala 31:38]
    node _T_16 = and(io.in, UInt<7>("h07f")) @[Lookup.scala 31:38]
    node _T_17 = eq(UInt<7>("h067"), _T_16) @[Lookup.scala 31:38]
    node _T_18 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_19 = mux(_T_15, UInt<1>("h00"), _T_18) @[Lookup.scala 33:37]
    node _T_20 = mux(_T_13, UInt<1>("h00"), _T_19) @[Lookup.scala 33:37]
    node _T_21 = mux(_T_11, UInt<1>("h00"), _T_20) @[Lookup.scala 33:37]
    node _T_22 = mux(_T_9, UInt<1>("h01"), _T_21) @[Lookup.scala 33:37]
    node _T_23 = mux(_T_7, UInt<1>("h00"), _T_22) @[Lookup.scala 33:37]
    node _T_24 = mux(_T_5, UInt<1>("h00"), _T_23) @[Lookup.scala 33:37]
    node _T_25 = mux(_T_3, UInt<1>("h00"), _T_24) @[Lookup.scala 33:37]
    node signals_0 = mux(_T_1, UInt<1>("h01"), _T_25) @[Lookup.scala 33:37]
    node _T_26 = mux(_T_17, UInt<2>("h02"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_27 = mux(_T_15, UInt<2>("h02"), _T_26) @[Lookup.scala 33:37]
    node _T_28 = mux(_T_13, UInt<1>("h00"), _T_27) @[Lookup.scala 33:37]
    node _T_29 = mux(_T_11, UInt<1>("h00"), _T_28) @[Lookup.scala 33:37]
    node _T_30 = mux(_T_9, UInt<1>("h00"), _T_29) @[Lookup.scala 33:37]
    node _T_31 = mux(_T_7, UInt<1>("h00"), _T_30) @[Lookup.scala 33:37]
    node _T_32 = mux(_T_5, UInt<1>("h01"), _T_31) @[Lookup.scala 33:37]
    node _T_33 = mux(_T_3, UInt<1>("h00"), _T_32) @[Lookup.scala 33:37]
    node signals_1 = mux(_T_1, UInt<1>("h00"), _T_33) @[Lookup.scala 33:37]
    node _T_34 = mux(_T_17, UInt<1>("h01"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_35 = mux(_T_15, UInt<1>("h01"), _T_34) @[Lookup.scala 33:37]
    node _T_36 = mux(_T_13, UInt<1>("h01"), _T_35) @[Lookup.scala 33:37]
    node _T_37 = mux(_T_11, UInt<1>("h01"), _T_36) @[Lookup.scala 33:37]
    node _T_38 = mux(_T_9, UInt<1>("h00"), _T_37) @[Lookup.scala 33:37]
    node _T_39 = mux(_T_7, UInt<1>("h00"), _T_38) @[Lookup.scala 33:37]
    node _T_40 = mux(_T_5, UInt<1>("h01"), _T_39) @[Lookup.scala 33:37]
    node _T_41 = mux(_T_3, UInt<1>("h01"), _T_40) @[Lookup.scala 33:37]
    node signals_2 = mux(_T_1, UInt<1>("h01"), _T_41) @[Lookup.scala 33:37]
    node _T_42 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_43 = mux(_T_15, UInt<1>("h00"), _T_42) @[Lookup.scala 33:37]
    node _T_44 = mux(_T_13, UInt<1>("h00"), _T_43) @[Lookup.scala 33:37]
    node _T_45 = mux(_T_11, UInt<1>("h00"), _T_44) @[Lookup.scala 33:37]
    node _T_46 = mux(_T_9, UInt<1>("h00"), _T_45) @[Lookup.scala 33:37]
    node _T_47 = mux(_T_7, UInt<1>("h00"), _T_46) @[Lookup.scala 33:37]
    node _T_48 = mux(_T_5, UInt<1>("h01"), _T_47) @[Lookup.scala 33:37]
    node _T_49 = mux(_T_3, UInt<1>("h00"), _T_48) @[Lookup.scala 33:37]
    node signals_3 = mux(_T_1, UInt<1>("h00"), _T_49) @[Lookup.scala 33:37]
    node _T_50 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_51 = mux(_T_15, UInt<1>("h00"), _T_50) @[Lookup.scala 33:37]
    node _T_52 = mux(_T_13, UInt<1>("h00"), _T_51) @[Lookup.scala 33:37]
    node _T_53 = mux(_T_11, UInt<1>("h00"), _T_52) @[Lookup.scala 33:37]
    node _T_54 = mux(_T_9, UInt<1>("h00"), _T_53) @[Lookup.scala 33:37]
    node _T_55 = mux(_T_7, UInt<1>("h01"), _T_54) @[Lookup.scala 33:37]
    node _T_56 = mux(_T_5, UInt<1>("h00"), _T_55) @[Lookup.scala 33:37]
    node _T_57 = mux(_T_3, UInt<1>("h00"), _T_56) @[Lookup.scala 33:37]
    node signals_4 = mux(_T_1, UInt<1>("h00"), _T_57) @[Lookup.scala 33:37]
    node _T_58 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_59 = mux(_T_15, UInt<1>("h00"), _T_58) @[Lookup.scala 33:37]
    node _T_60 = mux(_T_13, UInt<1>("h00"), _T_59) @[Lookup.scala 33:37]
    node _T_61 = mux(_T_11, UInt<1>("h00"), _T_60) @[Lookup.scala 33:37]
    node _T_62 = mux(_T_9, UInt<1>("h01"), _T_61) @[Lookup.scala 33:37]
    node _T_63 = mux(_T_7, UInt<1>("h00"), _T_62) @[Lookup.scala 33:37]
    node _T_64 = mux(_T_5, UInt<1>("h00"), _T_63) @[Lookup.scala 33:37]
    node _T_65 = mux(_T_3, UInt<1>("h00"), _T_64) @[Lookup.scala 33:37]
    node signals_5 = mux(_T_1, UInt<1>("h00"), _T_65) @[Lookup.scala 33:37]
    node _T_66 = mux(_T_17, UInt<2>("h02"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_67 = mux(_T_15, UInt<1>("h01"), _T_66) @[Lookup.scala 33:37]
    node _T_68 = mux(_T_13, UInt<1>("h00"), _T_67) @[Lookup.scala 33:37]
    node _T_69 = mux(_T_11, UInt<1>("h00"), _T_68) @[Lookup.scala 33:37]
    node _T_70 = mux(_T_9, UInt<1>("h00"), _T_69) @[Lookup.scala 33:37]
    node _T_71 = mux(_T_7, UInt<1>("h00"), _T_70) @[Lookup.scala 33:37]
    node _T_72 = mux(_T_5, UInt<1>("h00"), _T_71) @[Lookup.scala 33:37]
    node _T_73 = mux(_T_3, UInt<1>("h00"), _T_72) @[Lookup.scala 33:37]
    node signals_6 = mux(_T_1, UInt<1>("h00"), _T_73) @[Lookup.scala 33:37]
    node _T_74 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_75 = mux(_T_15, UInt<1>("h00"), _T_74) @[Lookup.scala 33:37]
    node _T_76 = mux(_T_13, UInt<1>("h00"), _T_75) @[Lookup.scala 33:37]
    node _T_77 = mux(_T_11, UInt<1>("h00"), _T_76) @[Lookup.scala 33:37]
    node _T_78 = mux(_T_9, UInt<1>("h00"), _T_77) @[Lookup.scala 33:37]
    node _T_79 = mux(_T_7, UInt<1>("h00"), _T_78) @[Lookup.scala 33:37]
    node _T_80 = mux(_T_5, UInt<1>("h00"), _T_79) @[Lookup.scala 33:37]
    node _T_81 = mux(_T_3, UInt<2>("h02"), _T_80) @[Lookup.scala 33:37]
    node signals_7 = mux(_T_1, UInt<2>("h02"), _T_81) @[Lookup.scala 33:37]
    node _T_82 = mux(_T_17, UInt<1>("h00"), UInt<1>("h00")) @[Lookup.scala 33:37]
    node _T_83 = mux(_T_15, UInt<1>("h00"), _T_82) @[Lookup.scala 33:37]
    node _T_84 = mux(_T_13, UInt<1>("h01"), _T_83) @[Lookup.scala 33:37]
    node _T_85 = mux(_T_11, UInt<2>("h02"), _T_84) @[Lookup.scala 33:37]
    node _T_86 = mux(_T_9, UInt<1>("h00"), _T_85) @[Lookup.scala 33:37]
    node _T_87 = mux(_T_7, UInt<1>("h00"), _T_86) @[Lookup.scala 33:37]
    node _T_88 = mux(_T_5, UInt<1>("h00"), _T_87) @[Lookup.scala 33:37]
    node _T_89 = mux(_T_3, UInt<1>("h00"), _T_88) @[Lookup.scala 33:37]
    node signals_8 = mux(_T_1, UInt<1>("h00"), _T_89) @[Lookup.scala 33:37]
    io.aluSrc <= signals_0 @[Control.scala 135:13]
    io.memToReg <= signals_1 @[Control.scala 136:15]
    io.regWrite <= signals_2 @[Control.scala 137:15]
    io.memRead <= signals_3 @[Control.scala 138:14]
    io.memWrite <= signals_4 @[Control.scala 139:15]
    io.branch <= signals_5 @[Control.scala 140:13]
    io.jump <= signals_6 @[Control.scala 141:11]
    io.aluOp <= signals_7 @[Control.scala 142:12]
    io.aluSrc1 <= signals_8 @[Control.scala 143:14]
    
  module Registers : 
    input clock : Clock
    input reset : Reset
    output io : {flip readAddress : UInt<5>[2], flip writeEnable : UInt<1>, flip writeAddress : UInt<5>, flip writeData : UInt<32>, readData : UInt<32>[2]}
    
    wire _WIRE : UInt<32>[32] @[Registers.scala 14:28]
    _WIRE[0] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[1] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[2] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[3] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[4] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[5] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[6] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[7] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[8] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[9] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[10] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[11] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[12] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[13] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[14] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[15] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[16] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[17] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[18] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[19] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[20] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[21] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[22] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[23] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[24] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[25] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[26] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[27] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[28] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[29] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[30] <= UInt<32>("h00") @[Registers.scala 14:28]
    _WIRE[31] <= UInt<32>("h00") @[Registers.scala 14:28]
    reg reg : UInt<32>[32], clock with : (reset => (reset, _WIRE)) @[Registers.scala 14:20]
    when io.writeEnable : @[Registers.scala 16:24]
      reg[io.writeAddress] <= io.writeData @[Registers.scala 17:26]
      skip @[Registers.scala 16:24]
    node _T = eq(io.readAddress[0], UInt<1>("h00")) @[Registers.scala 20:28]
    when _T : @[Registers.scala 20:37]
      io.readData[0] <= UInt<1>("h00") @[Registers.scala 21:22]
      skip @[Registers.scala 20:37]
    else : @[Registers.scala 22:17]
      io.readData[0] <= reg[io.readAddress[0]] @[Registers.scala 23:22]
      skip @[Registers.scala 22:17]
    node _T_1 = eq(io.readAddress[1], UInt<1>("h00")) @[Registers.scala 20:28]
    when _T_1 : @[Registers.scala 20:37]
      io.readData[1] <= UInt<1>("h00") @[Registers.scala 21:22]
      skip @[Registers.scala 20:37]
    else : @[Registers.scala 22:17]
      io.readData[1] <= reg[io.readAddress[1]] @[Registers.scala 23:22]
      skip @[Registers.scala 22:17]
    
  module ImmediateGen : 
    input clock : Clock
    input reset : Reset
    output io : {flip instruction : UInt<32>, out : UInt<32>}
    
    node opcode = bits(io.instruction, 6, 0) @[ImmediateGen.scala 11:30]
    node _T = eq(opcode, UInt<2>("h03")) @[ImmediateGen.scala 15:12]
    node _T_1 = eq(opcode, UInt<4>("h0f")) @[ImmediateGen.scala 15:30]
    node _T_2 = or(_T, _T_1) @[ImmediateGen.scala 15:20]
    node _T_3 = eq(opcode, UInt<5>("h013")) @[ImmediateGen.scala 15:49]
    node _T_4 = or(_T_2, _T_3) @[ImmediateGen.scala 15:39]
    node _T_5 = eq(opcode, UInt<5>("h01b")) @[ImmediateGen.scala 15:68]
    node _T_6 = or(_T_4, _T_5) @[ImmediateGen.scala 15:58]
    node _T_7 = eq(opcode, UInt<7>("h067")) @[ImmediateGen.scala 15:87]
    node _T_8 = or(_T_6, _T_7) @[ImmediateGen.scala 15:77]
    node _T_9 = eq(opcode, UInt<7>("h073")) @[ImmediateGen.scala 15:107]
    node _T_10 = or(_T_8, _T_9) @[ImmediateGen.scala 15:97]
    when _T_10 : @[ImmediateGen.scala 16:5]
      node lo = bits(io.instruction, 31, 20) @[ImmediateGen.scala 17:31]
      node _T_11 = bits(lo, 11, 11) @[ImmediateGen.scala 18:35]
      node _T_12 = bits(_T_11, 0, 0) @[Bitwise.scala 72:15]
      node hi = mux(_T_12, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
      node _T_13 = cat(hi, lo) @[Cat.scala 30:58]
      io.out <= _T_13 @[ImmediateGen.scala 19:12]
      skip @[ImmediateGen.scala 16:5]
    else : @[ImmediateGen.scala 23:51]
      node _T_14 = eq(opcode, UInt<5>("h017")) @[ImmediateGen.scala 23:22]
      node _T_15 = eq(opcode, UInt<6>("h037")) @[ImmediateGen.scala 23:41]
      node _T_16 = or(_T_14, _T_15) @[ImmediateGen.scala 23:31]
      when _T_16 : @[ImmediateGen.scala 23:51]
        node hi_1 = bits(io.instruction, 31, 12) @[ImmediateGen.scala 24:33]
        node lo_1 = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
        node _T_17 = cat(hi_1, lo_1) @[Cat.scala 30:58]
        io.out <= _T_17 @[ImmediateGen.scala 26:14]
        skip @[ImmediateGen.scala 23:51]
      else : @[ImmediateGen.scala 29:32]
        node _T_18 = eq(opcode, UInt<6>("h023")) @[ImmediateGen.scala 29:22]
        when _T_18 : @[ImmediateGen.scala 29:32]
          node hi_2 = bits(io.instruction, 31, 25) @[ImmediateGen.scala 30:37]
          node lo_2 = bits(io.instruction, 11, 7) @[ImmediateGen.scala 30:61]
          node lo_3 = cat(hi_2, lo_2) @[Cat.scala 30:58]
          node _T_19 = bits(lo_3, 11, 11) @[ImmediateGen.scala 31:37]
          node _T_20 = bits(_T_19, 0, 0) @[Bitwise.scala 72:15]
          node hi_3 = mux(_T_20, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
          node _T_21 = cat(hi_3, lo_3) @[Cat.scala 30:58]
          io.out <= _T_21 @[ImmediateGen.scala 32:14]
          skip @[ImmediateGen.scala 29:32]
        else : @[ImmediateGen.scala 35:32]
          node _T_22 = eq(opcode, UInt<7>("h063")) @[ImmediateGen.scala 35:22]
          when _T_22 : @[ImmediateGen.scala 35:32]
            node hi_hi = bits(io.instruction, 31, 31) @[ImmediateGen.scala 37:23]
            node hi_lo = bits(io.instruction, 7, 7) @[ImmediateGen.scala 38:23]
            node lo_hi = bits(io.instruction, 30, 25) @[ImmediateGen.scala 39:23]
            node lo_lo = bits(io.instruction, 11, 8) @[ImmediateGen.scala 40:23]
            node lo_4 = cat(lo_hi, lo_lo) @[Cat.scala 30:58]
            node hi_4 = cat(hi_hi, hi_lo) @[Cat.scala 30:58]
            node hi_lo_1 = cat(hi_4, lo_4) @[Cat.scala 30:58]
            node _T_23 = bits(hi_lo_1, 11, 11) @[ImmediateGen.scala 42:39]
            node _T_24 = bits(_T_23, 0, 0) @[Bitwise.scala 72:15]
            node hi_hi_1 = mux(_T_24, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
            node hi_5 = cat(hi_hi_1, hi_lo_1) @[Cat.scala 30:58]
            node _T_25 = cat(hi_5, UInt<1>("h00")) @[Cat.scala 30:58]
            io.out <= _T_25 @[ImmediateGen.scala 43:14]
            skip @[ImmediateGen.scala 35:32]
          else : @[ImmediateGen.scala 47:3]
            node hi_hi_2 = bits(io.instruction, 31, 31) @[ImmediateGen.scala 49:21]
            node hi_lo_2 = bits(io.instruction, 19, 12) @[ImmediateGen.scala 50:21]
            node lo_hi_1 = bits(io.instruction, 20, 20) @[ImmediateGen.scala 51:21]
            node lo_lo_1 = bits(io.instruction, 30, 21) @[ImmediateGen.scala 52:21]
            node lo_5 = cat(lo_hi_1, lo_lo_1) @[Cat.scala 30:58]
            node hi_6 = cat(hi_hi_2, hi_lo_2) @[Cat.scala 30:58]
            node hi_lo_3 = cat(hi_6, lo_5) @[Cat.scala 30:58]
            node _T_26 = bits(hi_lo_3, 19, 19) @[ImmediateGen.scala 54:37]
            node _T_27 = bits(_T_26, 0, 0) @[Bitwise.scala 72:15]
            node hi_hi_3 = mux(_T_27, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
            node hi_7 = cat(hi_hi_3, hi_lo_3) @[Cat.scala 30:58]
            node _T_28 = cat(hi_7, UInt<1>("h00")) @[Cat.scala 30:58]
            io.out <= _T_28 @[ImmediateGen.scala 55:12]
            skip @[ImmediateGen.scala 47:3]
    
  module BranchUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip branch : UInt<1>, flip funct3 : UInt<3>, flip rd1 : UInt<32>, flip rd2 : UInt<32>, flip take_branch : UInt<1>, taken : UInt<1>}
    
    io.taken is invalid @[BranchUnit.scala 17:12]
    wire check : UInt<1> @[BranchUnit.scala 19:25]
    check is invalid @[BranchUnit.scala 20:9]
    node _T = eq(UInt<1>("h00"), io.funct3) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      node _T_1 = eq(io.rd1, io.rd2) @[BranchUnit.scala 23:32]
      check <= _T_1 @[BranchUnit.scala 23:21]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<1>("h01"), io.funct3) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = neq(io.rd1, io.rd2) @[BranchUnit.scala 24:32]
        check <= _T_3 @[BranchUnit.scala 24:21]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<3>("h04"), io.funct3) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 39:67]
          node _T_5 = asSInt(io.rd1) @[BranchUnit.scala 25:32]
          node _T_6 = asSInt(io.rd2) @[BranchUnit.scala 25:48]
          node _T_7 = lt(_T_5, _T_6) @[BranchUnit.scala 25:39]
          check <= _T_7 @[BranchUnit.scala 25:21]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<3>("h05"), io.funct3) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 39:67]
            node _T_9 = asSInt(io.rd1) @[BranchUnit.scala 26:32]
            node _T_10 = asSInt(io.rd2) @[BranchUnit.scala 26:49]
            node _T_11 = geq(_T_9, _T_10) @[BranchUnit.scala 26:39]
            check <= _T_11 @[BranchUnit.scala 26:21]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h06"), io.funct3) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              node _T_13 = lt(io.rd1, io.rd2) @[BranchUnit.scala 27:32]
              check <= _T_13 @[BranchUnit.scala 27:21]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_14 = eq(UInt<3>("h07"), io.funct3) @[Conditional.scala 37:30]
              when _T_14 : @[Conditional.scala 39:67]
                node _T_15 = geq(io.rd1, io.rd2) @[BranchUnit.scala 28:32]
                check <= _T_15 @[BranchUnit.scala 28:21]
                skip @[Conditional.scala 39:67]
    node _T_16 = and(check, io.branch) @[BranchUnit.scala 31:21]
    node _T_17 = and(_T_16, io.take_branch) @[BranchUnit.scala 31:33]
    io.taken <= _T_17 @[BranchUnit.scala 31:12]
    
  module InstructionDecode : 
    input clock : Clock
    input reset : Reset
    output io : {flip id_instruction : UInt<32>, flip writeData : UInt<32>, flip writeReg : UInt<5>, flip pcAddress : UInt<32>, flip ctl_writeEnable : UInt<1>, flip id_ex_mem_read : UInt<1>, flip ex_mem_mem_read : UInt<1>, flip dmem_resp_valid : UInt<1>, flip id_ex_rd : UInt<5>, flip ex_mem_rd : UInt<5>, flip id_ex_branch : UInt<1>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ex_ins : UInt<32>, flip ex_result : UInt<32>, flip ex_mem_result : UInt<32>, flip mem_wb_result : UInt<32>, immediate : UInt<32>, writeRegAddress : UInt<5>, readData1 : UInt<32>, readData2 : UInt<32>, func7 : UInt<7>, func3 : UInt<3>, ctl_aluSrc : UInt<1>, ctl_memToReg : UInt<2>, ctl_regWrite : UInt<1>, ctl_memRead : UInt<1>, ctl_memWrite : UInt<1>, ctl_branch : UInt<1>, ctl_aluOp : UInt<2>, ctl_jump : UInt<2>, ctl_aluSrc1 : UInt<2>, hdu_pcWrite : UInt<1>, hdu_if_reg_write : UInt<1>, pcSrc : UInt<1>, pcPlusOffset : UInt<32>, ifid_flush : UInt<1>}
    
    inst hdu of HazardUnit @[InstructionDecode.scala 51:19]
    hdu.clock <= clock
    hdu.reset <= reset
    hdu.io.dmem_resp_valid <= io.dmem_resp_valid @[InstructionDecode.scala 52:26]
    hdu.io.id_ex_memRead <= io.id_ex_mem_read @[InstructionDecode.scala 53:24]
    hdu.io.ex_mem_memRead <= io.ex_mem_mem_read @[InstructionDecode.scala 55:25]
    hdu.io.id_ex_rd <= io.id_ex_rd @[InstructionDecode.scala 56:19]
    hdu.io.id_ex_branch <= io.id_ex_branch @[InstructionDecode.scala 57:23]
    hdu.io.ex_mem_rd <= io.ex_mem_rd @[InstructionDecode.scala 58:20]
    node _T = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 59:37]
    hdu.io.id_rs1 <= _T @[InstructionDecode.scala 59:17]
    node _T_1 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 60:37]
    hdu.io.id_rs2 <= _T_1 @[InstructionDecode.scala 60:17]
    hdu.io.jump <= io.ctl_jump @[InstructionDecode.scala 61:15]
    hdu.io.branch <= io.ctl_branch @[InstructionDecode.scala 62:17]
    io.hdu_pcWrite <= hdu.io.pc_write @[InstructionDecode.scala 63:18]
    io.hdu_if_reg_write <= hdu.io.if_reg_write @[InstructionDecode.scala 64:23]
    inst control of Control @[InstructionDecode.scala 67:23]
    control.clock <= clock
    control.reset <= reset
    control.io.in <= io.id_instruction @[InstructionDecode.scala 68:17]
    io.ctl_aluOp <= control.io.aluOp @[InstructionDecode.scala 69:16]
    io.ctl_aluSrc <= control.io.aluSrc @[InstructionDecode.scala 70:17]
    io.ctl_aluSrc1 <= control.io.aluSrc1 @[InstructionDecode.scala 71:18]
    io.ctl_branch <= control.io.branch @[InstructionDecode.scala 72:17]
    io.ctl_memRead <= control.io.memRead @[InstructionDecode.scala 73:18]
    io.ctl_memToReg <= control.io.memToReg @[InstructionDecode.scala 74:19]
    io.ctl_jump <= control.io.jump @[InstructionDecode.scala 75:15]
    node _T_2 = neq(io.id_instruction, UInt<5>("h013")) @[InstructionDecode.scala 76:44]
    node _T_3 = and(hdu.io.ctl_mux, _T_2) @[InstructionDecode.scala 76:23]
    when _T_3 : @[InstructionDecode.scala 76:57]
      io.ctl_memWrite <= control.io.memWrite @[InstructionDecode.scala 77:21]
      io.ctl_regWrite <= control.io.regWrite @[InstructionDecode.scala 78:21]
      skip @[InstructionDecode.scala 76:57]
    else : @[InstructionDecode.scala 80:15]
      io.ctl_memWrite <= UInt<1>("h00") @[InstructionDecode.scala 81:21]
      io.ctl_regWrite <= UInt<1>("h00") @[InstructionDecode.scala 82:21]
      skip @[InstructionDecode.scala 80:15]
    inst registers of Registers @[InstructionDecode.scala 86:25]
    registers.clock <= clock
    registers.reset <= reset
    node registerRs1 = bits(io.id_instruction, 19, 15) @[InstructionDecode.scala 88:38]
    node registerRs2 = bits(io.id_instruction, 24, 20) @[InstructionDecode.scala 89:38]
    registers.io.readAddress[0] <= registerRs1 @[InstructionDecode.scala 90:31]
    registers.io.readAddress[1] <= registerRs2 @[InstructionDecode.scala 91:31]
    registers.io.writeEnable <= io.ctl_writeEnable @[InstructionDecode.scala 92:28]
    registers.io.writeAddress <= io.writeReg @[InstructionDecode.scala 93:29]
    registers.io.writeData <= io.writeData @[InstructionDecode.scala 94:26]
    node _T_4 = eq(io.writeReg, registerRs1) @[InstructionDecode.scala 97:43]
    node _T_5 = and(io.ctl_writeEnable, _T_4) @[InstructionDecode.scala 97:27]
    when _T_5 : @[InstructionDecode.scala 97:60]
      node _T_6 = eq(registerRs1, UInt<1>("h00")) @[InstructionDecode.scala 98:22]
      when _T_6 : @[InstructionDecode.scala 98:30]
        io.readData1 <= UInt<1>("h00") @[InstructionDecode.scala 99:20]
        skip @[InstructionDecode.scala 98:30]
      else : @[InstructionDecode.scala 100:16]
        io.readData1 <= io.writeData @[InstructionDecode.scala 101:20]
        skip @[InstructionDecode.scala 100:16]
      skip @[InstructionDecode.scala 97:60]
    else : @[InstructionDecode.scala 103:14]
      io.readData1 <= registers.io.readData[0] @[InstructionDecode.scala 104:18]
      skip @[InstructionDecode.scala 103:14]
    node _T_7 = eq(io.writeReg, registerRs2) @[InstructionDecode.scala 106:43]
    node _T_8 = and(io.ctl_writeEnable, _T_7) @[InstructionDecode.scala 106:27]
    when _T_8 : @[InstructionDecode.scala 106:60]
      node _T_9 = eq(registerRs2, UInt<1>("h00")) @[InstructionDecode.scala 107:22]
      when _T_9 : @[InstructionDecode.scala 107:30]
        io.readData2 <= UInt<1>("h00") @[InstructionDecode.scala 108:20]
        skip @[InstructionDecode.scala 107:30]
      else : @[InstructionDecode.scala 109:16]
        io.readData2 <= io.writeData @[InstructionDecode.scala 110:20]
        skip @[InstructionDecode.scala 109:16]
      skip @[InstructionDecode.scala 106:60]
    else : @[InstructionDecode.scala 112:14]
      io.readData2 <= registers.io.readData[1] @[InstructionDecode.scala 113:18]
      skip @[InstructionDecode.scala 112:14]
    inst immediate of ImmediateGen @[InstructionDecode.scala 117:25]
    immediate.clock <= clock
    immediate.reset <= reset
    immediate.io.instruction <= io.id_instruction @[InstructionDecode.scala 118:28]
    io.immediate <= immediate.io.out @[InstructionDecode.scala 119:16]
    wire input1 : UInt<32> @[InstructionDecode.scala 122:20]
    wire input2 : UInt<32> @[InstructionDecode.scala 123:20]
    node _T_10 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 125:37]
    node _T_11 = eq(registerRs1, _T_10) @[InstructionDecode.scala 125:20]
    when _T_11 : @[InstructionDecode.scala 125:46]
      input1 <= io.ex_mem_result @[InstructionDecode.scala 126:12]
      skip @[InstructionDecode.scala 125:46]
    else : @[InstructionDecode.scala 127:52]
      node _T_12 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 127:43]
      node _T_13 = eq(registerRs1, _T_12) @[InstructionDecode.scala 127:26]
      when _T_13 : @[InstructionDecode.scala 127:52]
        input1 <= io.mem_wb_result @[InstructionDecode.scala 128:14]
        skip @[InstructionDecode.scala 127:52]
      else : @[InstructionDecode.scala 130:16]
        input1 <= io.readData1 @[InstructionDecode.scala 131:14]
        skip @[InstructionDecode.scala 130:16]
    node _T_14 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 133:37]
    node _T_15 = eq(registerRs2, _T_14) @[InstructionDecode.scala 133:20]
    when _T_15 : @[InstructionDecode.scala 133:46]
      input2 <= io.ex_mem_result @[InstructionDecode.scala 134:12]
      skip @[InstructionDecode.scala 133:46]
    else : @[InstructionDecode.scala 135:52]
      node _T_16 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 135:43]
      node _T_17 = eq(registerRs2, _T_16) @[InstructionDecode.scala 135:26]
      when _T_17 : @[InstructionDecode.scala 135:52]
        input2 <= io.mem_wb_result @[InstructionDecode.scala 136:14]
        skip @[InstructionDecode.scala 135:52]
      else : @[InstructionDecode.scala 138:16]
        input2 <= io.readData2 @[InstructionDecode.scala 139:14]
        skip @[InstructionDecode.scala 138:16]
    inst bu of BranchUnit @[InstructionDecode.scala 143:18]
    bu.clock <= clock
    bu.reset <= reset
    bu.io.branch <= io.ctl_branch @[InstructionDecode.scala 144:16]
    node _T_18 = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 145:36]
    bu.io.funct3 <= _T_18 @[InstructionDecode.scala 145:16]
    bu.io.rd1 <= input1 @[InstructionDecode.scala 146:13]
    bu.io.rd2 <= input2 @[InstructionDecode.scala 147:13]
    bu.io.take_branch <= hdu.io.take_branch @[InstructionDecode.scala 148:21]
    hdu.io.taken <= bu.io.taken @[InstructionDecode.scala 149:16]
    wire j_offset : UInt<32> @[InstructionDecode.scala 152:22]
    node _T_19 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 153:35]
    node _T_20 = eq(registerRs1, _T_19) @[InstructionDecode.scala 153:22]
    when _T_20 : @[InstructionDecode.scala 153:43]
      j_offset <= io.ex_result @[InstructionDecode.scala 154:16]
      skip @[InstructionDecode.scala 153:43]
    else : @[InstructionDecode.scala 155:54]
      node _T_21 = bits(io.ex_mem_ins, 11, 7) @[InstructionDecode.scala 155:45]
      node _T_22 = eq(registerRs1, _T_21) @[InstructionDecode.scala 155:28]
      when _T_22 : @[InstructionDecode.scala 155:54]
        j_offset <= io.ex_mem_result @[InstructionDecode.scala 156:14]
        skip @[InstructionDecode.scala 155:54]
      else : @[InstructionDecode.scala 157:52]
        node _T_23 = bits(io.mem_wb_ins, 11, 7) @[InstructionDecode.scala 157:43]
        node _T_24 = eq(registerRs1, _T_23) @[InstructionDecode.scala 157:26]
        when _T_24 : @[InstructionDecode.scala 157:52]
          j_offset <= io.mem_wb_result @[InstructionDecode.scala 158:14]
          skip @[InstructionDecode.scala 157:52]
        else : @[InstructionDecode.scala 159:47]
          node _T_25 = bits(io.ex_ins, 11, 7) @[InstructionDecode.scala 159:39]
          node _T_26 = eq(registerRs1, _T_25) @[InstructionDecode.scala 159:26]
          when _T_26 : @[InstructionDecode.scala 159:47]
            j_offset <= io.ex_result @[InstructionDecode.scala 160:14]
            skip @[InstructionDecode.scala 159:47]
          else : @[InstructionDecode.scala 161:15]
            j_offset <= io.readData1 @[InstructionDecode.scala 162:16]
            skip @[InstructionDecode.scala 161:15]
    node _T_27 = eq(io.ctl_jump, UInt<1>("h01")) @[InstructionDecode.scala 166:20]
    when _T_27 : @[InstructionDecode.scala 166:29]
      node _T_28 = add(io.pcAddress, io.immediate) @[InstructionDecode.scala 167:37]
      node _T_29 = tail(_T_28, 1) @[InstructionDecode.scala 167:37]
      io.pcPlusOffset <= _T_29 @[InstructionDecode.scala 167:21]
      skip @[InstructionDecode.scala 166:29]
    else : @[InstructionDecode.scala 168:35]
      node _T_30 = eq(io.ctl_jump, UInt<2>("h02")) @[InstructionDecode.scala 168:26]
      when _T_30 : @[InstructionDecode.scala 168:35]
        node _T_31 = add(j_offset, io.immediate) @[InstructionDecode.scala 169:35]
        node _T_32 = tail(_T_31, 1) @[InstructionDecode.scala 169:35]
        io.pcPlusOffset <= _T_32 @[InstructionDecode.scala 169:23]
        skip @[InstructionDecode.scala 168:35]
      else : @[InstructionDecode.scala 171:16]
        node _T_33 = add(io.pcAddress, immediate.io.out) @[InstructionDecode.scala 172:39]
        node _T_34 = tail(_T_33, 1) @[InstructionDecode.scala 172:39]
        io.pcPlusOffset <= _T_34 @[InstructionDecode.scala 172:23]
        skip @[InstructionDecode.scala 171:16]
    node _T_35 = neq(io.ctl_jump, UInt<1>("h00")) @[InstructionDecode.scala 175:35]
    node _T_36 = or(bu.io.taken, _T_35) @[InstructionDecode.scala 175:20]
    when _T_36 : @[InstructionDecode.scala 175:44]
      io.pcSrc <= UInt<1>("h01") @[InstructionDecode.scala 176:14]
      skip @[InstructionDecode.scala 175:44]
    else : @[InstructionDecode.scala 177:15]
      io.pcSrc <= UInt<1>("h00") @[InstructionDecode.scala 178:14]
      skip @[InstructionDecode.scala 177:15]
    io.ifid_flush <= hdu.io.ifid_flush @[InstructionDecode.scala 182:17]
    node _T_37 = bits(io.id_instruction, 11, 7) @[InstructionDecode.scala 184:42]
    io.writeRegAddress <= _T_37 @[InstructionDecode.scala 184:22]
    node _T_38 = bits(io.id_instruction, 14, 12) @[InstructionDecode.scala 185:32]
    io.func3 <= _T_38 @[InstructionDecode.scala 185:12]
    node _T_39 = bits(io.id_instruction, 31, 25) @[InstructionDecode.scala 186:32]
    io.func7 <= _T_39 @[InstructionDecode.scala 186:12]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip input1 : UInt<32>, flip input2 : UInt<32>, flip aluCtl : UInt<4>, zero : UInt<1>, result : UInt<32>}
    
    node _T = eq(io.aluCtl, UInt<1>("h00")) @[ALU.scala 17:18]
    node _T_1 = and(io.input1, io.input2) @[ALU.scala 17:41]
    node _T_2 = eq(io.aluCtl, UInt<1>("h01")) @[ALU.scala 18:18]
    node _T_3 = or(io.input1, io.input2) @[ALU.scala 18:41]
    node _T_4 = eq(io.aluCtl, UInt<2>("h02")) @[ALU.scala 19:18]
    node _T_5 = add(io.input1, io.input2) @[ALU.scala 19:41]
    node _T_6 = tail(_T_5, 1) @[ALU.scala 19:41]
    node _T_7 = eq(io.aluCtl, UInt<2>("h03")) @[ALU.scala 20:18]
    node _T_8 = sub(io.input1, io.input2) @[ALU.scala 20:41]
    node _T_9 = tail(_T_8, 1) @[ALU.scala 20:41]
    node _T_10 = eq(io.aluCtl, UInt<3>("h04")) @[ALU.scala 21:18]
    node _T_11 = asSInt(io.input1) @[ALU.scala 21:41]
    node _T_12 = asSInt(io.input2) @[ALU.scala 21:60]
    node _T_13 = lt(_T_11, _T_12) @[ALU.scala 21:48]
    node _T_14 = eq(io.aluCtl, UInt<3>("h05")) @[ALU.scala 22:18]
    node _T_15 = lt(io.input1, io.input2) @[ALU.scala 22:41]
    node _T_16 = eq(io.aluCtl, UInt<3>("h06")) @[ALU.scala 23:18]
    node _T_17 = bits(io.input2, 4, 0) @[ALU.scala 23:53]
    node _T_18 = dshl(io.input1, _T_17) @[ALU.scala 23:41]
    node _T_19 = eq(io.aluCtl, UInt<3>("h07")) @[ALU.scala 24:18]
    node _T_20 = bits(io.input2, 4, 0) @[ALU.scala 24:53]
    node _T_21 = dshr(io.input1, _T_20) @[ALU.scala 24:41]
    node _T_22 = eq(io.aluCtl, UInt<4>("h08")) @[ALU.scala 25:18]
    node _T_23 = asSInt(io.input1) @[ALU.scala 25:41]
    node _T_24 = bits(io.input2, 4, 0) @[ALU.scala 25:60]
    node _T_25 = dshr(_T_23, _T_24) @[ALU.scala 25:48]
    node _T_26 = asUInt(_T_25) @[ALU.scala 25:68]
    node _T_27 = eq(io.aluCtl, UInt<4>("h09")) @[ALU.scala 26:18]
    node _T_28 = xor(io.input1, io.input2) @[ALU.scala 26:41]
    node _T_29 = mux(_T_27, _T_28, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_30 = mux(_T_22, _T_26, _T_29) @[Mux.scala 98:16]
    node _T_31 = mux(_T_19, _T_21, _T_30) @[Mux.scala 98:16]
    node _T_32 = mux(_T_16, _T_18, _T_31) @[Mux.scala 98:16]
    node _T_33 = mux(_T_14, _T_15, _T_32) @[Mux.scala 98:16]
    node _T_34 = mux(_T_10, _T_13, _T_33) @[Mux.scala 98:16]
    node _T_35 = mux(_T_7, _T_9, _T_34) @[Mux.scala 98:16]
    node _T_36 = mux(_T_4, _T_6, _T_35) @[Mux.scala 98:16]
    node _T_37 = mux(_T_2, _T_3, _T_36) @[Mux.scala 98:16]
    node _T_38 = mux(_T, _T_1, _T_37) @[Mux.scala 98:16]
    io.result <= _T_38 @[ALU.scala 14:13]
    io.zero is invalid @[ALU.scala 29:11]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<2>, flip f7 : UInt<1>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, out : UInt<4>}
    
    io.out <= UInt<4>("h0f") @[AluControl.scala 31:10]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[AluControl.scala 33:17]
    when _T : @[AluControl.scala 33:26]
      io.out <= UInt<2>("h02") @[AluControl.scala 34:12]
      skip @[AluControl.scala 33:26]
    else : @[AluControl.scala 35:15]
      node _T_1 = eq(UInt<1>("h00"), io.f3) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 40:58]
        node _T_2 = eq(io.aluSrc, UInt<1>("h00")) @[AluControl.scala 38:14]
        node _T_3 = eq(io.f7, UInt<1>("h00")) @[AluControl.scala 38:34]
        node _T_4 = or(_T_2, _T_3) @[AluControl.scala 38:25]
        when _T_4 : @[AluControl.scala 38:43]
          io.out <= UInt<2>("h02") @[AluControl.scala 39:18]
          skip @[AluControl.scala 38:43]
        else : @[AluControl.scala 41:22]
          io.out <= UInt<2>("h03") @[AluControl.scala 42:20]
          skip @[AluControl.scala 41:22]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_5 = eq(UInt<1>("h01"), io.f3) @[Conditional.scala 37:30]
        when _T_5 : @[Conditional.scala 39:67]
          io.out <= UInt<3>("h06") @[AluControl.scala 46:16]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_6 = eq(UInt<2>("h02"), io.f3) @[Conditional.scala 37:30]
          when _T_6 : @[Conditional.scala 39:67]
            io.out <= UInt<3>("h04") @[AluControl.scala 49:16]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_7 = eq(UInt<2>("h03"), io.f3) @[Conditional.scala 37:30]
            when _T_7 : @[Conditional.scala 39:67]
              io.out <= UInt<3>("h05") @[AluControl.scala 52:16]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_8 = eq(UInt<3>("h05"), io.f3) @[Conditional.scala 37:30]
              when _T_8 : @[Conditional.scala 39:67]
                node _T_9 = eq(io.f7, UInt<1>("h00")) @[AluControl.scala 55:20]
                when _T_9 : @[AluControl.scala 55:29]
                  io.out <= UInt<3>("h07") @[AluControl.scala 56:18]
                  skip @[AluControl.scala 55:29]
                else : @[AluControl.scala 57:21]
                  io.out <= UInt<4>("h08") @[AluControl.scala 58:18]
                  skip @[AluControl.scala 57:21]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_10 = eq(UInt<3>("h07"), io.f3) @[Conditional.scala 37:30]
                when _T_10 : @[Conditional.scala 39:67]
                  io.out <= UInt<1>("h00") @[AluControl.scala 62:16]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_11 = eq(UInt<3>("h06"), io.f3) @[Conditional.scala 37:30]
                  when _T_11 : @[Conditional.scala 39:67]
                    io.out <= UInt<1>("h01") @[AluControl.scala 65:16]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_12 = eq(UInt<3>("h04"), io.f3) @[Conditional.scala 37:30]
                    when _T_12 : @[Conditional.scala 39:67]
                      io.out <= UInt<4>("h09") @[AluControl.scala 68:16]
                      skip @[Conditional.scala 39:67]
      skip @[AluControl.scala 35:15]
    
  module ForwardingUnit : 
    input clock : Clock
    input reset : Reset
    output io : {flip ex_reg_rd : UInt<5>, flip mem_reg_rd : UInt<5>, flip reg_rs1 : UInt<5>, flip reg_rs2 : UInt<5>, flip ex_regWrite : UInt<1>, flip mem_regWrite : UInt<1>, forwardA : UInt<2>, forwardB : UInt<2>}
    
    io.forwardA is invalid @[ForwardingUnit.scala 18:15]
    io.forwardB is invalid @[ForwardingUnit.scala 19:15]
    node _T = eq(io.reg_rs1, io.ex_reg_rd) @[ForwardingUnit.scala 21:19]
    node _T_1 = neq(io.ex_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 21:52]
    node _T_2 = and(_T, _T_1) @[ForwardingUnit.scala 21:36]
    node _T_3 = and(_T_2, io.ex_regWrite) @[ForwardingUnit.scala 21:60]
    when _T_3 : @[ForwardingUnit.scala 21:79]
      io.forwardA <= UInt<1>("h01") @[ForwardingUnit.scala 22:17]
      skip @[ForwardingUnit.scala 21:79]
    else : @[ForwardingUnit.scala 25:7]
      node _T_4 = eq(io.reg_rs1, io.mem_reg_rd) @[ForwardingUnit.scala 24:18]
      node _T_5 = neq(io.mem_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 24:53]
      node _T_6 = and(_T_4, _T_5) @[ForwardingUnit.scala 24:36]
      node _T_7 = and(_T_6, io.mem_regWrite) @[ForwardingUnit.scala 24:61]
      when _T_7 : @[ForwardingUnit.scala 25:7]
        io.forwardA <= UInt<2>("h02") @[ForwardingUnit.scala 26:19]
        skip @[ForwardingUnit.scala 25:7]
      else : @[ForwardingUnit.scala 28:16]
        io.forwardA <= UInt<1>("h00") @[ForwardingUnit.scala 29:19]
        skip @[ForwardingUnit.scala 28:16]
    node _T_8 = eq(io.reg_rs2, io.ex_reg_rd) @[ForwardingUnit.scala 32:19]
    node _T_9 = neq(io.ex_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 32:52]
    node _T_10 = and(_T_8, _T_9) @[ForwardingUnit.scala 32:36]
    node _T_11 = and(_T_10, io.ex_regWrite) @[ForwardingUnit.scala 32:60]
    when _T_11 : @[ForwardingUnit.scala 32:79]
      io.forwardB <= UInt<1>("h01") @[ForwardingUnit.scala 33:17]
      skip @[ForwardingUnit.scala 32:79]
    else : @[ForwardingUnit.scala 36:7]
      node _T_12 = eq(io.reg_rs2, io.mem_reg_rd) @[ForwardingUnit.scala 35:18]
      node _T_13 = neq(io.mem_reg_rd, UInt<1>("h00")) @[ForwardingUnit.scala 35:53]
      node _T_14 = and(_T_12, _T_13) @[ForwardingUnit.scala 35:36]
      node _T_15 = and(_T_14, io.mem_regWrite) @[ForwardingUnit.scala 35:61]
      when _T_15 : @[ForwardingUnit.scala 36:7]
        io.forwardB <= UInt<2>("h02") @[ForwardingUnit.scala 37:19]
        skip @[ForwardingUnit.scala 36:7]
      else : @[ForwardingUnit.scala 39:16]
        io.forwardB <= UInt<1>("h00") @[ForwardingUnit.scala 40:19]
        skip @[ForwardingUnit.scala 39:16]
    
  module MDU : 
    input clock : Clock
    input reset : Reset
    output io : {flip src_a : SInt<32>, flip src_b : SInt<32>, flip op : UInt<5>, flip valid : UInt<1>, ready : UInt<1>, output : {valid : UInt<1>, bits : SInt<32>}}
    
    node _T = eq(io.op, UInt<1>("h00")) @[MDU.scala 18:30]
    node _T_1 = eq(io.op, UInt<1>("h01")) @[MDU.scala 18:47]
    node _T_2 = or(_T, _T_1) @[MDU.scala 18:38]
    node _T_3 = mul(io.src_a, io.src_b) @[MDU.scala 18:78]
    node _T_4 = eq(io.op, UInt<2>("h02")) @[MDU.scala 19:28]
    node _T_5 = asUInt(io.src_b) @[MDU.scala 19:90]
    node _T_6 = asSInt(_T_5) @[MDU.scala 19:98]
    node _T_7 = mul(io.src_a, _T_6) @[MDU.scala 19:78]
    node _T_8 = eq(io.op, UInt<2>("h03")) @[MDU.scala 20:28]
    node _T_9 = asUInt(io.src_a) @[MDU.scala 20:79]
    node _T_10 = asUInt(io.src_b) @[MDU.scala 20:97]
    node _T_11 = mul(_T_9, _T_10) @[MDU.scala 20:86]
    node _T_12 = asSInt(_T_11) @[MDU.scala 20:105]
    wire out_wire : SInt<64> @[MDU.scala 22:24]
    node _T_13 = mux(_T_8, _T_12, asSInt(UInt<1>("h00"))) @[Mux.scala 98:16]
    node _T_14 = mux(_T_4, _T_7, _T_13) @[Mux.scala 98:16]
    node _T_15 = mux(_T_2, _T_3, _T_14) @[Mux.scala 98:16]
    out_wire <= _T_15 @[MDU.scala 23:14]
    reg r_ready : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[MDU.scala 26:29]
    reg r_counter : UInt<6>, clock with : (reset => (reset, UInt<6>("h020"))) @[MDU.scala 27:29]
    reg r_dividend : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MDU.scala 28:29]
    reg r_quotient : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[MDU.scala 29:29]
    io.output.valid <= UInt<1>("h00") @[MDU.scala 31:21]
    node _T_16 = eq(io.op, UInt<3>("h05")) @[MDU.scala 34:16]
    node _T_17 = eq(io.op, UInt<3>("h07")) @[MDU.scala 34:33]
    node _T_18 = or(_T_16, _T_17) @[MDU.scala 34:24]
    when _T_18 : @[MDU.scala 34:41]
      node _T_19 = asUInt(io.src_a) @[MDU.scala 35:43]
      wire _WIRE : UInt
      _WIRE <= _T_19
      node _T_20 = asUInt(io.src_b) @[MDU.scala 36:43]
      wire _WIRE_1 : UInt
      _WIRE_1 <= _T_20
      node _T_21 = eq(io.valid, UInt<1>("h01")) @[MDU.scala 37:23]
      when _T_21 : @[MDU.scala 37:32]
        r_ready <= UInt<1>("h00") @[MDU.scala 38:24]
        r_counter <= UInt<6>("h020") @[MDU.scala 39:24]
        r_dividend <= _WIRE @[MDU.scala 40:24]
        r_quotient <= UInt<1>("h00") @[MDU.scala 41:24]
        skip @[MDU.scala 37:32]
      else : @[MDU.scala 42:38]
        node _T_22 = neq(r_counter, UInt<1>("h00")) @[MDU.scala 42:30]
        when _T_22 : @[MDU.scala 42:38]
          node _T_23 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 43:52]
          node _T_24 = tail(_T_23, 1) @[MDU.scala 43:52]
          node _T_25 = dshl(_WIRE_1, _T_24) @[MDU.scala 43:40]
          node _T_26 = geq(r_dividend, _T_25) @[MDU.scala 43:29]
          when _T_26 : @[MDU.scala 43:59]
            node _T_27 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 44:63]
            node _T_28 = tail(_T_27, 1) @[MDU.scala 44:63]
            node _T_29 = dshl(_WIRE_1, _T_28) @[MDU.scala 44:51]
            node _T_30 = sub(r_dividend, _T_29) @[MDU.scala 44:41]
            node _T_31 = tail(_T_30, 1) @[MDU.scala 44:41]
            r_dividend <= _T_31 @[MDU.scala 44:27]
            node _T_32 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 45:59]
            node _T_33 = tail(_T_32, 1) @[MDU.scala 45:59]
            node _T_34 = dshl(UInt<1>("h01"), _T_33) @[MDU.scala 45:47]
            node _T_35 = add(r_quotient, _T_34) @[MDU.scala 45:41]
            node _T_36 = tail(_T_35, 1) @[MDU.scala 45:41]
            r_quotient <= _T_36 @[MDU.scala 45:27]
            skip @[MDU.scala 43:59]
          else : @[MDU.scala 46:25]
            r_ready <= UInt<1>("h01") @[MDU.scala 46:34]
            skip @[MDU.scala 46:25]
          node _T_37 = sub(r_counter, UInt<1>("h01")) @[MDU.scala 47:37]
          node _T_38 = tail(_T_37, 1) @[MDU.scala 47:37]
          r_counter <= _T_38 @[MDU.scala 47:24]
          node _T_39 = eq(r_counter, UInt<1>("h01")) @[MDU.scala 48:38]
          r_ready <= _T_39 @[MDU.scala 48:24]
          skip @[MDU.scala 42:38]
        else : @[MDU.scala 49:20]
          io.output.valid <= UInt<1>("h01") @[MDU.scala 49:37]
          skip @[MDU.scala 49:20]
      skip @[MDU.scala 34:41]
    io.ready <= r_ready @[MDU.scala 52:18]
    node _T_40 = eq(io.op, UInt<1>("h00")) @[MDU.scala 53:16]
    when _T_40 : @[MDU.scala 53:24]
      node _T_41 = bits(out_wire, 31, 0) @[MDU.scala 54:35]
      node _T_42 = asSInt(_T_41) @[MDU.scala 54:42]
      io.output.bits <= _T_42 @[MDU.scala 54:24]
      io.output.valid <= UInt<1>("h01") @[MDU.scala 55:25]
      skip @[MDU.scala 53:24]
    else : @[MDU.scala 56:81]
      node _T_43 = eq(io.op, UInt<1>("h01")) @[MDU.scala 56:22]
      node _T_44 = eq(io.op, UInt<1>("h01")) @[MDU.scala 56:39]
      node _T_45 = and(_T_43, _T_44) @[MDU.scala 56:30]
      node _T_46 = eq(io.op, UInt<2>("h02")) @[MDU.scala 56:56]
      node _T_47 = and(_T_45, _T_46) @[MDU.scala 56:47]
      node _T_48 = eq(io.op, UInt<2>("h03")) @[MDU.scala 56:73]
      node _T_49 = and(_T_47, _T_48) @[MDU.scala 56:64]
      when _T_49 : @[MDU.scala 56:81]
        node _T_50 = bits(out_wire, 63, 32) @[MDU.scala 57:35]
        node _T_51 = asSInt(_T_50) @[MDU.scala 57:43]
        io.output.bits <= _T_51 @[MDU.scala 57:24]
        io.output.valid <= UInt<1>("h01") @[MDU.scala 58:25]
        skip @[MDU.scala 56:81]
      else : @[MDU.scala 59:30]
        node _T_52 = eq(io.op, UInt<3>("h05")) @[MDU.scala 59:22]
        when _T_52 : @[MDU.scala 59:30]
          node _T_53 = asSInt(r_quotient) @[MDU.scala 60:38]
          io.output.bits <= _T_53 @[MDU.scala 60:24]
          skip @[MDU.scala 59:30]
        else : @[MDU.scala 61:30]
          node _T_54 = eq(io.op, UInt<3>("h07")) @[MDU.scala 61:22]
          when _T_54 : @[MDU.scala 61:30]
            node _T_55 = asSInt(r_dividend) @[MDU.scala 62:38]
            io.output.bits <= _T_55 @[MDU.scala 62:24]
            skip @[MDU.scala 61:30]
          else : @[MDU.scala 63:16]
            io.output.bits <= asSInt(UInt<1>("h00")) @[MDU.scala 64:24]
            skip @[MDU.scala 63:16]
    
  module MduControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluOp : UInt<2>, flip f7 : UInt<7>, flip f3 : UInt<3>, flip aluSrc : UInt<1>, op : UInt<4>}
    
    node _T = eq(io.f7, UInt<1>("h01")) @[MduControl.scala 15:14]
    node _T_1 = eq(io.f3, UInt<1>("h00")) @[MduControl.scala 15:32]
    node _T_2 = eq(io.f3, UInt<1>("h01")) @[MduControl.scala 15:49]
    node _T_3 = or(_T_1, _T_2) @[MduControl.scala 15:40]
    node _T_4 = eq(io.f3, UInt<2>("h02")) @[MduControl.scala 15:66]
    node _T_5 = or(_T_3, _T_4) @[MduControl.scala 15:57]
    node _T_6 = eq(io.f3, UInt<2>("h03")) @[MduControl.scala 15:83]
    node _T_7 = or(_T_5, _T_6) @[MduControl.scala 15:74]
    node _T_8 = eq(io.f3, UInt<3>("h04")) @[MduControl.scala 15:100]
    node _T_9 = or(_T_7, _T_8) @[MduControl.scala 15:91]
    node _T_10 = eq(io.f3, UInt<3>("h05")) @[MduControl.scala 15:117]
    node _T_11 = or(_T_9, _T_10) @[MduControl.scala 15:108]
    node _T_12 = eq(io.f3, UInt<3>("h06")) @[MduControl.scala 15:134]
    node _T_13 = or(_T_11, _T_12) @[MduControl.scala 15:125]
    node _T_14 = eq(io.f3, UInt<3>("h07")) @[MduControl.scala 15:151]
    node _T_15 = or(_T_13, _T_14) @[MduControl.scala 15:142]
    node _T_16 = and(_T, _T_15) @[MduControl.scala 15:22]
    when _T_16 : @[MduControl.scala 15:160]
      io.op <= io.f3 @[MduControl.scala 16:13]
      skip @[MduControl.scala 15:160]
    else : @[MduControl.scala 18:13]
      io.op <= io.aluOp @[MduControl.scala 19:13]
      skip @[MduControl.scala 18:13]
    
  module Execute : 
    input clock : Clock
    input reset : Reset
    output io : {flip immediate : UInt<32>, flip readData1 : UInt<32>, flip readData2 : UInt<32>, flip pcAddress : UInt<32>, flip func7 : UInt<7>, flip func3 : UInt<3>, flip mem_result : UInt<32>, flip wb_result : UInt<32>, flip ex_mem_regWrite : UInt<1>, flip mem_wb_regWrite : UInt<1>, flip id_ex_ins : UInt<32>, flip ex_mem_ins : UInt<32>, flip mem_wb_ins : UInt<32>, flip ctl_aluSrc : UInt<1>, flip ctl_aluOp : UInt<2>, flip ctl_aluSrc1 : UInt<2>, writeData : UInt<32>, ALUresult : UInt<32>}
    
    inst alu of ALU @[Execute.scala 31:19]
    alu.clock <= clock
    alu.reset <= reset
    inst aluCtl of AluControl @[Execute.scala 32:22]
    aluCtl.clock <= clock
    aluCtl.reset <= reset
    inst ForwardingUnit of ForwardingUnit @[Execute.scala 33:18]
    ForwardingUnit.clock <= clock
    ForwardingUnit.reset <= reset
    ForwardingUnit.io.ex_regWrite <= io.ex_mem_regWrite @[Execute.scala 37:18]
    ForwardingUnit.io.mem_regWrite <= io.mem_wb_regWrite @[Execute.scala 38:19]
    node _T = bits(io.ex_mem_ins, 11, 7) @[Execute.scala 39:32]
    ForwardingUnit.io.ex_reg_rd <= _T @[Execute.scala 39:16]
    node _T_1 = bits(io.mem_wb_ins, 11, 7) @[Execute.scala 40:33]
    ForwardingUnit.io.mem_reg_rd <= _T_1 @[Execute.scala 40:17]
    node _T_2 = bits(io.id_ex_ins, 19, 15) @[Execute.scala 41:29]
    ForwardingUnit.io.reg_rs1 <= _T_2 @[Execute.scala 41:14]
    node _T_3 = bits(io.id_ex_ins, 24, 20) @[Execute.scala 42:29]
    ForwardingUnit.io.reg_rs2 <= _T_3 @[Execute.scala 42:14]
    node _T_4 = eq(ForwardingUnit.io.forwardA, UInt<1>("h00")) @[Execute.scala 47:20]
    node _T_5 = eq(ForwardingUnit.io.forwardA, UInt<1>("h01")) @[Execute.scala 48:20]
    node _T_6 = eq(ForwardingUnit.io.forwardA, UInt<2>("h02")) @[Execute.scala 49:20]
    node _T_7 = mux(_T_6, io.wb_result, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_8 = mux(_T_5, io.mem_result, _T_7) @[Mux.scala 98:16]
    node inputMux1 = mux(_T_4, io.readData1, _T_8) @[Mux.scala 98:16]
    node _T_9 = eq(ForwardingUnit.io.forwardB, UInt<1>("h00")) @[Execute.scala 55:20]
    node _T_10 = eq(ForwardingUnit.io.forwardB, UInt<1>("h01")) @[Execute.scala 56:20]
    node _T_11 = eq(ForwardingUnit.io.forwardB, UInt<2>("h02")) @[Execute.scala 57:20]
    node _T_12 = mux(_T_11, io.wb_result, UInt<1>("h00")) @[Mux.scala 98:16]
    node _T_13 = mux(_T_10, io.mem_result, _T_12) @[Mux.scala 98:16]
    node inputMux2 = mux(_T_9, io.readData2, _T_13) @[Mux.scala 98:16]
    node _T_14 = eq(io.ctl_aluSrc1, UInt<1>("h01")) @[Execute.scala 64:23]
    node _T_15 = eq(io.ctl_aluSrc1, UInt<2>("h02")) @[Execute.scala 65:23]
    node _T_16 = mux(_T_15, UInt<1>("h00"), inputMux1) @[Mux.scala 98:16]
    node aluIn1 = mux(_T_14, io.pcAddress, _T_16) @[Mux.scala 98:16]
    node aluIn2 = mux(io.ctl_aluSrc, inputMux2, io.immediate) @[Execute.scala 68:19]
    aluCtl.io.f3 <= io.func3 @[Execute.scala 70:16]
    node _T_17 = bits(io.func7, 5, 5) @[Execute.scala 71:27]
    aluCtl.io.f7 <= _T_17 @[Execute.scala 71:16]
    aluCtl.io.aluOp <= io.ctl_aluOp @[Execute.scala 72:19]
    aluCtl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 73:20]
    alu.io.input1 <= aluIn1 @[Execute.scala 75:17]
    alu.io.input2 <= aluIn2 @[Execute.scala 76:17]
    alu.io.aluCtl <= aluCtl.io.out @[Execute.scala 77:17]
    inst MDU of MDU @[Execute.scala 80:22]
    MDU.clock <= clock
    MDU.reset <= reset
    inst MduControl of MduControl @[Execute.scala 81:24]
    MduControl.clock <= clock
    MduControl.reset <= reset
    MduControl.io.f3 <= io.func3 @[Execute.scala 83:18]
    MduControl.io.f7 <= io.func7 @[Execute.scala 84:18]
    MduControl.io.aluOp <= io.ctl_aluOp @[Execute.scala 85:21]
    MduControl.io.aluSrc <= io.ctl_aluSrc @[Execute.scala 86:22]
    node _T_18 = asSInt(aluIn1) @[Execute.scala 88:28]
    MDU.io.src_a <= _T_18 @[Execute.scala 88:18]
    node _T_19 = asSInt(aluIn2) @[Execute.scala 89:28]
    MDU.io.src_b <= _T_19 @[Execute.scala 89:18]
    MDU.io.op <= MduControl.io.op @[Execute.scala 90:15]
    MDU.io.valid <= UInt<1>("h01") @[Execute.scala 91:18]
    node _T_20 = eq(io.func7, UInt<1>("h01")) @[Execute.scala 93:20]
    node _T_21 = and(_T_20, MDU.io.ready) @[Execute.scala 93:28]
    when _T_21 : @[Execute.scala 93:44]
      node _T_22 = mux(MDU.io.output.valid, MDU.io.output.bits, asSInt(UInt<1>("h00"))) @[Execute.scala 93:65]
      node _T_23 = asUInt(_T_22) @[Execute.scala 93:113]
      io.ALUresult <= _T_23 @[Execute.scala 93:58]
      skip @[Execute.scala 93:44]
    else : @[Execute.scala 94:15]
      io.ALUresult <= alu.io.result @[Execute.scala 94:29]
      skip @[Execute.scala 94:15]
    io.writeData <= inputMux2 @[Execute.scala 99:16]
    
  module MemoryFetch : 
    input clock : Clock
    input reset : Reset
    output io : {flip aluResultIn : UInt<32>, flip writeData : UInt<32>, flip writeEnable : UInt<1>, flip readEnable : UInt<1>, readData : UInt<32>, stall : UInt<1>, dccmReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip dccmRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    io.dccmRsp.ready <= UInt<1>("h01") @[MemoryFetch.scala 27:20]
    io.dccmReq.bits.activeByteLane <= UInt<4>("h0f") @[MemoryFetch.scala 29:34]
    io.dccmReq.bits.dataRequest <= io.writeData @[MemoryFetch.scala 30:31]
    io.dccmReq.bits.addrRequest <= io.aluResultIn @[MemoryFetch.scala 31:31]
    io.dccmReq.bits.isWrite <= io.writeEnable @[MemoryFetch.scala 32:27]
    node _T = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 33:42]
    node _T_1 = mux(_T, UInt<1>("h01"), UInt<1>("h00")) @[MemoryFetch.scala 33:26]
    io.dccmReq.valid <= _T_1 @[MemoryFetch.scala 33:20]
    node _T_2 = or(io.writeEnable, io.readEnable) @[MemoryFetch.scala 35:31]
    node _T_3 = eq(io.dccmRsp.valid, UInt<1>("h00")) @[MemoryFetch.scala 35:52]
    node _T_4 = and(_T_2, _T_3) @[MemoryFetch.scala 35:49]
    io.stall <= _T_4 @[MemoryFetch.scala 35:12]
    wire _WIRE : UInt<256> @[MemoryFetch.scala 40:21]
    _WIRE is invalid @[MemoryFetch.scala 40:21]
    node _T_5 = mux(io.dccmRsp.valid, io.dccmRsp.bits.dataResponse, _WIRE) @[MemoryFetch.scala 40:21]
    io.readData <= _T_5 @[MemoryFetch.scala 40:15]
    node _T_6 = bits(io.aluResultIn, 31, 28) @[MemoryFetch.scala 42:40]
    node _T_7 = eq(_T_6, UInt<4>("h08")) @[MemoryFetch.scala 42:49]
    node _T_8 = and(io.writeEnable, _T_7) @[MemoryFetch.scala 42:23]
    when _T_8 : @[MemoryFetch.scala 42:67]
      node _T_9 = asUInt(reset) @[MemoryFetch.scala 43:11]
      node _T_10 = eq(_T_9, UInt<1>("h00")) @[MemoryFetch.scala 43:11]
      when _T_10 : @[MemoryFetch.scala 43:11]
        printf(clock, UInt<1>(1), "%x\n", io.writeData) @[MemoryFetch.scala 43:11]
        skip @[MemoryFetch.scala 43:11]
      skip @[MemoryFetch.scala 42:67]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, flip halt : UInt<1>, out : SInt<32>, pc4 : SInt<32>}
    
    reg pc_reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h0fffffffc")))) @[PC.scala 12:23]
    pc_reg <= io.in @[PC.scala 13:10]
    io.out <= pc_reg @[PC.scala 14:10]
    node _T = add(pc_reg, asSInt(UInt<4>("h04"))) @[PC.scala 15:41]
    node _T_1 = tail(_T, 1) @[PC.scala 15:41]
    node _T_2 = asSInt(_T_1) @[PC.scala 15:41]
    node _T_3 = mux(io.halt, pc_reg, _T_2) @[PC.scala 15:16]
    io.pc4 <= _T_3 @[PC.scala 15:10]
    
  module RVFI : 
    input clock : Clock
    input reset : Reset
    output io : {flip stall : UInt<1>, flip insn : UInt<32>, flip rs1_rdata : UInt<32>, flip rs2_rdata : UInt<32>, flip rd_addr : UInt<5>, flip rd_wdata : UInt<32>, flip pc : SInt<32>, flip pc_offset : SInt<32>, flip pc_four : SInt<32>, flip pc_src : UInt<1>, rvfi : {valid : UInt<1>, order : UInt<64>, insn : UInt<32>, trap : UInt<1>, halt : UInt<1>, intr : UInt<1>, ixl : UInt<2>, mode : UInt<2>, rs1_addr : UInt<5>, rs1_rdata : SInt<32>, rs2_addr : UInt<5>, rs2_rdata : SInt<32>, rd_addr : UInt<5>, rd_wdata : SInt<32>, pc_rdata : UInt<32>, pc_wdata : UInt<32>}}
    
    reg rvfi_valid : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 44:27]
    reg rvfi_order : UInt<64>, clock with : (reset => (reset, UInt<64>("h00"))) @[RVFI.scala 45:27]
    reg rvfi_halt : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 46:26]
    reg rvfi_intr : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[RVFI.scala 47:26]
    reg rvfi_mode : UInt<2>, clock with : (reset => (reset, UInt<2>("h03"))) @[RVFI.scala 48:26]
    node _T = asUInt(reset) @[RVFI.scala 50:30]
    node _T_1 = eq(_T, UInt<1>("h00")) @[RVFI.scala 50:17]
    node _T_2 = eq(io.stall, UInt<1>("h00")) @[RVFI.scala 50:36]
    node _T_3 = and(_T_1, _T_2) @[RVFI.scala 50:33]
    rvfi_valid <= _T_3 @[RVFI.scala 50:14]
    when rvfi_valid : @[RVFI.scala 52:19]
      node _T_4 = add(rvfi_order, UInt<1>("h01")) @[RVFI.scala 53:30]
      node _T_5 = tail(_T_4, 1) @[RVFI.scala 53:30]
      rvfi_order <= _T_5 @[RVFI.scala 53:16]
      skip @[RVFI.scala 52:19]
    node _T_6 = asUInt(io.pc) @[RVFI.scala 56:35]
    io.rvfi.pc_rdata <= _T_6 @[RVFI.scala 56:20]
    node _T_7 = asUInt(io.pc_offset) @[RVFI.scala 57:57]
    node _T_8 = asUInt(io.pc_four) @[RVFI.scala 57:78]
    node _T_9 = mux(io.pc_src, _T_7, _T_8) @[RVFI.scala 57:26]
    io.rvfi.pc_wdata <= _T_9 @[RVFI.scala 57:20]
    node _T_10 = bits(io.insn, 19, 15) @[RVFI.scala 59:30]
    io.rvfi.rs1_addr <= _T_10 @[RVFI.scala 59:20]
    node _T_11 = asSInt(io.rs1_rdata) @[RVFI.scala 60:43]
    io.rvfi.rs1_rdata <= _T_11 @[RVFI.scala 60:21]
    node _T_12 = bits(io.insn, 24, 20) @[RVFI.scala 61:30]
    io.rvfi.rs2_addr <= _T_12 @[RVFI.scala 61:20]
    node _T_13 = asSInt(io.rs2_rdata) @[RVFI.scala 62:43]
    io.rvfi.rs2_rdata <= _T_13 @[RVFI.scala 62:21]
    io.rvfi.rd_addr <= io.rd_addr @[RVFI.scala 64:19]
    node _T_14 = asSInt(io.rd_wdata) @[RVFI.scala 65:41]
    io.rvfi.rd_wdata <= _T_14 @[RVFI.scala 65:20]
    io.rvfi.mode <= rvfi_mode @[RVFI.scala 67:16]
    io.rvfi.valid <= rvfi_valid @[RVFI.scala 68:17]
    io.rvfi.order <= rvfi_order @[RVFI.scala 69:17]
    io.rvfi.insn <= io.insn @[RVFI.scala 70:16]
    io.rvfi.halt <= rvfi_halt @[RVFI.scala 71:16]
    io.rvfi.intr <= rvfi_intr @[RVFI.scala 72:16]
    io.rvfi.ixl <= UInt<1>("h01") @[RVFI.scala 73:16]
    io.rvfi.trap <= UInt<1>("h00") @[RVFI.scala 74:16]
    
  module Core : 
    input clock : Clock
    input reset : Reset
    output io : {pin : UInt<32>, dmemReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip dmemRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}, imemReq : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip imemRsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}, rvfi : {valid : UInt<1>, order : UInt<64>, insn : UInt<32>, trap : UInt<1>, halt : UInt<1>, intr : UInt<1>, ixl : UInt<2>, mode : UInt<2>, rs1_addr : UInt<5>, rs1_rdata : SInt<32>, rs2_addr : UInt<5>, rs2_rdata : SInt<32>, rd_addr : UInt<5>, rd_wdata : SInt<32>, pc_rdata : UInt<32>, pc_wdata : UInt<32>}}
    
    reg if_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 23:26]
    reg if_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 24:27]
    reg id_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 27:26]
    reg id_reg_rd1 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 28:27]
    reg id_reg_rd2 : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 29:27]
    reg id_reg_imm : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 30:27]
    reg id_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 31:27]
    reg id_reg_f7 : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[Core.scala 32:26]
    reg id_reg_f3 : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[Core.scala 33:26]
    reg id_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 34:27]
    reg id_reg_ctl_aluSrc : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 35:34]
    reg id_reg_ctl_aluSrc1 : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 36:35]
    reg id_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 37:36]
    reg id_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 38:36]
    reg id_reg_ctl_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 39:35]
    reg id_reg_ctl_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 40:36]
    reg id_reg_ctl_branch : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 41:34]
    reg id_reg_ctl_aluOp : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 42:33]
    reg id_reg_ctl_jump : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 43:32]
    reg ex_reg_branch : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 46:30]
    reg ex_reg_zero : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 47:28]
    reg ex_reg_result : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 48:30]
    reg ex_reg_wd : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 49:26]
    reg ex_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 50:27]
    reg ex_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 51:27]
    reg ex_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 52:36]
    reg ex_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 53:36]
    reg ex_reg_ctl_memRead : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 54:35]
    reg ex_reg_ctl_memWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 55:36]
    reg ex_reg_ctl_branch_taken : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 56:40]
    reg ex_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 57:26]
    reg mem_reg_rd : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 60:27]
    reg mem_reg_ins : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 61:28]
    reg mem_reg_result : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 62:31]
    reg mem_reg_branch : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 63:31]
    reg mem_reg_wra : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Core.scala 64:28]
    reg mem_reg_ctl_memToReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Core.scala 65:37]
    reg mem_reg_ctl_regWrite : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[Core.scala 66:37]
    reg mem_reg_pc : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Core.scala 67:27]
    inst InstructionFetch of InstructionFetch @[Core.scala 70:18]
    InstructionFetch.clock <= clock
    InstructionFetch.reset <= reset
    inst InstructionDecode of InstructionDecode @[Core.scala 71:18]
    InstructionDecode.clock <= clock
    InstructionDecode.reset <= reset
    inst Execute of Execute @[Core.scala 72:18]
    Execute.clock <= clock
    Execute.reset <= reset
    inst MEM of MemoryFetch @[Core.scala 73:19]
    MEM.clock <= clock
    MEM.reset <= reset
    inst pc of PC @[Core.scala 79:18]
    pc.clock <= clock
    pc.reset <= reset
    io.imemReq.bits.isWrite <= InstructionFetch.io.coreInstrReq.bits.isWrite @[Core.scala 81:14]
    io.imemReq.bits.activeByteLane <= InstructionFetch.io.coreInstrReq.bits.activeByteLane @[Core.scala 81:14]
    io.imemReq.bits.dataRequest <= InstructionFetch.io.coreInstrReq.bits.dataRequest @[Core.scala 81:14]
    io.imemReq.bits.addrRequest <= InstructionFetch.io.coreInstrReq.bits.addrRequest @[Core.scala 81:14]
    io.imemReq.valid <= InstructionFetch.io.coreInstrReq.valid @[Core.scala 81:14]
    InstructionFetch.io.coreInstrReq.ready <= io.imemReq.ready @[Core.scala 81:14]
    InstructionFetch.io.coreInstrResp.bits.error <= io.imemRsp.bits.error @[Core.scala 82:20]
    InstructionFetch.io.coreInstrResp.bits.dataResponse <= io.imemRsp.bits.dataResponse @[Core.scala 82:20]
    InstructionFetch.io.coreInstrResp.valid <= io.imemRsp.valid @[Core.scala 82:20]
    io.imemRsp.ready <= InstructionFetch.io.coreInstrResp.ready @[Core.scala 82:20]
    node _T = asUInt(pc.io.in) @[Core.scala 84:32]
    InstructionFetch.io.address <= _T @[Core.scala 84:14]
    node instruction = mux(io.imemRsp.valid, InstructionFetch.io.instruction, UInt<32>("h013")) @[Core.scala 85:24]
    node _T_1 = mux(io.imemReq.valid, UInt<1>("h00"), UInt<1>("h01")) @[Core.scala 87:20]
    pc.io.halt <= _T_1 @[Core.scala 87:14]
    node _T_2 = eq(MEM.io.stall, UInt<1>("h00")) @[Core.scala 88:37]
    node _T_3 = and(InstructionDecode.io.hdu_pcWrite, _T_2) @[Core.scala 88:34]
    node _T_4 = asSInt(InstructionDecode.io.pcPlusOffset) @[Core.scala 88:88]
    node _T_5 = mux(InstructionDecode.io.pcSrc, _T_4, pc.io.pc4) @[Core.scala 88:55]
    node _T_6 = mux(_T_3, _T_5, pc.io.out) @[Core.scala 88:18]
    pc.io.in <= _T_6 @[Core.scala 88:12]
    node _T_7 = eq(MEM.io.stall, UInt<1>("h00")) @[Core.scala 91:31]
    node _T_8 = and(InstructionDecode.io.hdu_if_reg_write, _T_7) @[Core.scala 91:28]
    when _T_8 : @[Core.scala 91:46]
      node _T_9 = asUInt(pc.io.out) @[Core.scala 92:34]
      if_reg_pc <= _T_9 @[Core.scala 92:15]
      if_reg_ins <= instruction @[Core.scala 93:16]
      skip @[Core.scala 91:46]
    when InstructionDecode.io.ifid_flush : @[Core.scala 95:23]
      if_reg_ins <= UInt<1>("h00") @[Core.scala 96:16]
      skip @[Core.scala 95:23]
    id_reg_rd1 <= InstructionDecode.io.readData1 @[Core.scala 104:14]
    id_reg_rd2 <= InstructionDecode.io.readData2 @[Core.scala 105:14]
    id_reg_imm <= InstructionDecode.io.immediate @[Core.scala 106:14]
    id_reg_wra <= InstructionDecode.io.writeRegAddress @[Core.scala 107:14]
    id_reg_f3 <= InstructionDecode.io.func3 @[Core.scala 108:13]
    id_reg_f7 <= InstructionDecode.io.func7 @[Core.scala 109:13]
    id_reg_ins <= if_reg_ins @[Core.scala 110:14]
    id_reg_pc <= if_reg_pc @[Core.scala 111:13]
    id_reg_ctl_aluSrc <= InstructionDecode.io.ctl_aluSrc @[Core.scala 112:21]
    id_reg_ctl_memToReg <= InstructionDecode.io.ctl_memToReg @[Core.scala 113:23]
    id_reg_ctl_regWrite <= InstructionDecode.io.ctl_regWrite @[Core.scala 114:23]
    id_reg_ctl_memRead <= InstructionDecode.io.ctl_memRead @[Core.scala 115:22]
    id_reg_ctl_memWrite <= InstructionDecode.io.ctl_memWrite @[Core.scala 116:23]
    id_reg_ctl_branch <= InstructionDecode.io.ctl_branch @[Core.scala 117:21]
    id_reg_ctl_aluOp <= InstructionDecode.io.ctl_aluOp @[Core.scala 118:20]
    id_reg_ctl_jump <= InstructionDecode.io.ctl_jump @[Core.scala 119:19]
    id_reg_ctl_aluSrc1 <= InstructionDecode.io.ctl_aluSrc1 @[Core.scala 120:22]
    InstructionDecode.io.id_instruction <= if_reg_ins @[Core.scala 122:21]
    InstructionDecode.io.pcAddress <= if_reg_pc @[Core.scala 123:16]
    InstructionDecode.io.dmem_resp_valid <= io.dmemRsp.valid @[Core.scala 124:22]
    InstructionDecode.io.ex_ins <= id_reg_ins @[Core.scala 127:13]
    InstructionDecode.io.ex_mem_ins <= ex_reg_ins @[Core.scala 128:17]
    InstructionDecode.io.mem_wb_ins <= mem_reg_ins @[Core.scala 129:17]
    InstructionDecode.io.ex_mem_result <= ex_reg_result @[Core.scala 130:20]
    ex_reg_wd <= Execute.io.writeData @[Core.scala 138:13]
    ex_reg_result <= Execute.io.ALUresult @[Core.scala 139:17]
    Execute.io.immediate <= id_reg_imm @[Core.scala 141:16]
    Execute.io.readData1 <= id_reg_rd1 @[Core.scala 142:16]
    Execute.io.readData2 <= id_reg_rd2 @[Core.scala 143:16]
    Execute.io.pcAddress <= id_reg_pc @[Core.scala 144:16]
    Execute.io.func3 <= id_reg_f3 @[Core.scala 145:12]
    Execute.io.func7 <= id_reg_f7 @[Core.scala 146:12]
    Execute.io.ctl_aluSrc <= id_reg_ctl_aluSrc @[Core.scala 147:17]
    Execute.io.ctl_aluOp <= id_reg_ctl_aluOp @[Core.scala 148:16]
    Execute.io.ctl_aluSrc1 <= id_reg_ctl_aluSrc1 @[Core.scala 149:18]
    ex_reg_pc <= id_reg_pc @[Core.scala 152:13]
    ex_reg_wra <= id_reg_wra @[Core.scala 153:14]
    ex_reg_ins <= id_reg_ins @[Core.scala 154:14]
    ex_reg_ctl_memToReg <= id_reg_ctl_memToReg @[Core.scala 155:23]
    ex_reg_ctl_regWrite <= id_reg_ctl_regWrite @[Core.scala 156:23]
    InstructionDecode.io.id_ex_mem_read <= id_reg_ctl_memRead @[Core.scala 159:21]
    InstructionDecode.io.ex_mem_mem_read <= ex_reg_ctl_memRead @[Core.scala 160:22]
    Execute.io.id_ex_ins <= id_reg_ins @[Core.scala 164:16]
    Execute.io.ex_mem_ins <= ex_reg_ins @[Core.scala 165:17]
    Execute.io.mem_wb_ins <= mem_reg_ins @[Core.scala 166:17]
    node _T_10 = bits(id_reg_ins, 11, 7) @[Core.scala 167:28]
    InstructionDecode.io.id_ex_rd <= _T_10 @[Core.scala 167:15]
    node _T_11 = bits(id_reg_ins, 6, 0) @[Core.scala 168:36]
    node _T_12 = eq(_T_11, UInt<7>("h063")) @[Core.scala 168:42]
    node _T_13 = mux(_T_12, UInt<1>("h01"), UInt<1>("h00")) @[Core.scala 168:25]
    InstructionDecode.io.id_ex_branch <= _T_13 @[Core.scala 168:19]
    node _T_14 = bits(ex_reg_ins, 11, 7) @[Core.scala 169:29]
    InstructionDecode.io.ex_mem_rd <= _T_14 @[Core.scala 169:16]
    InstructionDecode.io.ex_result <= Execute.io.ALUresult @[Core.scala 170:16]
    io.dmemReq.bits.isWrite <= MEM.io.dccmReq.bits.isWrite @[Core.scala 177:14]
    io.dmemReq.bits.activeByteLane <= MEM.io.dccmReq.bits.activeByteLane @[Core.scala 177:14]
    io.dmemReq.bits.dataRequest <= MEM.io.dccmReq.bits.dataRequest @[Core.scala 177:14]
    io.dmemReq.bits.addrRequest <= MEM.io.dccmReq.bits.addrRequest @[Core.scala 177:14]
    io.dmemReq.valid <= MEM.io.dccmReq.valid @[Core.scala 177:14]
    MEM.io.dccmReq.ready <= io.dmemReq.ready @[Core.scala 177:14]
    MEM.io.dccmRsp.bits.error <= io.dmemRsp.bits.error @[Core.scala 178:18]
    MEM.io.dccmRsp.bits.dataResponse <= io.dmemRsp.bits.dataResponse @[Core.scala 178:18]
    MEM.io.dccmRsp.valid <= io.dmemRsp.valid @[Core.scala 178:18]
    io.dmemRsp.ready <= MEM.io.dccmRsp.ready @[Core.scala 178:18]
    when MEM.io.stall : @[Core.scala 181:21]
      mem_reg_rd <= mem_reg_rd @[Core.scala 182:16]
      mem_reg_result <= mem_reg_result @[Core.scala 183:20]
      ex_reg_wra <= ex_reg_wra @[Core.scala 185:16]
      ex_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 186:25]
      ex_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 188:25]
      mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 189:26]
      mem_reg_ins <= mem_reg_ins @[Core.scala 190:17]
      mem_reg_pc <= mem_reg_pc @[Core.scala 191:16]
      ex_reg_ctl_memRead <= ex_reg_ctl_memRead @[Core.scala 193:24]
      ex_reg_ctl_memWrite <= ex_reg_ctl_memWrite @[Core.scala 194:25]
      skip @[Core.scala 181:21]
    else : @[Core.scala 196:5]
      mem_reg_rd <= MEM.io.readData @[Core.scala 197:16]
      mem_reg_result <= ex_reg_result @[Core.scala 198:20]
      mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite @[Core.scala 200:26]
      mem_reg_ins <= ex_reg_ins @[Core.scala 201:17]
      mem_reg_pc <= ex_reg_pc @[Core.scala 202:16]
      mem_reg_wra <= ex_reg_wra @[Core.scala 203:17]
      ex_reg_ctl_memRead <= id_reg_ctl_memRead @[Core.scala 204:24]
      ex_reg_ctl_memWrite <= id_reg_ctl_memWrite @[Core.scala 205:25]
      skip @[Core.scala 196:5]
    mem_reg_wra <= ex_reg_wra @[Core.scala 207:15]
    mem_reg_ctl_memToReg <= ex_reg_ctl_memToReg @[Core.scala 208:24]
    Execute.io.ex_mem_regWrite <= ex_reg_ctl_regWrite @[Core.scala 209:22]
    MEM.io.aluResultIn <= ex_reg_result @[Core.scala 210:22]
    MEM.io.writeData <= ex_reg_wd @[Core.scala 211:20]
    MEM.io.readEnable <= ex_reg_ctl_memRead @[Core.scala 212:21]
    MEM.io.writeEnable <= ex_reg_ctl_memWrite @[Core.scala 213:22]
    Execute.io.mem_result <= ex_reg_result @[Core.scala 214:17]
    wire wb_data : UInt<32> @[Core.scala 220:21]
    wire wb_addr : UInt<5> @[Core.scala 221:21]
    node _T_15 = eq(mem_reg_ctl_memToReg, UInt<1>("h01")) @[Core.scala 223:29]
    when _T_15 : @[Core.scala 223:38]
      wb_data <= MEM.io.readData @[Core.scala 224:13]
      node _T_16 = mux(io.dmemRsp.valid, mem_reg_wra, UInt<1>("h00")) @[Core.scala 225:19]
      wb_addr <= _T_16 @[Core.scala 225:13]
      skip @[Core.scala 223:38]
    else : @[Core.scala 226:44]
      node _T_17 = eq(mem_reg_ctl_memToReg, UInt<2>("h02")) @[Core.scala 226:35]
      when _T_17 : @[Core.scala 226:44]
        wb_data <= mem_reg_pc @[Core.scala 227:15]
        wb_addr <= mem_reg_wra @[Core.scala 228:15]
        skip @[Core.scala 226:44]
      else : @[Core.scala 230:16]
        wb_data <= mem_reg_result @[Core.scala 231:15]
        wb_addr <= mem_reg_wra @[Core.scala 232:15]
        skip @[Core.scala 230:16]
    InstructionDecode.io.mem_wb_result <= wb_data @[Core.scala 235:20]
    InstructionDecode.io.writeData <= wb_data @[Core.scala 236:16]
    Execute.io.wb_result <= wb_data @[Core.scala 237:16]
    Execute.io.mem_wb_regWrite <= mem_reg_ctl_regWrite @[Core.scala 238:22]
    InstructionDecode.io.writeReg <= wb_addr @[Core.scala 239:15]
    InstructionDecode.io.ctl_writeEnable <= mem_reg_ctl_regWrite @[Core.scala 240:22]
    io.pin <= wb_data @[Core.scala 241:10]
    inst rvfi of RVFI @[Core.scala 245:20]
    rvfi.clock <= clock
    rvfi.reset <= reset
    rvfi.io.stall <= MEM.io.stall @[Core.scala 246:17]
    rvfi.io.pc <= pc.io.out @[Core.scala 247:14]
    rvfi.io.pc_src <= InstructionDecode.io.pcSrc @[Core.scala 248:18]
    rvfi.io.pc_four <= pc.io.pc4 @[Core.scala 249:19]
    rvfi.io.pc_offset <= pc.io.in @[Core.scala 250:21]
    rvfi.io.rd_wdata <= wb_data @[Core.scala 251:20]
    rvfi.io.rd_addr <= wb_addr @[Core.scala 252:19]
    rvfi.io.rs1_rdata <= InstructionDecode.io.readData1 @[Core.scala 253:21]
    rvfi.io.rs2_rdata <= InstructionDecode.io.readData2 @[Core.scala 254:21]
    rvfi.io.insn <= if_reg_ins @[Core.scala 255:16]
    io.rvfi.pc_wdata <= rvfi.io.rvfi.pc_wdata @[Core.scala 257:11]
    io.rvfi.pc_rdata <= rvfi.io.rvfi.pc_rdata @[Core.scala 257:11]
    io.rvfi.rd_wdata <= rvfi.io.rvfi.rd_wdata @[Core.scala 257:11]
    io.rvfi.rd_addr <= rvfi.io.rvfi.rd_addr @[Core.scala 257:11]
    io.rvfi.rs2_rdata <= rvfi.io.rvfi.rs2_rdata @[Core.scala 257:11]
    io.rvfi.rs2_addr <= rvfi.io.rvfi.rs2_addr @[Core.scala 257:11]
    io.rvfi.rs1_rdata <= rvfi.io.rvfi.rs1_rdata @[Core.scala 257:11]
    io.rvfi.rs1_addr <= rvfi.io.rvfi.rs1_addr @[Core.scala 257:11]
    io.rvfi.mode <= rvfi.io.rvfi.mode @[Core.scala 257:11]
    io.rvfi.ixl <= rvfi.io.rvfi.ixl @[Core.scala 257:11]
    io.rvfi.intr <= rvfi.io.rvfi.intr @[Core.scala 257:11]
    io.rvfi.halt <= rvfi.io.rvfi.halt @[Core.scala 257:11]
    io.rvfi.trap <= rvfi.io.rvfi.trap @[Core.scala 257:11]
    io.rvfi.insn <= rvfi.io.rvfi.insn @[Core.scala 257:11]
    io.rvfi.order <= rvfi.io.rvfi.order @[Core.scala 257:11]
    io.rvfi.valid <= rvfi.io.rvfi.valid @[Core.scala 257:11]
    
  module TilelinkHost : 
    input clock : Clock
    input reset : Reset
    output io : {tlMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<32>, a_corrupt : UInt<1>, a_data : UInt<256>}}, flip tlSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<256>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 19:27]
    reg addrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 20:27]
    io.tlSlaveReceiver.ready <= UInt<1>("h00") @[TilelinkHost.scala 32:33]
    io.reqIn.ready <= UInt<1>("h01") @[TilelinkHost.scala 33:33]
    io.tlMasterTransmitter.bits.a_opcode <= UInt<1>("h00") @[TilelinkHost.scala 40:45]
    io.tlMasterTransmitter.bits.a_data <= UInt<1>("h00") @[TilelinkHost.scala 41:45]
    io.tlMasterTransmitter.bits.a_address <= addrReg @[TilelinkHost.scala 42:45]
    io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 43:45]
    io.tlMasterTransmitter.bits.a_source <= UInt<1>("h00") @[TilelinkHost.scala 44:45]
    io.tlMasterTransmitter.bits.a_size <= UInt<1>("h00") @[TilelinkHost.scala 45:45]
    io.tlMasterTransmitter.bits.a_mask <= UInt<1>("h00") @[TilelinkHost.scala 46:45]
    io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 47:45]
    io.tlMasterTransmitter.valid <= UInt<1>("h00") @[TilelinkHost.scala 48:45]
    io.rspOut.bits.dataResponse <= UInt<1>("h00") @[TilelinkHost.scala 50:45]
    io.rspOut.bits.error <= UInt<1>("h00") @[TilelinkHost.scala 51:45]
    io.rspOut.valid <= UInt<1>("h00") @[TilelinkHost.scala 53:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkHost.scala 56:19]
    when _T : @[TilelinkHost.scala 56:28]
      when io.reqIn.valid : @[TilelinkHost.scala 60:29]
        node _io_tlMasterTransmitter_bits_a_opcode_T = eq(io.reqIn.bits.activeByteLane, UInt<4>("h0f")) @[TilelinkHost.scala 62:116]
        node _io_tlMasterTransmitter_bits_a_opcode_T_1 = mux(_io_tlMasterTransmitter_bits_a_opcode_T, UInt<1>("h00"), UInt<1>("h01")) @[TilelinkHost.scala 62:86]
        node _io_tlMasterTransmitter_bits_a_opcode_T_2 = mux(io.reqIn.bits.isWrite, _io_tlMasterTransmitter_bits_a_opcode_T_1, UInt<3>("h04")) @[TilelinkHost.scala 62:59]
        io.tlMasterTransmitter.bits.a_opcode <= _io_tlMasterTransmitter_bits_a_opcode_T_2 @[TilelinkHost.scala 62:53]
        io.tlMasterTransmitter.bits.a_data <= io.reqIn.bits.dataRequest @[TilelinkHost.scala 63:53]
        io.tlMasterTransmitter.bits.a_address <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 64:53]
        io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 65:53]
        io.tlMasterTransmitter.bits.a_source <= UInt<2>("h02") @[TilelinkHost.scala 66:53]
        node _io_tlMasterTransmitter_bits_a_size_T = eq(UInt<1>("h01"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_1 = mux(_io_tlMasterTransmitter_bits_a_size_T, UInt<1>("h00"), UInt<2>("h02")) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_2 = eq(UInt<2>("h02"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_3 = mux(_io_tlMasterTransmitter_bits_a_size_T_2, UInt<1>("h01"), _io_tlMasterTransmitter_bits_a_size_T_1) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_4 = eq(UInt<3>("h04"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_5 = mux(_io_tlMasterTransmitter_bits_a_size_T_4, UInt<2>("h02"), _io_tlMasterTransmitter_bits_a_size_T_3) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_6 = eq(UInt<4>("h08"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_7 = mux(_io_tlMasterTransmitter_bits_a_size_T_6, UInt<2>("h03"), _io_tlMasterTransmitter_bits_a_size_T_5) @[Mux.scala 80:57]
        io.tlMasterTransmitter.bits.a_size <= _io_tlMasterTransmitter_bits_a_size_T_7 @[TilelinkHost.scala 67:53]
        io.tlMasterTransmitter.bits.a_mask <= io.reqIn.bits.activeByteLane @[TilelinkHost.scala 73:53]
        io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 74:53]
        io.tlMasterTransmitter.valid <= io.reqIn.valid @[TilelinkHost.scala 75:53]
        stateReg <= UInt<1>("h01") @[TilelinkHost.scala 77:22]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 78:38]
        addrReg <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 79:21]
        skip @[TilelinkHost.scala 60:29]
      skip @[TilelinkHost.scala 56:28]
    else : @[TilelinkHost.scala 84:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkHost.scala 84:25]
      when _T_1 : @[TilelinkHost.scala 84:43]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 86:34]
        io.reqIn.ready <= UInt<1>("h00") @[TilelinkHost.scala 87:34]
        when io.tlSlaveReceiver.valid : @[TilelinkHost.scala 89:39]
          io.rspOut.bits.dataResponse <= io.tlSlaveReceiver.bits.d_data @[TilelinkHost.scala 91:41]
          io.rspOut.bits.error <= io.tlSlaveReceiver.bits.d_denied @[TilelinkHost.scala 92:34]
          io.rspOut.valid <= io.tlSlaveReceiver.valid @[TilelinkHost.scala 94:29]
          stateReg <= UInt<1>("h00") @[TilelinkHost.scala 95:22]
          skip @[TilelinkHost.scala 89:39]
        skip @[TilelinkHost.scala 84:43]
    
  module TilelinkDevice : 
    input clock : Clock
    input reset : Reset
    output io : {tlSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<256>}}, flip tlMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<32>, a_corrupt : UInt<1>, a_data : UInt<256>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkDevice.scala 17:27]
    io.tlMasterReceiver.ready <= UInt<1>("h01") @[TilelinkDevice.scala 19:31]
    io.rspIn.ready <= UInt<1>("h00") @[TilelinkDevice.scala 20:20]
    io.reqOut.bits.addrRequest <= UInt<1>("h00") @[TilelinkDevice.scala 23:37]
    io.reqOut.bits.dataRequest <= UInt<1>("h00") @[TilelinkDevice.scala 24:37]
    io.reqOut.bits.activeByteLane <= UInt<1>("h00") @[TilelinkDevice.scala 25:37]
    io.reqOut.bits.isWrite <= UInt<1>("h00") @[TilelinkDevice.scala 26:37]
    io.reqOut.valid <= UInt<1>("h00") @[TilelinkDevice.scala 27:37]
    io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h00") @[TilelinkDevice.scala 29:45]
    io.tlSlaveTransmitter.bits.d_data <= UInt<1>("h00") @[TilelinkDevice.scala 30:45]
    io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 31:45]
    io.tlSlaveTransmitter.bits.d_size <= UInt<1>("h00") @[TilelinkDevice.scala 32:45]
    io.tlSlaveTransmitter.bits.d_source <= UInt<1>("h00") @[TilelinkDevice.scala 33:45]
    io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 34:45]
    io.tlSlaveTransmitter.bits.d_denied <= UInt<1>("h00") @[TilelinkDevice.scala 35:45]
    io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 36:45]
    io.tlSlaveTransmitter.valid <= UInt<1>("h00") @[TilelinkDevice.scala 37:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkDevice.scala 41:19]
    when _T : @[TilelinkDevice.scala 41:28]
      when io.tlMasterReceiver.valid : @[TilelinkDevice.scala 43:40]
        io.reqOut.bits.addrRequest <= io.tlMasterReceiver.bits.a_address @[TilelinkDevice.scala 45:40]
        io.reqOut.bits.dataRequest <= io.tlMasterReceiver.bits.a_data @[TilelinkDevice.scala 46:40]
        io.reqOut.bits.activeByteLane <= io.tlMasterReceiver.bits.a_mask @[TilelinkDevice.scala 47:43]
        node _io_reqOut_bits_isWrite_T = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h00")) @[TilelinkDevice.scala 48:73]
        node _io_reqOut_bits_isWrite_T_1 = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h01")) @[TilelinkDevice.scala 48:128]
        node _io_reqOut_bits_isWrite_T_2 = or(_io_reqOut_bits_isWrite_T, _io_reqOut_bits_isWrite_T_1) @[TilelinkDevice.scala 48:91]
        io.reqOut.bits.isWrite <= _io_reqOut_bits_isWrite_T_2 @[TilelinkDevice.scala 48:36]
        io.reqOut.valid <= UInt<1>("h01") @[TilelinkDevice.scala 49:29]
        stateReg <= UInt<1>("h01") @[TilelinkDevice.scala 51:22]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 52:28]
        skip @[TilelinkDevice.scala 43:40]
      skip @[TilelinkDevice.scala 41:28]
    else : @[TilelinkDevice.scala 56:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkDevice.scala 56:25]
      when _T_1 : @[TilelinkDevice.scala 56:43]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 58:24]
        when io.rspIn.valid : @[TilelinkDevice.scala 60:29]
          io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h01") @[TilelinkDevice.scala 62:49]
          io.tlSlaveTransmitter.bits.d_data <= io.rspIn.bits.dataResponse @[TilelinkDevice.scala 63:47]
          io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 64:48]
          io.tlSlaveTransmitter.bits.d_size <= io.tlMasterReceiver.bits.a_size @[TilelinkDevice.scala 65:47]
          io.tlSlaveTransmitter.bits.d_source <= io.tlMasterReceiver.bits.a_source @[TilelinkDevice.scala 66:49]
          io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 67:47]
          io.tlSlaveTransmitter.bits.d_denied <= io.rspIn.bits.error @[TilelinkDevice.scala 68:49]
          io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 69:50]
          io.tlSlaveTransmitter.valid <= io.rspIn.valid @[TilelinkDevice.scala 70:41]
          stateReg <= UInt<1>("h00") @[TilelinkDevice.scala 72:22]
          skip @[TilelinkDevice.scala 60:29]
        skip @[TilelinkDevice.scala 56:43]
    
  module TilelinkAdapter : 
    input clock : Clock
    input reset : Reset
    output io : {flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    inst tlHost of TilelinkHost @[Adapter.scala 54:24]
    tlHost.clock <= clock
    tlHost.reset <= reset
    inst tlSlave of TilelinkDevice @[Adapter.scala 55:25]
    tlSlave.clock <= clock
    tlSlave.reset <= reset
    tlSlave.io.tlMasterReceiver.bits.a_data <= tlHost.io.tlMasterTransmitter.bits.a_data @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_corrupt <= tlHost.io.tlMasterTransmitter.bits.a_corrupt @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_mask <= tlHost.io.tlMasterTransmitter.bits.a_mask @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_address <= tlHost.io.tlMasterTransmitter.bits.a_address @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_source <= tlHost.io.tlMasterTransmitter.bits.a_source @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_size <= tlHost.io.tlMasterTransmitter.bits.a_size @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_param <= tlHost.io.tlMasterTransmitter.bits.a_param @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_opcode <= tlHost.io.tlMasterTransmitter.bits.a_opcode @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.valid <= tlHost.io.tlMasterTransmitter.valid @[Adapter.scala 58:35]
    tlHost.io.tlMasterTransmitter.ready <= tlSlave.io.tlMasterReceiver.ready @[Adapter.scala 58:35]
    tlHost.io.tlSlaveReceiver.bits.d_data <= tlSlave.io.tlSlaveTransmitter.bits.d_data @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_corrupt <= tlSlave.io.tlSlaveTransmitter.bits.d_corrupt @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_denied <= tlSlave.io.tlSlaveTransmitter.bits.d_denied @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_sink <= tlSlave.io.tlSlaveTransmitter.bits.d_sink @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_source <= tlSlave.io.tlSlaveTransmitter.bits.d_source @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_size <= tlSlave.io.tlSlaveTransmitter.bits.d_size @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_param <= tlSlave.io.tlSlaveTransmitter.bits.d_param @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_opcode <= tlSlave.io.tlSlaveTransmitter.bits.d_opcode @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.valid <= tlSlave.io.tlSlaveTransmitter.valid @[Adapter.scala 61:35]
    tlSlave.io.tlSlaveTransmitter.ready <= tlHost.io.tlSlaveReceiver.ready @[Adapter.scala 61:35]
    tlHost.io.reqIn.bits.isWrite <= io.reqIn.bits.isWrite @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.activeByteLane <= io.reqIn.bits.activeByteLane @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.dataRequest <= io.reqIn.bits.dataRequest @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.addrRequest <= io.reqIn.bits.addrRequest @[Adapter.scala 64:21]
    tlHost.io.reqIn.valid <= io.reqIn.valid @[Adapter.scala 64:21]
    io.reqIn.ready <= tlHost.io.reqIn.ready @[Adapter.scala 64:21]
    io.rspOut.bits.error <= tlHost.io.rspOut.bits.error @[Adapter.scala 67:15]
    io.rspOut.bits.dataResponse <= tlHost.io.rspOut.bits.dataResponse @[Adapter.scala 67:15]
    io.rspOut.valid <= tlHost.io.rspOut.valid @[Adapter.scala 67:15]
    tlHost.io.rspOut.ready <= io.rspOut.ready @[Adapter.scala 67:15]
    io.reqOut.bits.isWrite <= tlSlave.io.reqOut.bits.isWrite @[Adapter.scala 70:15]
    io.reqOut.bits.activeByteLane <= tlSlave.io.reqOut.bits.activeByteLane @[Adapter.scala 70:15]
    io.reqOut.bits.dataRequest <= tlSlave.io.reqOut.bits.dataRequest @[Adapter.scala 70:15]
    io.reqOut.bits.addrRequest <= tlSlave.io.reqOut.bits.addrRequest @[Adapter.scala 70:15]
    io.reqOut.valid <= tlSlave.io.reqOut.valid @[Adapter.scala 70:15]
    tlSlave.io.reqOut.ready <= io.reqOut.ready @[Adapter.scala 70:15]
    tlSlave.io.rspIn.bits.error <= io.rspIn.bits.error @[Adapter.scala 73:22]
    tlSlave.io.rspIn.bits.dataResponse <= io.rspIn.bits.dataResponse @[Adapter.scala 73:22]
    tlSlave.io.rspIn.valid <= io.rspIn.valid @[Adapter.scala 73:22]
    io.rspIn.ready <= tlSlave.io.rspIn.ready @[Adapter.scala 73:22]
    
  module TilelinkHost_1 : 
    input clock : Clock
    input reset : Reset
    output io : {tlMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<32>, a_corrupt : UInt<1>, a_data : UInt<256>}}, flip tlSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<256>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 19:27]
    reg addrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 20:27]
    io.tlSlaveReceiver.ready <= UInt<1>("h00") @[TilelinkHost.scala 32:33]
    io.reqIn.ready <= UInt<1>("h01") @[TilelinkHost.scala 33:33]
    io.tlMasterTransmitter.bits.a_opcode <= UInt<1>("h00") @[TilelinkHost.scala 40:45]
    io.tlMasterTransmitter.bits.a_data <= UInt<1>("h00") @[TilelinkHost.scala 41:45]
    io.tlMasterTransmitter.bits.a_address <= addrReg @[TilelinkHost.scala 42:45]
    io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 43:45]
    io.tlMasterTransmitter.bits.a_source <= UInt<1>("h00") @[TilelinkHost.scala 44:45]
    io.tlMasterTransmitter.bits.a_size <= UInt<1>("h00") @[TilelinkHost.scala 45:45]
    io.tlMasterTransmitter.bits.a_mask <= UInt<1>("h00") @[TilelinkHost.scala 46:45]
    io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 47:45]
    io.tlMasterTransmitter.valid <= UInt<1>("h00") @[TilelinkHost.scala 48:45]
    io.rspOut.bits.dataResponse <= UInt<1>("h00") @[TilelinkHost.scala 50:45]
    io.rspOut.bits.error <= UInt<1>("h00") @[TilelinkHost.scala 51:45]
    io.rspOut.valid <= UInt<1>("h00") @[TilelinkHost.scala 53:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkHost.scala 56:19]
    when _T : @[TilelinkHost.scala 56:28]
      when io.reqIn.valid : @[TilelinkHost.scala 60:29]
        node _io_tlMasterTransmitter_bits_a_opcode_T = eq(io.reqIn.bits.activeByteLane, UInt<4>("h0f")) @[TilelinkHost.scala 62:116]
        node _io_tlMasterTransmitter_bits_a_opcode_T_1 = mux(_io_tlMasterTransmitter_bits_a_opcode_T, UInt<1>("h00"), UInt<1>("h01")) @[TilelinkHost.scala 62:86]
        node _io_tlMasterTransmitter_bits_a_opcode_T_2 = mux(io.reqIn.bits.isWrite, _io_tlMasterTransmitter_bits_a_opcode_T_1, UInt<3>("h04")) @[TilelinkHost.scala 62:59]
        io.tlMasterTransmitter.bits.a_opcode <= _io_tlMasterTransmitter_bits_a_opcode_T_2 @[TilelinkHost.scala 62:53]
        io.tlMasterTransmitter.bits.a_data <= io.reqIn.bits.dataRequest @[TilelinkHost.scala 63:53]
        io.tlMasterTransmitter.bits.a_address <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 64:53]
        io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 65:53]
        io.tlMasterTransmitter.bits.a_source <= UInt<2>("h02") @[TilelinkHost.scala 66:53]
        node _io_tlMasterTransmitter_bits_a_size_T = eq(UInt<1>("h01"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_1 = mux(_io_tlMasterTransmitter_bits_a_size_T, UInt<1>("h00"), UInt<2>("h02")) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_2 = eq(UInt<2>("h02"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_3 = mux(_io_tlMasterTransmitter_bits_a_size_T_2, UInt<1>("h01"), _io_tlMasterTransmitter_bits_a_size_T_1) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_4 = eq(UInt<3>("h04"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_5 = mux(_io_tlMasterTransmitter_bits_a_size_T_4, UInt<2>("h02"), _io_tlMasterTransmitter_bits_a_size_T_3) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_6 = eq(UInt<4>("h08"), UInt<6>("h020")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_7 = mux(_io_tlMasterTransmitter_bits_a_size_T_6, UInt<2>("h03"), _io_tlMasterTransmitter_bits_a_size_T_5) @[Mux.scala 80:57]
        io.tlMasterTransmitter.bits.a_size <= _io_tlMasterTransmitter_bits_a_size_T_7 @[TilelinkHost.scala 67:53]
        io.tlMasterTransmitter.bits.a_mask <= io.reqIn.bits.activeByteLane @[TilelinkHost.scala 73:53]
        io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 74:53]
        io.tlMasterTransmitter.valid <= io.reqIn.valid @[TilelinkHost.scala 75:53]
        stateReg <= UInt<1>("h01") @[TilelinkHost.scala 77:22]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 78:38]
        addrReg <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 79:21]
        skip @[TilelinkHost.scala 60:29]
      skip @[TilelinkHost.scala 56:28]
    else : @[TilelinkHost.scala 84:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkHost.scala 84:25]
      when _T_1 : @[TilelinkHost.scala 84:43]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 86:34]
        io.reqIn.ready <= UInt<1>("h00") @[TilelinkHost.scala 87:34]
        when io.tlSlaveReceiver.valid : @[TilelinkHost.scala 89:39]
          io.rspOut.bits.dataResponse <= io.tlSlaveReceiver.bits.d_data @[TilelinkHost.scala 91:41]
          io.rspOut.bits.error <= io.tlSlaveReceiver.bits.d_denied @[TilelinkHost.scala 92:34]
          io.rspOut.valid <= io.tlSlaveReceiver.valid @[TilelinkHost.scala 94:29]
          stateReg <= UInt<1>("h00") @[TilelinkHost.scala 95:22]
          skip @[TilelinkHost.scala 89:39]
        skip @[TilelinkHost.scala 84:43]
    
  module TilelinkDevice_1 : 
    input clock : Clock
    input reset : Reset
    output io : {tlSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<256>}}, flip tlMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<32>, a_corrupt : UInt<1>, a_data : UInt<256>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkDevice.scala 17:27]
    io.tlMasterReceiver.ready <= UInt<1>("h01") @[TilelinkDevice.scala 19:31]
    io.rspIn.ready <= UInt<1>("h00") @[TilelinkDevice.scala 20:20]
    io.reqOut.bits.addrRequest <= UInt<1>("h00") @[TilelinkDevice.scala 23:37]
    io.reqOut.bits.dataRequest <= UInt<1>("h00") @[TilelinkDevice.scala 24:37]
    io.reqOut.bits.activeByteLane <= UInt<1>("h00") @[TilelinkDevice.scala 25:37]
    io.reqOut.bits.isWrite <= UInt<1>("h00") @[TilelinkDevice.scala 26:37]
    io.reqOut.valid <= UInt<1>("h00") @[TilelinkDevice.scala 27:37]
    io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h00") @[TilelinkDevice.scala 29:45]
    io.tlSlaveTransmitter.bits.d_data <= UInt<1>("h00") @[TilelinkDevice.scala 30:45]
    io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 31:45]
    io.tlSlaveTransmitter.bits.d_size <= UInt<1>("h00") @[TilelinkDevice.scala 32:45]
    io.tlSlaveTransmitter.bits.d_source <= UInt<1>("h00") @[TilelinkDevice.scala 33:45]
    io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 34:45]
    io.tlSlaveTransmitter.bits.d_denied <= UInt<1>("h00") @[TilelinkDevice.scala 35:45]
    io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 36:45]
    io.tlSlaveTransmitter.valid <= UInt<1>("h00") @[TilelinkDevice.scala 37:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkDevice.scala 41:19]
    when _T : @[TilelinkDevice.scala 41:28]
      when io.tlMasterReceiver.valid : @[TilelinkDevice.scala 43:40]
        io.reqOut.bits.addrRequest <= io.tlMasterReceiver.bits.a_address @[TilelinkDevice.scala 45:40]
        io.reqOut.bits.dataRequest <= io.tlMasterReceiver.bits.a_data @[TilelinkDevice.scala 46:40]
        io.reqOut.bits.activeByteLane <= io.tlMasterReceiver.bits.a_mask @[TilelinkDevice.scala 47:43]
        node _io_reqOut_bits_isWrite_T = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h00")) @[TilelinkDevice.scala 48:73]
        node _io_reqOut_bits_isWrite_T_1 = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h01")) @[TilelinkDevice.scala 48:128]
        node _io_reqOut_bits_isWrite_T_2 = or(_io_reqOut_bits_isWrite_T, _io_reqOut_bits_isWrite_T_1) @[TilelinkDevice.scala 48:91]
        io.reqOut.bits.isWrite <= _io_reqOut_bits_isWrite_T_2 @[TilelinkDevice.scala 48:36]
        io.reqOut.valid <= UInt<1>("h01") @[TilelinkDevice.scala 49:29]
        stateReg <= UInt<1>("h01") @[TilelinkDevice.scala 51:22]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 52:28]
        skip @[TilelinkDevice.scala 43:40]
      skip @[TilelinkDevice.scala 41:28]
    else : @[TilelinkDevice.scala 56:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkDevice.scala 56:25]
      when _T_1 : @[TilelinkDevice.scala 56:43]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 58:24]
        when io.rspIn.valid : @[TilelinkDevice.scala 60:29]
          io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h01") @[TilelinkDevice.scala 62:49]
          io.tlSlaveTransmitter.bits.d_data <= io.rspIn.bits.dataResponse @[TilelinkDevice.scala 63:47]
          io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 64:48]
          io.tlSlaveTransmitter.bits.d_size <= io.tlMasterReceiver.bits.a_size @[TilelinkDevice.scala 65:47]
          io.tlSlaveTransmitter.bits.d_source <= io.tlMasterReceiver.bits.a_source @[TilelinkDevice.scala 66:49]
          io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 67:47]
          io.tlSlaveTransmitter.bits.d_denied <= io.rspIn.bits.error @[TilelinkDevice.scala 68:49]
          io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 69:50]
          io.tlSlaveTransmitter.valid <= io.rspIn.valid @[TilelinkDevice.scala 70:41]
          stateReg <= UInt<1>("h00") @[TilelinkDevice.scala 72:22]
          skip @[TilelinkDevice.scala 60:29]
        skip @[TilelinkDevice.scala 56:43]
    
  module TilelinkAdapter_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    inst tlHost of TilelinkHost_1 @[Adapter.scala 54:24]
    tlHost.clock <= clock
    tlHost.reset <= reset
    inst tlSlave of TilelinkDevice_1 @[Adapter.scala 55:25]
    tlSlave.clock <= clock
    tlSlave.reset <= reset
    tlSlave.io.tlMasterReceiver.bits.a_data <= tlHost.io.tlMasterTransmitter.bits.a_data @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_corrupt <= tlHost.io.tlMasterTransmitter.bits.a_corrupt @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_mask <= tlHost.io.tlMasterTransmitter.bits.a_mask @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_address <= tlHost.io.tlMasterTransmitter.bits.a_address @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_source <= tlHost.io.tlMasterTransmitter.bits.a_source @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_size <= tlHost.io.tlMasterTransmitter.bits.a_size @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_param <= tlHost.io.tlMasterTransmitter.bits.a_param @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.bits.a_opcode <= tlHost.io.tlMasterTransmitter.bits.a_opcode @[Adapter.scala 58:35]
    tlSlave.io.tlMasterReceiver.valid <= tlHost.io.tlMasterTransmitter.valid @[Adapter.scala 58:35]
    tlHost.io.tlMasterTransmitter.ready <= tlSlave.io.tlMasterReceiver.ready @[Adapter.scala 58:35]
    tlHost.io.tlSlaveReceiver.bits.d_data <= tlSlave.io.tlSlaveTransmitter.bits.d_data @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_corrupt <= tlSlave.io.tlSlaveTransmitter.bits.d_corrupt @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_denied <= tlSlave.io.tlSlaveTransmitter.bits.d_denied @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_sink <= tlSlave.io.tlSlaveTransmitter.bits.d_sink @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_source <= tlSlave.io.tlSlaveTransmitter.bits.d_source @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_size <= tlSlave.io.tlSlaveTransmitter.bits.d_size @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_param <= tlSlave.io.tlSlaveTransmitter.bits.d_param @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.bits.d_opcode <= tlSlave.io.tlSlaveTransmitter.bits.d_opcode @[Adapter.scala 61:35]
    tlHost.io.tlSlaveReceiver.valid <= tlSlave.io.tlSlaveTransmitter.valid @[Adapter.scala 61:35]
    tlSlave.io.tlSlaveTransmitter.ready <= tlHost.io.tlSlaveReceiver.ready @[Adapter.scala 61:35]
    tlHost.io.reqIn.bits.isWrite <= io.reqIn.bits.isWrite @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.activeByteLane <= io.reqIn.bits.activeByteLane @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.dataRequest <= io.reqIn.bits.dataRequest @[Adapter.scala 64:21]
    tlHost.io.reqIn.bits.addrRequest <= io.reqIn.bits.addrRequest @[Adapter.scala 64:21]
    tlHost.io.reqIn.valid <= io.reqIn.valid @[Adapter.scala 64:21]
    io.reqIn.ready <= tlHost.io.reqIn.ready @[Adapter.scala 64:21]
    io.rspOut.bits.error <= tlHost.io.rspOut.bits.error @[Adapter.scala 67:15]
    io.rspOut.bits.dataResponse <= tlHost.io.rspOut.bits.dataResponse @[Adapter.scala 67:15]
    io.rspOut.valid <= tlHost.io.rspOut.valid @[Adapter.scala 67:15]
    tlHost.io.rspOut.ready <= io.rspOut.ready @[Adapter.scala 67:15]
    io.reqOut.bits.isWrite <= tlSlave.io.reqOut.bits.isWrite @[Adapter.scala 70:15]
    io.reqOut.bits.activeByteLane <= tlSlave.io.reqOut.bits.activeByteLane @[Adapter.scala 70:15]
    io.reqOut.bits.dataRequest <= tlSlave.io.reqOut.bits.dataRequest @[Adapter.scala 70:15]
    io.reqOut.bits.addrRequest <= tlSlave.io.reqOut.bits.addrRequest @[Adapter.scala 70:15]
    io.reqOut.valid <= tlSlave.io.reqOut.valid @[Adapter.scala 70:15]
    tlSlave.io.reqOut.ready <= io.reqOut.ready @[Adapter.scala 70:15]
    tlSlave.io.rspIn.bits.error <= io.rspIn.bits.error @[Adapter.scala 73:22]
    tlSlave.io.rspIn.bits.dataResponse <= io.rspIn.bits.dataResponse @[Adapter.scala 73:22]
    tlSlave.io.rspIn.valid <= io.rspIn.valid @[Adapter.scala 73:22]
    io.rspIn.ready <= tlSlave.io.rspIn.ready @[Adapter.scala 73:22]
    
  module BlockRamWithoutMasking : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    wire addrMisaligned : UInt<1> @[BlockRam.scala 67:28]
    wire addrOutOfBounds : UInt<1> @[BlockRam.scala 68:29]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 72:25]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 73:23]
    io.rsp.valid <= validReg @[BlockRam.scala 74:16]
    io.rsp.bits.error <= errReg @[BlockRam.scala 75:21]
    io.req.ready <= UInt<1>("h01") @[BlockRam.scala 76:16]
    node _addrMisaligned_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _addrMisaligned_T_1 = bits(io.req.bits.addrRequest, 1, 0) @[BlockRam.scala 78:63]
    node _addrMisaligned_T_2 = orr(_addrMisaligned_T_1) @[BlockRam.scala 78:72]
    node _addrMisaligned_T_3 = mux(_addrMisaligned_T, _addrMisaligned_T_2, UInt<1>("h00")) @[BlockRam.scala 78:24]
    addrMisaligned <= _addrMisaligned_T_3 @[BlockRam.scala 78:18]
    node _addrOutOfBounds_T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _addrOutOfBounds_T_1 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 79:65]
    node _addrOutOfBounds_T_2 = geq(_addrOutOfBounds_T_1, UInt<13>("h01fff")) @[BlockRam.scala 79:71]
    node _addrOutOfBounds_T_3 = mux(_addrOutOfBounds_T, _addrOutOfBounds_T_2, UInt<1>("h00")) @[BlockRam.scala 79:25]
    addrOutOfBounds <= _addrOutOfBounds_T_3 @[BlockRam.scala 79:19]
    node _errReg_T = or(addrMisaligned, addrOutOfBounds) @[BlockRam.scala 81:28]
    errReg <= _errReg_T @[BlockRam.scala 81:10]
    smem mem : UInt<32>[8192], undefined @[BlockRam.scala 82:24]
    node _T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[BlockRam.scala 88:25]
    node _T_2 = and(_T, _T_1) @[BlockRam.scala 88:22]
    when _T_2 : @[BlockRam.scala 88:47]
      node _io_rsp_bits_dataResponse_T = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 90:65]
      node _io_rsp_bits_dataResponse_T_1 = bits(_io_rsp_bits_dataResponse_T, 12, 0) @[BlockRam.scala 90:41]
      read mport io_rsp_bits_dataResponse_MPORT = mem[_io_rsp_bits_dataResponse_T_1], clock @[BlockRam.scala 90:41]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_MPORT @[BlockRam.scala 90:30]
      validReg <= UInt<1>("h01") @[BlockRam.scala 91:14]
      skip @[BlockRam.scala 88:47]
    else : @[BlockRam.scala 92:53]
      node _T_3 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
      node _T_4 = and(_T_3, io.req.bits.isWrite) @[BlockRam.scala 92:29]
      when _T_4 : @[BlockRam.scala 92:53]
        node _T_5 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 94:38]
        node _T_6 = bits(_T_5, 12, 0)
        write mport MPORT = mem[_T_6], clock
        MPORT <= io.req.bits.dataRequest
        validReg <= UInt<1>("h01") @[BlockRam.scala 95:14]
        io.rsp.bits.dataResponse is invalid @[BlockRam.scala 96:30]
        skip @[BlockRam.scala 92:53]
      else : @[BlockRam.scala 97:16]
        validReg <= UInt<1>("h00") @[BlockRam.scala 98:14]
        io.rsp.bits.dataResponse is invalid @[BlockRam.scala 99:30]
        skip @[BlockRam.scala 97:16]
    
  module BlockRamWithMasking : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<256>, activeByteLane : UInt<32>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<256>, error : UInt<1>}}}
    
    wire wdata : UInt<8>[4] @[BlockRam.scala 113:19]
    wire rdata : UInt<8>[4] @[BlockRam.scala 115:19]
    wire mask : UInt<1>[4] @[BlockRam.scala 117:18]
    wire data : UInt<8>[4] @[BlockRam.scala 119:18]
    node _wdata_0_T = bits(io.req.bits.dataRequest, 7, 0) @[BlockRam.scala 121:38]
    wdata[0] <= _wdata_0_T @[BlockRam.scala 121:12]
    node _wdata_1_T = bits(io.req.bits.dataRequest, 15, 8) @[BlockRam.scala 122:38]
    wdata[1] <= _wdata_1_T @[BlockRam.scala 122:12]
    node _wdata_2_T = bits(io.req.bits.dataRequest, 23, 16) @[BlockRam.scala 123:38]
    wdata[2] <= _wdata_2_T @[BlockRam.scala 123:12]
    node _wdata_3_T = bits(io.req.bits.dataRequest, 31, 24) @[BlockRam.scala 124:38]
    wdata[3] <= _wdata_3_T @[BlockRam.scala 124:12]
    node byteLane_0 = bits(io.req.bits.activeByteLane, 0, 0) @[BlockRam.scala 128:52]
    node byteLane_1 = bits(io.req.bits.activeByteLane, 1, 1) @[BlockRam.scala 128:52]
    node byteLane_2 = bits(io.req.bits.activeByteLane, 2, 2) @[BlockRam.scala 128:52]
    node byteLane_3 = bits(io.req.bits.activeByteLane, 3, 3) @[BlockRam.scala 128:52]
    node byteLane_4 = bits(io.req.bits.activeByteLane, 4, 4) @[BlockRam.scala 128:52]
    node byteLane_5 = bits(io.req.bits.activeByteLane, 5, 5) @[BlockRam.scala 128:52]
    node byteLane_6 = bits(io.req.bits.activeByteLane, 6, 6) @[BlockRam.scala 128:52]
    node byteLane_7 = bits(io.req.bits.activeByteLane, 7, 7) @[BlockRam.scala 128:52]
    node byteLane_8 = bits(io.req.bits.activeByteLane, 8, 8) @[BlockRam.scala 128:52]
    node byteLane_9 = bits(io.req.bits.activeByteLane, 9, 9) @[BlockRam.scala 128:52]
    node byteLane_10 = bits(io.req.bits.activeByteLane, 10, 10) @[BlockRam.scala 128:52]
    node byteLane_11 = bits(io.req.bits.activeByteLane, 11, 11) @[BlockRam.scala 128:52]
    node byteLane_12 = bits(io.req.bits.activeByteLane, 12, 12) @[BlockRam.scala 128:52]
    node byteLane_13 = bits(io.req.bits.activeByteLane, 13, 13) @[BlockRam.scala 128:52]
    node byteLane_14 = bits(io.req.bits.activeByteLane, 14, 14) @[BlockRam.scala 128:52]
    node byteLane_15 = bits(io.req.bits.activeByteLane, 15, 15) @[BlockRam.scala 128:52]
    node byteLane_16 = bits(io.req.bits.activeByteLane, 16, 16) @[BlockRam.scala 128:52]
    node byteLane_17 = bits(io.req.bits.activeByteLane, 17, 17) @[BlockRam.scala 128:52]
    node byteLane_18 = bits(io.req.bits.activeByteLane, 18, 18) @[BlockRam.scala 128:52]
    node byteLane_19 = bits(io.req.bits.activeByteLane, 19, 19) @[BlockRam.scala 128:52]
    node byteLane_20 = bits(io.req.bits.activeByteLane, 20, 20) @[BlockRam.scala 128:52]
    node byteLane_21 = bits(io.req.bits.activeByteLane, 21, 21) @[BlockRam.scala 128:52]
    node byteLane_22 = bits(io.req.bits.activeByteLane, 22, 22) @[BlockRam.scala 128:52]
    node byteLane_23 = bits(io.req.bits.activeByteLane, 23, 23) @[BlockRam.scala 128:52]
    node byteLane_24 = bits(io.req.bits.activeByteLane, 24, 24) @[BlockRam.scala 128:52]
    node byteLane_25 = bits(io.req.bits.activeByteLane, 25, 25) @[BlockRam.scala 128:52]
    node byteLane_26 = bits(io.req.bits.activeByteLane, 26, 26) @[BlockRam.scala 128:52]
    node byteLane_27 = bits(io.req.bits.activeByteLane, 27, 27) @[BlockRam.scala 128:52]
    node byteLane_28 = bits(io.req.bits.activeByteLane, 28, 28) @[BlockRam.scala 128:52]
    node byteLane_29 = bits(io.req.bits.activeByteLane, 29, 29) @[BlockRam.scala 128:52]
    node byteLane_30 = bits(io.req.bits.activeByteLane, 30, 30) @[BlockRam.scala 128:52]
    node byteLane_31 = bits(io.req.bits.activeByteLane, 31, 31) @[BlockRam.scala 128:52]
    mask[0] <= byteLane_0 @[BlockRam.scala 130:7]
    mask[1] <= byteLane_1 @[BlockRam.scala 130:7]
    mask[2] <= byteLane_2 @[BlockRam.scala 130:7]
    mask[3] <= byteLane_3 @[BlockRam.scala 130:7]
    reg validReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[BlockRam.scala 136:25]
    io.rsp.valid <= validReg @[BlockRam.scala 137:16]
    io.rsp.bits.error <= UInt<1>("h00") @[BlockRam.scala 138:21]
    io.req.ready <= UInt<1>("h01") @[BlockRam.scala 139:16]
    smem mem : UInt<8>[4][1024], undefined @[BlockRam.scala 141:24]
    node _T = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
    node _T_1 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[BlockRam.scala 143:25]
    node _T_2 = and(_T, _T_1) @[BlockRam.scala 143:22]
    when _T_2 : @[BlockRam.scala 143:47]
      node _T_3 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 145:46]
      node _T_4 = bits(_T_3, 9, 0) @[BlockRam.scala 145:22]
      read mport MPORT = mem[_T_4], clock @[BlockRam.scala 145:22]
      rdata[0] <= MPORT[0] @[BlockRam.scala 145:11]
      rdata[1] <= MPORT[1] @[BlockRam.scala 145:11]
      rdata[2] <= MPORT[2] @[BlockRam.scala 145:11]
      rdata[3] <= MPORT[3] @[BlockRam.scala 145:11]
      validReg <= UInt<1>("h01") @[BlockRam.scala 146:14]
      skip @[BlockRam.scala 143:47]
    else : @[BlockRam.scala 147:53]
      node _T_5 = and(io.req.ready, io.req.valid) @[Decoupled.scala 40:37]
      node _T_6 = and(_T_5, io.req.bits.isWrite) @[BlockRam.scala 147:29]
      when _T_6 : @[BlockRam.scala 147:53]
        node _T_7 = div(io.req.bits.addrRequest, UInt<3>("h04")) @[BlockRam.scala 149:38]
        node _T_8 = bits(_T_7, 9, 0)
        write mport MPORT_1 = mem[_T_8], clock
        when mask[0] :
          MPORT_1[0] <= wdata[0]
          skip
        when mask[1] :
          MPORT_1[1] <= wdata[1]
          skip
        when mask[2] :
          MPORT_1[2] <= wdata[2]
          skip
        when mask[3] :
          MPORT_1[3] <= wdata[3]
          skip
        validReg <= UInt<1>("h01") @[BlockRam.scala 150:14]
        rdata[0] is invalid @[BlockRam.scala 151:18]
        rdata[1] is invalid @[BlockRam.scala 151:18]
        rdata[2] is invalid @[BlockRam.scala 151:18]
        rdata[3] is invalid @[BlockRam.scala 151:18]
        skip @[BlockRam.scala 147:53]
      else : @[BlockRam.scala 152:16]
        validReg <= UInt<1>("h00") @[BlockRam.scala 153:14]
        rdata[0] is invalid @[BlockRam.scala 154:18]
        rdata[1] is invalid @[BlockRam.scala 154:18]
        rdata[2] is invalid @[BlockRam.scala 154:18]
        rdata[3] is invalid @[BlockRam.scala 154:18]
        skip @[BlockRam.scala 152:16]
    node _T_9 = eq(mask[0], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_10 = mux(_T_9, rdata[0], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_11 = eq(mask[1], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_12 = mux(_T_11, rdata[1], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_13 = eq(mask[2], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_14 = mux(_T_13, rdata[2], UInt<1>("h00")) @[BlockRam.scala 160:8]
    node _T_15 = eq(mask[3], UInt<1>("h01")) @[BlockRam.scala 160:11]
    node _T_16 = mux(_T_15, rdata[3], UInt<1>("h00")) @[BlockRam.scala 160:8]
    data[0] <= _T_10 @[BlockRam.scala 159:8]
    data[1] <= _T_12 @[BlockRam.scala 159:8]
    data[2] <= _T_14 @[BlockRam.scala 159:8]
    data[3] <= _T_16 @[BlockRam.scala 159:8]
    node io_rsp_bits_dataResponse_lo = cat(data[1], data[0]) @[Cat.scala 30:58]
    node io_rsp_bits_dataResponse_hi = cat(data[3], data[2]) @[Cat.scala 30:58]
    node _io_rsp_bits_dataResponse_T = cat(io_rsp_bits_dataResponse_hi, io_rsp_bits_dataResponse_lo) @[Cat.scala 30:58]
    io.rsp.bits.dataResponse <= _io_rsp_bits_dataResponse_T @[BlockRam.scala 163:28]
    
  module TopTL : 
    input clock : Clock
    input reset : UInt<1>
    output io : {pin : UInt<32>, rvfi : {valid : UInt<1>, order : UInt<64>, insn : UInt<32>, trap : UInt<1>, halt : UInt<1>, intr : UInt<1>, ixl : UInt<2>, mode : UInt<2>, rs1_addr : UInt<5>, rs1_rdata : SInt<32>, rs2_addr : UInt<5>, rs2_rdata : SInt<32>, rd_addr : UInt<5>, rd_wdata : SInt<32>, pc_rdata : UInt<32>, pc_wdata : UInt<32>}}
    
    inst core of Core @[Top.scala 60:25]
    core.clock <= clock
    core.reset <= reset
    inst imemAdapter of TilelinkAdapter @[Top.scala 61:26]
    imemAdapter.clock <= clock
    imemAdapter.reset <= reset
    inst dmemAdapter of TilelinkAdapter_1 @[Top.scala 62:26]
    dmemAdapter.clock <= clock
    dmemAdapter.reset <= reset
    inst imemCtrl of BlockRamWithoutMasking @[Top.scala 65:23]
    imemCtrl.clock <= clock
    imemCtrl.reset <= reset
    inst dmemCtrl of BlockRamWithMasking @[Top.scala 66:23]
    dmemCtrl.clock <= clock
    dmemCtrl.reset <= reset
    imemAdapter.io.reqIn.bits.isWrite <= core.io.imemReq.bits.isWrite @[Top.scala 69:23]
    imemAdapter.io.reqIn.bits.activeByteLane <= core.io.imemReq.bits.activeByteLane @[Top.scala 69:23]
    imemAdapter.io.reqIn.bits.dataRequest <= core.io.imemReq.bits.dataRequest @[Top.scala 69:23]
    imemAdapter.io.reqIn.bits.addrRequest <= core.io.imemReq.bits.addrRequest @[Top.scala 69:23]
    imemAdapter.io.reqIn.valid <= core.io.imemReq.valid @[Top.scala 69:23]
    core.io.imemReq.ready <= imemAdapter.io.reqIn.ready @[Top.scala 69:23]
    core.io.imemRsp.bits.error <= imemAdapter.io.rspOut.bits.error @[Top.scala 70:18]
    core.io.imemRsp.bits.dataResponse <= imemAdapter.io.rspOut.bits.dataResponse @[Top.scala 70:18]
    core.io.imemRsp.valid <= imemAdapter.io.rspOut.valid @[Top.scala 70:18]
    imemAdapter.io.rspOut.ready <= core.io.imemRsp.ready @[Top.scala 70:18]
    imemCtrl.io.req.bits.isWrite <= imemAdapter.io.reqOut.bits.isWrite @[Top.scala 71:18]
    imemCtrl.io.req.bits.activeByteLane <= imemAdapter.io.reqOut.bits.activeByteLane @[Top.scala 71:18]
    imemCtrl.io.req.bits.dataRequest <= imemAdapter.io.reqOut.bits.dataRequest @[Top.scala 71:18]
    imemCtrl.io.req.bits.addrRequest <= imemAdapter.io.reqOut.bits.addrRequest @[Top.scala 71:18]
    imemCtrl.io.req.valid <= imemAdapter.io.reqOut.valid @[Top.scala 71:18]
    imemAdapter.io.reqOut.ready <= imemCtrl.io.req.ready @[Top.scala 71:18]
    imemAdapter.io.rspIn.bits.error <= imemCtrl.io.rsp.bits.error @[Top.scala 72:23]
    imemAdapter.io.rspIn.bits.dataResponse <= imemCtrl.io.rsp.bits.dataResponse @[Top.scala 72:23]
    imemAdapter.io.rspIn.valid <= imemCtrl.io.rsp.valid @[Top.scala 72:23]
    imemCtrl.io.rsp.ready <= imemAdapter.io.rspIn.ready @[Top.scala 72:23]
    dmemAdapter.io.reqIn.bits.isWrite <= core.io.dmemReq.bits.isWrite @[Top.scala 75:23]
    dmemAdapter.io.reqIn.bits.activeByteLane <= core.io.dmemReq.bits.activeByteLane @[Top.scala 75:23]
    dmemAdapter.io.reqIn.bits.dataRequest <= core.io.dmemReq.bits.dataRequest @[Top.scala 75:23]
    dmemAdapter.io.reqIn.bits.addrRequest <= core.io.dmemReq.bits.addrRequest @[Top.scala 75:23]
    dmemAdapter.io.reqIn.valid <= core.io.dmemReq.valid @[Top.scala 75:23]
    core.io.dmemReq.ready <= dmemAdapter.io.reqIn.ready @[Top.scala 75:23]
    core.io.dmemRsp.bits.error <= dmemAdapter.io.rspOut.bits.error @[Top.scala 76:18]
    core.io.dmemRsp.bits.dataResponse <= dmemAdapter.io.rspOut.bits.dataResponse @[Top.scala 76:18]
    core.io.dmemRsp.valid <= dmemAdapter.io.rspOut.valid @[Top.scala 76:18]
    dmemAdapter.io.rspOut.ready <= core.io.dmemRsp.ready @[Top.scala 76:18]
    dmemCtrl.io.req.bits.isWrite <= dmemAdapter.io.reqOut.bits.isWrite @[Top.scala 77:18]
    dmemCtrl.io.req.bits.activeByteLane <= dmemAdapter.io.reqOut.bits.activeByteLane @[Top.scala 77:18]
    dmemCtrl.io.req.bits.dataRequest <= dmemAdapter.io.reqOut.bits.dataRequest @[Top.scala 77:18]
    dmemCtrl.io.req.bits.addrRequest <= dmemAdapter.io.reqOut.bits.addrRequest @[Top.scala 77:18]
    dmemCtrl.io.req.valid <= dmemAdapter.io.reqOut.valid @[Top.scala 77:18]
    dmemAdapter.io.reqOut.ready <= dmemCtrl.io.req.ready @[Top.scala 77:18]
    dmemAdapter.io.rspIn.bits.error <= dmemCtrl.io.rsp.bits.error @[Top.scala 78:23]
    dmemAdapter.io.rspIn.bits.dataResponse <= dmemCtrl.io.rsp.bits.dataResponse @[Top.scala 78:23]
    dmemAdapter.io.rspIn.valid <= dmemCtrl.io.rsp.valid @[Top.scala 78:23]
    dmemCtrl.io.rsp.ready <= dmemAdapter.io.rspIn.ready @[Top.scala 78:23]
    io.rvfi.pc_wdata <= core.io.rvfi.pc_wdata @[Top.scala 80:10]
    io.rvfi.pc_rdata <= core.io.rvfi.pc_rdata @[Top.scala 80:10]
    io.rvfi.rd_wdata <= core.io.rvfi.rd_wdata @[Top.scala 80:10]
    io.rvfi.rd_addr <= core.io.rvfi.rd_addr @[Top.scala 80:10]
    io.rvfi.rs2_rdata <= core.io.rvfi.rs2_rdata @[Top.scala 80:10]
    io.rvfi.rs2_addr <= core.io.rvfi.rs2_addr @[Top.scala 80:10]
    io.rvfi.rs1_rdata <= core.io.rvfi.rs1_rdata @[Top.scala 80:10]
    io.rvfi.rs1_addr <= core.io.rvfi.rs1_addr @[Top.scala 80:10]
    io.rvfi.mode <= core.io.rvfi.mode @[Top.scala 80:10]
    io.rvfi.ixl <= core.io.rvfi.ixl @[Top.scala 80:10]
    io.rvfi.intr <= core.io.rvfi.intr @[Top.scala 80:10]
    io.rvfi.halt <= core.io.rvfi.halt @[Top.scala 80:10]
    io.rvfi.trap <= core.io.rvfi.trap @[Top.scala 80:10]
    io.rvfi.insn <= core.io.rvfi.insn @[Top.scala 80:10]
    io.rvfi.order <= core.io.rvfi.order @[Top.scala 80:10]
    io.rvfi.valid <= core.io.rvfi.valid @[Top.scala 80:10]
    io.pin <= core.io.pin @[Top.scala 81:9]
    

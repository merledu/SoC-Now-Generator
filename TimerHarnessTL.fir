;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TimerHarnessTL : 
  module TilelinkHost : 
    input clock : Clock
    input reset : Reset
    output io : {tlMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<4>, a_corrupt : UInt<1>, a_data : UInt<32>}}, flip tlSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<32>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 19:27]
    reg addrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 20:27]
    io.tlSlaveReceiver.ready <= UInt<1>("h00") @[TilelinkHost.scala 32:33]
    io.reqIn.ready <= UInt<1>("h01") @[TilelinkHost.scala 33:33]
    io.tlMasterTransmitter.bits.a_opcode <= UInt<1>("h00") @[TilelinkHost.scala 40:45]
    io.tlMasterTransmitter.bits.a_data <= UInt<1>("h00") @[TilelinkHost.scala 41:45]
    io.tlMasterTransmitter.bits.a_address <= addrReg @[TilelinkHost.scala 42:45]
    io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 43:45]
    io.tlMasterTransmitter.bits.a_source <= UInt<1>("h00") @[TilelinkHost.scala 44:45]
    io.tlMasterTransmitter.bits.a_size <= UInt<1>("h00") @[TilelinkHost.scala 45:45]
    io.tlMasterTransmitter.bits.a_mask <= UInt<1>("h00") @[TilelinkHost.scala 46:45]
    io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 47:45]
    io.tlMasterTransmitter.valid <= UInt<1>("h00") @[TilelinkHost.scala 48:45]
    io.rspOut.bits.dataResponse <= UInt<1>("h00") @[TilelinkHost.scala 50:45]
    io.rspOut.bits.error <= UInt<1>("h00") @[TilelinkHost.scala 51:45]
    io.rspOut.valid <= UInt<1>("h00") @[TilelinkHost.scala 53:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkHost.scala 56:19]
    when _T : @[TilelinkHost.scala 56:28]
      when io.reqIn.valid : @[TilelinkHost.scala 60:29]
        node _io_tlMasterTransmitter_bits_a_opcode_T = eq(io.reqIn.bits.activeByteLane, UInt<4>("h0f")) @[TilelinkHost.scala 62:116]
        node _io_tlMasterTransmitter_bits_a_opcode_T_1 = mux(_io_tlMasterTransmitter_bits_a_opcode_T, UInt<1>("h00"), UInt<1>("h01")) @[TilelinkHost.scala 62:86]
        node _io_tlMasterTransmitter_bits_a_opcode_T_2 = mux(io.reqIn.bits.isWrite, _io_tlMasterTransmitter_bits_a_opcode_T_1, UInt<3>("h04")) @[TilelinkHost.scala 62:59]
        io.tlMasterTransmitter.bits.a_opcode <= _io_tlMasterTransmitter_bits_a_opcode_T_2 @[TilelinkHost.scala 62:53]
        io.tlMasterTransmitter.bits.a_data <= io.reqIn.bits.dataRequest @[TilelinkHost.scala 63:53]
        io.tlMasterTransmitter.bits.a_address <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 64:53]
        io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 65:53]
        io.tlMasterTransmitter.bits.a_source <= UInt<2>("h02") @[TilelinkHost.scala 66:53]
        node _io_tlMasterTransmitter_bits_a_size_T = eq(UInt<1>("h01"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_1 = mux(_io_tlMasterTransmitter_bits_a_size_T, UInt<1>("h00"), UInt<2>("h02")) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_2 = eq(UInt<2>("h02"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_3 = mux(_io_tlMasterTransmitter_bits_a_size_T_2, UInt<1>("h01"), _io_tlMasterTransmitter_bits_a_size_T_1) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_4 = eq(UInt<3>("h04"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_5 = mux(_io_tlMasterTransmitter_bits_a_size_T_4, UInt<2>("h02"), _io_tlMasterTransmitter_bits_a_size_T_3) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_6 = eq(UInt<4>("h08"), UInt<3>("h04")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_7 = mux(_io_tlMasterTransmitter_bits_a_size_T_6, UInt<2>("h03"), _io_tlMasterTransmitter_bits_a_size_T_5) @[Mux.scala 80:57]
        io.tlMasterTransmitter.bits.a_size <= _io_tlMasterTransmitter_bits_a_size_T_7 @[TilelinkHost.scala 67:53]
        io.tlMasterTransmitter.bits.a_mask <= io.reqIn.bits.activeByteLane @[TilelinkHost.scala 73:53]
        io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 74:53]
        io.tlMasterTransmitter.valid <= io.reqIn.valid @[TilelinkHost.scala 75:53]
        stateReg <= UInt<1>("h01") @[TilelinkHost.scala 77:22]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 78:38]
        addrReg <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 79:21]
        skip @[TilelinkHost.scala 60:29]
      skip @[TilelinkHost.scala 56:28]
    else : @[TilelinkHost.scala 84:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkHost.scala 84:25]
      when _T_1 : @[TilelinkHost.scala 84:43]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 86:34]
        io.reqIn.ready <= UInt<1>("h00") @[TilelinkHost.scala 87:34]
        when io.tlSlaveReceiver.valid : @[TilelinkHost.scala 89:39]
          io.rspOut.bits.dataResponse <= io.tlSlaveReceiver.bits.d_data @[TilelinkHost.scala 91:41]
          io.rspOut.bits.error <= io.tlSlaveReceiver.bits.d_denied @[TilelinkHost.scala 92:34]
          io.rspOut.valid <= io.tlSlaveReceiver.valid @[TilelinkHost.scala 94:29]
          stateReg <= UInt<1>("h00") @[TilelinkHost.scala 95:22]
          skip @[TilelinkHost.scala 89:39]
        skip @[TilelinkHost.scala 84:43]
    
  module TilelinkDevice : 
    input clock : Clock
    input reset : Reset
    output io : {tlSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<32>}}, flip tlMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<4>, a_corrupt : UInt<1>, a_data : UInt<32>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkDevice.scala 17:27]
    io.tlMasterReceiver.ready <= UInt<1>("h01") @[TilelinkDevice.scala 19:31]
    io.rspIn.ready <= UInt<1>("h00") @[TilelinkDevice.scala 20:20]
    io.reqOut.bits.addrRequest <= UInt<1>("h00") @[TilelinkDevice.scala 23:37]
    io.reqOut.bits.dataRequest <= UInt<1>("h00") @[TilelinkDevice.scala 24:37]
    io.reqOut.bits.activeByteLane <= UInt<1>("h00") @[TilelinkDevice.scala 25:37]
    io.reqOut.bits.isWrite <= UInt<1>("h00") @[TilelinkDevice.scala 26:37]
    io.reqOut.valid <= UInt<1>("h00") @[TilelinkDevice.scala 27:37]
    io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h00") @[TilelinkDevice.scala 29:45]
    io.tlSlaveTransmitter.bits.d_data <= UInt<1>("h00") @[TilelinkDevice.scala 30:45]
    io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 31:45]
    io.tlSlaveTransmitter.bits.d_size <= UInt<1>("h00") @[TilelinkDevice.scala 32:45]
    io.tlSlaveTransmitter.bits.d_source <= UInt<1>("h00") @[TilelinkDevice.scala 33:45]
    io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 34:45]
    io.tlSlaveTransmitter.bits.d_denied <= UInt<1>("h00") @[TilelinkDevice.scala 35:45]
    io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 36:45]
    io.tlSlaveTransmitter.valid <= UInt<1>("h00") @[TilelinkDevice.scala 37:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkDevice.scala 41:19]
    when _T : @[TilelinkDevice.scala 41:28]
      when io.tlMasterReceiver.valid : @[TilelinkDevice.scala 43:40]
        io.reqOut.bits.addrRequest <= io.tlMasterReceiver.bits.a_address @[TilelinkDevice.scala 45:40]
        io.reqOut.bits.dataRequest <= io.tlMasterReceiver.bits.a_data @[TilelinkDevice.scala 46:40]
        io.reqOut.bits.activeByteLane <= io.tlMasterReceiver.bits.a_mask @[TilelinkDevice.scala 47:43]
        node _io_reqOut_bits_isWrite_T = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h00")) @[TilelinkDevice.scala 48:73]
        node _io_reqOut_bits_isWrite_T_1 = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h01")) @[TilelinkDevice.scala 48:128]
        node _io_reqOut_bits_isWrite_T_2 = or(_io_reqOut_bits_isWrite_T, _io_reqOut_bits_isWrite_T_1) @[TilelinkDevice.scala 48:91]
        io.reqOut.bits.isWrite <= _io_reqOut_bits_isWrite_T_2 @[TilelinkDevice.scala 48:36]
        io.reqOut.valid <= UInt<1>("h01") @[TilelinkDevice.scala 49:29]
        stateReg <= UInt<1>("h01") @[TilelinkDevice.scala 51:22]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 52:28]
        skip @[TilelinkDevice.scala 43:40]
      skip @[TilelinkDevice.scala 41:28]
    else : @[TilelinkDevice.scala 56:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkDevice.scala 56:25]
      when _T_1 : @[TilelinkDevice.scala 56:43]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 58:24]
        when io.rspIn.valid : @[TilelinkDevice.scala 60:29]
          io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h01") @[TilelinkDevice.scala 62:49]
          io.tlSlaveTransmitter.bits.d_data <= io.rspIn.bits.dataResponse @[TilelinkDevice.scala 63:47]
          io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 64:48]
          io.tlSlaveTransmitter.bits.d_size <= io.tlMasterReceiver.bits.a_size @[TilelinkDevice.scala 65:47]
          io.tlSlaveTransmitter.bits.d_source <= io.tlMasterReceiver.bits.a_source @[TilelinkDevice.scala 66:49]
          io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 67:47]
          io.tlSlaveTransmitter.bits.d_denied <= io.rspIn.bits.error @[TilelinkDevice.scala 68:49]
          io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 69:50]
          io.tlSlaveTransmitter.valid <= io.rspIn.valid @[TilelinkDevice.scala 70:41]
          stateReg <= UInt<1>("h00") @[TilelinkDevice.scala 72:22]
          skip @[TilelinkDevice.scala 60:29]
        skip @[TilelinkDevice.scala 56:43]
    
  module Timer : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cio_timer_intr_cmp : UInt<1>, cio_timer_intr_ovf : UInt<1>}
    
    reg TimerReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 23:29]
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 24:29]
    reg CompareReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 25:29]
    reg PreCountReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 26:29]
    wire maskedData : UInt<8>[4] @[Timer.scala 28:26]
    wire _WIRE : UInt<1>[4] @[Timer.scala 29:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[Timer.scala 29:54]
    _WIRE[0] <= _T @[Timer.scala 29:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[Timer.scala 29:54]
    _WIRE[1] <= _T_1 @[Timer.scala 29:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[Timer.scala 29:54]
    _WIRE[2] <= _T_2 @[Timer.scala 29:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[Timer.scala 29:54]
    _WIRE[3] <= _T_3 @[Timer.scala 29:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[Timer.scala 29:16]
    maskedData[1] <= _T_7 @[Timer.scala 29:16]
    maskedData[2] <= _T_9 @[Timer.scala 29:16]
    maskedData[3] <= _T_11 @[Timer.scala 29:16]
    io.req.ready <= UInt<1>("h01") @[Timer.scala 31:18]
    io.rsp.valid <= UInt<1>("h00") @[Timer.scala 32:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 36:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Timer.scala 36:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 36:71]
    node _T_15 = and(_T_13, _T_14) @[Timer.scala 36:48]
    when _T_15 : @[Timer.scala 36:79]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, TimerReg, UInt<1>("h00")) @[Timer.scala 37:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[Timer.scala 37:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[Timer.scala 37:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[Timer.scala 37:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[Timer.scala 38:32]
      io_rsp_valid_REG <= io.req.valid @[Timer.scala 38:32]
      io.rsp.valid <= io_rsp_valid_REG @[Timer.scala 38:22]
      skip @[Timer.scala 36:79]
    else : @[Timer.scala 40:84]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 40:39]
      node _T_17 = eq(_T_16, UInt<3>("h04")) @[Timer.scala 40:45]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 40:76]
      node _T_19 = and(_T_17, _T_18) @[Timer.scala 40:53]
      when _T_19 : @[Timer.scala 40:84]
        node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 41:78]
        node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 41:78]
        node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[Timer.scala 41:78]
        node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[Timer.scala 41:65]
        node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[Timer.scala 41:26]
        ControlReg <= _ControlReg_T_2 @[Timer.scala 41:20]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 43:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[Timer.scala 43:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[Timer.scala 43:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[Timer.scala 43:34]
        reg io_rsp_valid_REG_1 : UInt<1>, clock @[Timer.scala 44:32]
        io_rsp_valid_REG_1 <= io.req.valid @[Timer.scala 44:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[Timer.scala 44:22]
        skip @[Timer.scala 40:84]
      else : @[Timer.scala 46:84]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 46:39]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[Timer.scala 46:45]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 46:76]
        node _T_23 = and(_T_21, _T_22) @[Timer.scala 46:53]
        when _T_23 : @[Timer.scala 46:84]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[Timer.scala 47:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[Timer.scala 47:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[Timer.scala 47:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[Timer.scala 47:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[Timer.scala 48:32]
          io_rsp_valid_REG_2 <= io.req.valid @[Timer.scala 48:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[Timer.scala 48:22]
          skip @[Timer.scala 46:84]
        else : @[Timer.scala 50:84]
          node _T_24 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 50:39]
          node _T_25 = eq(_T_24, UInt<4>("h08")) @[Timer.scala 50:45]
          node _T_26 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 50:76]
          node _T_27 = and(_T_25, _T_26) @[Timer.scala 50:53]
          when _T_27 : @[Timer.scala 50:84]
            node CompareReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 51:78]
            node CompareReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 51:78]
            node _CompareReg_T = cat(CompareReg_hi, CompareReg_lo) @[Timer.scala 51:78]
            node _CompareReg_T_1 = and(io.req.bits.dataRequest, _CompareReg_T) @[Timer.scala 51:65]
            node _CompareReg_T_2 = mux(io.req.valid, _CompareReg_T_1, CompareReg) @[Timer.scala 51:26]
            CompareReg <= _CompareReg_T_2 @[Timer.scala 51:20]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 53:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[Timer.scala 53:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[Timer.scala 53:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[Timer.scala 53:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[Timer.scala 54:32]
            io_rsp_valid_REG_3 <= io.req.valid @[Timer.scala 54:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[Timer.scala 54:22]
            skip @[Timer.scala 50:84]
          else : @[Timer.scala 56:84]
            node _T_28 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 56:39]
            node _T_29 = eq(_T_28, UInt<4>("h08")) @[Timer.scala 56:45]
            node _T_30 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 56:76]
            node _T_31 = and(_T_29, _T_30) @[Timer.scala 56:53]
            when _T_31 : @[Timer.scala 56:84]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, CompareReg, UInt<1>("h00")) @[Timer.scala 57:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[Timer.scala 57:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[Timer.scala 57:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[Timer.scala 57:34]
              reg io_rsp_valid_REG_4 : UInt<1>, clock @[Timer.scala 58:32]
              io_rsp_valid_REG_4 <= io.req.valid @[Timer.scala 58:32]
              io.rsp.valid <= io_rsp_valid_REG_4 @[Timer.scala 58:22]
              skip @[Timer.scala 56:84]
            else : @[Timer.scala 60:84]
              node _T_32 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 60:39]
              node _T_33 = eq(_T_32, UInt<4>("h08")) @[Timer.scala 60:45]
              node _T_34 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 60:76]
              node _T_35 = and(_T_33, _T_34) @[Timer.scala 60:53]
              when _T_35 : @[Timer.scala 60:84]
                node _io_rsp_bits_dataResponse_T_5 = mux(io.rsp.ready, PreCountReg, UInt<1>("h00")) @[Timer.scala 61:48]
                reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[Timer.scala 61:44]
                io_rsp_bits_dataResponse_REG_5 <= _io_rsp_bits_dataResponse_T_5 @[Timer.scala 61:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[Timer.scala 61:34]
                reg io_rsp_valid_REG_5 : UInt<1>, clock @[Timer.scala 62:32]
                io_rsp_valid_REG_5 <= io.req.valid @[Timer.scala 62:32]
                io.rsp.valid <= io_rsp_valid_REG_5 @[Timer.scala 62:22]
                skip @[Timer.scala 60:84]
              else : @[Timer.scala 64:15]
                io.cio_timer_intr_cmp is invalid @[Timer.scala 65:58]
                io.rsp.valid is invalid @[Timer.scala 65:58]
                reg io_rsp_bits_dataResponse_REG_6 : UInt, clock @[Timer.scala 66:44]
                io_rsp_bits_dataResponse_REG_6 <= io.req.bits.addrRequest @[Timer.scala 66:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_6 @[Timer.scala 66:34]
                skip @[Timer.scala 64:15]
    node _enable_T = bits(ControlReg, 0, 0) @[Timer.scala 69:37]
    wire enable : UInt<1>
    enable <= _enable_T
    node _prescalar_T = bits(ControlReg, 31, 1) @[Timer.scala 70:40]
    wire prescalar : UInt
    prescalar <= _prescalar_T
    node _T_36 = eq(PreCountReg, UInt<1>("h00")) @[Timer.scala 73:22]
    node _T_37 = and(_T_36, enable) @[Timer.scala 73:30]
    when _T_37 : @[Timer.scala 73:40]
      node _PreCountReg_T = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 74:36]
      node _PreCountReg_T_1 = tail(_PreCountReg_T, 1) @[Timer.scala 74:36]
      PreCountReg <= _PreCountReg_T_1 @[Timer.scala 74:21]
      skip @[Timer.scala 73:40]
    else : @[Timer.scala 76:69]
      node _T_38 = eq(TimerReg, CompareReg) @[Timer.scala 76:24]
      node _T_39 = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 76:51]
      node _T_40 = or(_T_38, _T_39) @[Timer.scala 76:39]
      when _T_40 : @[Timer.scala 76:69]
        TimerReg <= UInt<1>("h00") @[Timer.scala 77:18]
        skip @[Timer.scala 76:69]
      else : @[Timer.scala 79:51]
        node _T_41 = eq(PreCountReg, prescalar) @[Timer.scala 79:27]
        node _T_42 = and(_T_41, enable) @[Timer.scala 79:41]
        when _T_42 : @[Timer.scala 79:51]
          node _TimerReg_T = add(TimerReg, UInt<1>("h01")) @[Timer.scala 80:30]
          node _TimerReg_T_1 = tail(_TimerReg_T, 1) @[Timer.scala 80:30]
          TimerReg <= _TimerReg_T_1 @[Timer.scala 80:18]
          PreCountReg <= UInt<1>("h00") @[Timer.scala 81:21]
          skip @[Timer.scala 79:51]
        else : @[Timer.scala 82:40]
          node _T_43 = lt(PreCountReg, prescalar) @[Timer.scala 82:28]
          when _T_43 : @[Timer.scala 82:40]
            node _PreCountReg_T_2 = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 83:36]
            node _PreCountReg_T_3 = tail(_PreCountReg_T_2, 1) @[Timer.scala 83:36]
            PreCountReg <= _PreCountReg_T_3 @[Timer.scala 83:21]
            skip @[Timer.scala 82:40]
    node _io_cio_timer_intr_cmp_T = eq(TimerReg, CompareReg) @[Timer.scala 87:51]
    node _io_cio_timer_intr_cmp_T_1 = mux(enable, _io_cio_timer_intr_cmp_T, UInt<1>("h00")) @[Timer.scala 87:33]
    io.cio_timer_intr_cmp <= _io_cio_timer_intr_cmp_T_1 @[Timer.scala 87:27]
    node _io_cio_timer_intr_ovf_T = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 88:51]
    node _io_cio_timer_intr_ovf_T_1 = mux(enable, _io_cio_timer_intr_ovf_T, UInt<1>("h00")) @[Timer.scala 88:33]
    io.cio_timer_intr_ovf <= _io_cio_timer_intr_ovf_T_1 @[Timer.scala 88:27]
    wire addr_hit : UInt<1>[4] @[Timer.scala 93:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 95:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[Timer.scala 96:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 102:39]
    addr_hit[0] <= _addr_hit_0_T @[Timer.scala 102:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[Timer.scala 102:39]
    addr_hit[1] <= _addr_hit_1_T @[Timer.scala 102:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[Timer.scala 102:39]
    addr_hit[2] <= _addr_hit_2_T @[Timer.scala 102:27]
    node _addr_hit_3_T = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 102:39]
    addr_hit[3] <= _addr_hit_3_T @[Timer.scala 102:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[Timer.scala 110:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[Timer.scala 110:37]
    node _addr_miss_T_2 = or(_addr_miss_T_1, addr_hit[3]) @[Timer.scala 110:37]
    node _addr_miss_T_3 = not(_addr_miss_T_2) @[Timer.scala 110:18]
    addr_miss <= _addr_miss_T_3 @[Timer.scala 110:15]
    node _T_44 = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 111:19]
    node _T_45 = and(_T_44, io.req.bits.isWrite) @[Timer.scala 111:27]
    when _T_45 : @[Timer.scala 111:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[Timer.scala 111:78]
      io_rsp_bits_error_REG <= io.req.valid @[Timer.scala 111:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[Timer.scala 111:68]
      skip @[Timer.scala 111:49]
    else : @[Timer.scala 112:55]
      node _T_46 = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 112:24]
      node _T_47 = and(_T_46, io.req.bits.isWrite) @[Timer.scala 112:33]
      when _T_47 : @[Timer.scala 112:55]
        reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[Timer.scala 112:84]
        io_rsp_bits_error_REG_1 <= io.req.valid @[Timer.scala 112:84]
        io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[Timer.scala 112:74]
        skip @[Timer.scala 112:55]
      else : @[Timer.scala 113:15]
        node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[Timer.scala 113:58]
        reg io_rsp_bits_error_REG_2 : UInt<1>, clock @[Timer.scala 113:44]
        io_rsp_bits_error_REG_2 <= _io_rsp_bits_error_T @[Timer.scala 113:44]
        io.rsp.bits.error <= io_rsp_bits_error_REG_2 @[Timer.scala 113:34]
        skip @[Timer.scala 113:15]
    
  module TimerHarnessTL : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cio_timer_intr_cmp : UInt<1>, cio_timer_intr_ovf : UInt<1>}
    
    inst hostAdapter of TilelinkHost @[TimerHarness.scala 57:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of TilelinkDevice @[TimerHarness.scala 58:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst timer of Timer @[TimerHarness.scala 59:21]
    timer.clock <= clock
    timer.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[TimerHarness.scala 61:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[TimerHarness.scala 61:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[TimerHarness.scala 61:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[TimerHarness.scala 61:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[TimerHarness.scala 61:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[TimerHarness.scala 61:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[TimerHarness.scala 62:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[TimerHarness.scala 62:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[TimerHarness.scala 62:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[TimerHarness.scala 62:10]
    deviceAdapter.io.tlMasterReceiver.bits.a_data <= hostAdapter.io.tlMasterTransmitter.bits.a_data @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_corrupt <= hostAdapter.io.tlMasterTransmitter.bits.a_corrupt @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_mask <= hostAdapter.io.tlMasterTransmitter.bits.a_mask @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_address <= hostAdapter.io.tlMasterTransmitter.bits.a_address @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_source <= hostAdapter.io.tlMasterTransmitter.bits.a_source @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_size <= hostAdapter.io.tlMasterTransmitter.bits.a_size @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_param <= hostAdapter.io.tlMasterTransmitter.bits.a_param @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_opcode <= hostAdapter.io.tlMasterTransmitter.bits.a_opcode @[TimerHarness.scala 63:38]
    deviceAdapter.io.tlMasterReceiver.valid <= hostAdapter.io.tlMasterTransmitter.valid @[TimerHarness.scala 63:38]
    hostAdapter.io.tlMasterTransmitter.ready <= deviceAdapter.io.tlMasterReceiver.ready @[TimerHarness.scala 63:38]
    hostAdapter.io.tlSlaveReceiver.bits.d_data <= deviceAdapter.io.tlSlaveTransmitter.bits.d_data @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_corrupt <= deviceAdapter.io.tlSlaveTransmitter.bits.d_corrupt @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_denied <= deviceAdapter.io.tlSlaveTransmitter.bits.d_denied @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_sink <= deviceAdapter.io.tlSlaveTransmitter.bits.d_sink @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_source <= deviceAdapter.io.tlSlaveTransmitter.bits.d_source @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_size <= deviceAdapter.io.tlSlaveTransmitter.bits.d_size @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_param <= deviceAdapter.io.tlSlaveTransmitter.bits.d_param @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_opcode <= deviceAdapter.io.tlSlaveTransmitter.bits.d_opcode @[TimerHarness.scala 64:34]
    hostAdapter.io.tlSlaveReceiver.valid <= deviceAdapter.io.tlSlaveTransmitter.valid @[TimerHarness.scala 64:34]
    deviceAdapter.io.tlSlaveTransmitter.ready <= hostAdapter.io.tlSlaveReceiver.ready @[TimerHarness.scala 64:34]
    timer.io.req.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[TimerHarness.scala 66:16]
    timer.io.req.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[TimerHarness.scala 66:16]
    timer.io.req.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[TimerHarness.scala 66:16]
    timer.io.req.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[TimerHarness.scala 66:16]
    timer.io.req.valid <= deviceAdapter.io.reqOut.valid @[TimerHarness.scala 66:16]
    deviceAdapter.io.reqOut.ready <= timer.io.req.ready @[TimerHarness.scala 66:16]
    deviceAdapter.io.rspIn.bits.error <= timer.io.rsp.bits.error @[TimerHarness.scala 67:16]
    deviceAdapter.io.rspIn.bits.dataResponse <= timer.io.rsp.bits.dataResponse @[TimerHarness.scala 67:16]
    deviceAdapter.io.rspIn.valid <= timer.io.rsp.valid @[TimerHarness.scala 67:16]
    timer.io.rsp.ready <= deviceAdapter.io.rspIn.ready @[TimerHarness.scala 67:16]
    io.cio_timer_intr_cmp <= timer.io.cio_timer_intr_cmp @[TimerHarness.scala 69:25]
    io.cio_timer_intr_ovf <= timer.io.cio_timer_intr_ovf @[TimerHarness.scala 70:25]
    

// Generated by CIRCT unknown git version
// Standard header to adapt well known macros to our needs.
`ifdef RANDOMIZE_REG_INIT
  `define RANDOMIZE
`endif
`ifdef RANDOMIZE_MEM_INIT
  `define RANDOMIZE
`endif

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif

// Users can define 'PRINTF_COND' to add an extra gate to prints.
`ifdef PRINTF_COND
  `define PRINTF_COND_ (`PRINTF_COND)
`else
  `define PRINTF_COND_ 1
`endif

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifdef RANDOMIZE
  `ifdef VERILATOR
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
  `else
    `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
  `endif
`else
  `define INIT_RANDOM_PROLOG_
`endif

// VCS coverage exclude_file
module mem_0_combMem(	// BlockRam.scala:141:24
  input  [9:0] R0_addr,
  input        R0_en,
               R0_clk,
  input  [9:0] W0_addr,
  input        W0_en,
               W0_clk,
  input  [7:0] W0_data,
  output [7:0] R0_data);

  reg [7:0] Memory[0:1023];	// BlockRam.scala:141:24
  reg       _GEN;	// BlockRam.scala:141:24
  reg [9:0] _GEN_0;	// BlockRam.scala:141:24
  always @(posedge R0_clk) begin	// BlockRam.scala:141:24
    _GEN <= R0_en;	// BlockRam.scala:141:24
    _GEN_0 <= R0_addr;	// BlockRam.scala:141:24
  end // always @(posedge)
  always @(posedge W0_clk) begin	// BlockRam.scala:141:24
    if (W0_en)	// BlockRam.scala:141:24
      Memory[W0_addr] <= W0_data;	// BlockRam.scala:141:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// BlockRam.scala:141:24
    `ifdef RANDOMIZE_MEM_INIT	// BlockRam.scala:141:24
      integer initvar;	// BlockRam.scala:141:24
      reg [31:0] _RANDOM_MEM;	// BlockRam.scala:141:24
    `endif
    `ifdef RANDOMIZE_REG_INIT	// BlockRam.scala:141:24
      reg [31:0] _RANDOM;	// BlockRam.scala:141:24
    `endif
    initial begin	// BlockRam.scala:141:24
      `INIT_RANDOM_PROLOG_	// BlockRam.scala:141:24
      `ifdef RANDOMIZE_MEM_INIT	// BlockRam.scala:141:24
        for (initvar = 0; initvar < 1024; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[7:0];
        end	// BlockRam.scala:141:24
      `endif
      `ifdef RANDOMIZE_REG_INIT	// BlockRam.scala:141:24
        _RANDOM = {`RANDOM};	// BlockRam.scala:141:24
        _GEN = _RANDOM[0];	// BlockRam.scala:141:24
        _GEN_0 = _RANDOM[10:1];	// BlockRam.scala:141:24
      `endif
    end // initial
  `endif
  assign R0_data = _GEN ? Memory[_GEN_0] : 8'bx;	// BlockRam.scala:141:24
endmodule

// VCS coverage exclude_file
module mem_combMem(	// BlockRam.scala:82:24
  input  [9:0]  R0_addr,
  input         R0_en,
                R0_clk,
  input  [9:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data,
  output [31:0] R0_data);

  reg [31:0] Memory[0:1023];	// BlockRam.scala:82:24
  reg        _GEN;	// BlockRam.scala:82:24
  reg [9:0]  _GEN_0;	// BlockRam.scala:82:24
  always @(posedge R0_clk) begin	// BlockRam.scala:82:24
    _GEN <= R0_en;	// BlockRam.scala:82:24
    _GEN_0 <= R0_addr;	// BlockRam.scala:82:24
  end // always @(posedge)
  always @(posedge W0_clk) begin	// BlockRam.scala:82:24
    if (W0_en)	// BlockRam.scala:82:24
      Memory[W0_addr] <= W0_data;	// BlockRam.scala:82:24
  end // always @(posedge)
  `ifndef SYNTHESIS	// BlockRam.scala:82:24
    `ifdef RANDOMIZE_MEM_INIT	// BlockRam.scala:82:24
      integer initvar;	// BlockRam.scala:82:24
      reg [31:0] _RANDOM_MEM;	// BlockRam.scala:82:24
    `endif
    `ifdef RANDOMIZE_REG_INIT	// BlockRam.scala:82:24
      reg [31:0] _RANDOM;	// BlockRam.scala:82:24
    `endif
    initial begin	// BlockRam.scala:82:24
      `INIT_RANDOM_PROLOG_	// BlockRam.scala:82:24
      `ifdef RANDOMIZE_MEM_INIT	// BlockRam.scala:82:24
        for (initvar = 0; initvar < 1024; initvar = initvar + 1) begin
          _RANDOM_MEM = {`RANDOM};
          Memory[initvar] = _RANDOM_MEM[31:0];
        end	// BlockRam.scala:82:24
      `endif
      `ifdef RANDOMIZE_REG_INIT	// BlockRam.scala:82:24
        _RANDOM = {`RANDOM};	// BlockRam.scala:82:24
        _GEN = _RANDOM[0];	// BlockRam.scala:82:24
        _GEN_0 = _RANDOM[10:1];	// BlockRam.scala:82:24
      `endif
    end // initial
  `endif
  assign R0_data = _GEN ? Memory[_GEN_0] : 32'bx;	// BlockRam.scala:82:24
endmodule

module WishboneHost(
  input         clock,
                reset,
                io_wbSlaveReceiver_bits_ack,
  input  [31:0] io_wbSlaveReceiver_bits_dat,
  input         io_wbSlaveReceiver_bits_err,
                io_reqIn_valid,
  input  [31:0] io_reqIn_bits_addrRequest,
  output        io_wbMasterTransmitter_valid,
                io_wbMasterTransmitter_bits_cyc,
                io_wbMasterTransmitter_bits_stb,
  output [31:0] io_wbMasterTransmitter_bits_adr,
  output        io_reqIn_ready,
                io_rspOut_valid,
  output [31:0] io_rspOut_bits_dataResponse);

  reg         startWBTransaction;	// WishboneHost.scala:39:35
  reg  [31:0] dataReg;	// WishboneHost.scala:41:24
  reg         respReg;	// WishboneHost.scala:42:24
  reg         stbReg;	// WishboneHost.scala:46:23
  reg         cycReg;	// WishboneHost.scala:47:23
  reg  [31:0] adrReg;	// WishboneHost.scala:50:23
  reg         stateReg;	// WishboneHost.scala:56:25
  reg         readyReg;	// WishboneHost.scala:62:25
  wire        _GEN = startWBTransaction & stbReg;	// WishboneHost.scala:39:35, :46:23, :95:37, :102:31, :103:118
  always @(posedge clock) begin
    if (reset) begin
      startWBTransaction <= 1'h0;	// WishboneHost.scala:39:35
      dataReg <= 32'h0;	// WishboneHost.scala:41:24
      respReg <= 1'h0;	// WishboneHost.scala:42:24
      stbReg <= 1'h0;	// WishboneHost.scala:46:23
      cycReg <= 1'h0;	// WishboneHost.scala:47:23
      adrReg <= 32'h0;	// WishboneHost.scala:50:23
      stateReg <= 1'h0;	// WishboneHost.scala:56:25
      readyReg <= 1'h1;	// WishboneHost.scala:62:25
    end
    else begin
      automatic logic _T_7;	// WishboneHost.scala:77:67
      automatic logic _T_14 = io_wbSlaveReceiver_bits_ack & ~io_wbSlaveReceiver_bits_err;	// WishboneHost.scala:106:{38,41}
      automatic logic _T_16 = io_wbSlaveReceiver_bits_err & ~io_wbSlaveReceiver_bits_ack;	// WishboneHost.scala:112:{45,48}
      _T_7 = readyReg & io_reqIn_valid;	// WishboneHost.scala:62:25, :77:67
      startWBTransaction <= ~_T_14 & ~_T_16 & (_T_7 | startWBTransaction);	// WishboneHost.scala:39:35, :77:{67,86}, :78:26, :85:92, :106:{38,71}, :111:26, :112:{45,78}, :116:26
      dataReg <= _T_14 | _T_16 ? io_wbSlaveReceiver_bits_dat : dataReg;	// WishboneHost.scala:41:24, :106:{38,71}, :107:15, :112:{45,78}
      respReg <= (~stateReg | ~stateReg) & (_T_14 | _T_16 | respReg);	// WishboneHost.scala:42:24, :56:25, :106:{38,71}, :108:15, :112:{45,78}, :119:29, :121:42, :122:15
      stbReg <= _T_7 | stbReg;	// WishboneHost.scala:46:23, :77:{67,86}, :79:14, :85:92
      cycReg <= _T_7 | cycReg;	// WishboneHost.scala:47:23, :77:{67,86}, :80:14, :85:92
      adrReg <= _T_7 ? io_reqIn_bits_addrRequest : adrReg;	// WishboneHost.scala:50:23, :77:{67,86}, :82:14, :85:92
      stateReg <= ~stateReg & (io_wbSlaveReceiver_bits_ack | io_wbSlaveReceiver_bits_err);	// WishboneHost.scala:56:25, :119:{19,29}, :120:{16,51}, :121:42
      readyReg <= stateReg | ~io_reqIn_valid & readyReg;	// WishboneHost.scala:56:25, :62:25, :63:14, :64:14, :66:33, :67:14
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        startWBTransaction = _RANDOM_0[0];	// WishboneHost.scala:39:35
        dataReg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// WishboneHost.scala:39:35, :41:24
        respReg = _RANDOM_1[1];	// WishboneHost.scala:41:24, :42:24
        stbReg = _RANDOM_1[4];	// WishboneHost.scala:41:24, :46:23
        cycReg = _RANDOM_1[5];	// WishboneHost.scala:41:24, :47:23
        adrReg = {_RANDOM_2[31:7], _RANDOM_3[6:0]};	// WishboneHost.scala:50:23
        stateReg = _RANDOM_3[11];	// WishboneHost.scala:50:23, :56:25
        readyReg = _RANDOM_3[12];	// WishboneHost.scala:50:23, :62:25
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_wbMasterTransmitter_valid = _GEN;	// WishboneHost.scala:95:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_cyc = startWBTransaction & cycReg;	// WishboneHost.scala:39:35, :47:23, :96:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_stb = _GEN;	// WishboneHost.scala:95:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_adr = startWBTransaction ? adrReg : 32'h0;	// WishboneHost.scala:39:35, :50:23, :98:37, :102:31, :103:118
  assign io_reqIn_ready = readyReg;	// WishboneHost.scala:62:25
  assign io_rspOut_valid = respReg;	// WishboneHost.scala:42:24
  assign io_rspOut_bits_dataResponse = dataReg;	// WishboneHost.scala:41:24
endmodule

module WishboneDevice(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
  input  [31:0] io_wbMasterReceiver_bits_adr,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & _T_4;	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:27, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_rspIn_bits_dataResponse;
  assign io_wbSlaveTransmitter_bits_err = _T_1 & ~_T_4 & io_rspIn_valid & io_rspIn_bits_error;	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
endmodule

module WishboneHost_1(
  input         clock,
                reset,
                io_wbSlaveReceiver_bits_ack,
  input  [31:0] io_wbSlaveReceiver_bits_dat,
  input         io_wbSlaveReceiver_bits_err,
                io_reqIn_valid,
  input  [31:0] io_reqIn_bits_addrRequest,
                io_reqIn_bits_dataRequest,
  input         io_reqIn_bits_isWrite,
  output        io_wbMasterTransmitter_valid,
                io_wbMasterTransmitter_bits_cyc,
                io_wbMasterTransmitter_bits_stb,
                io_wbMasterTransmitter_bits_we,
  output [31:0] io_wbMasterTransmitter_bits_adr,
                io_wbMasterTransmitter_bits_dat,
  output [3:0]  io_wbMasterTransmitter_bits_sel,
  output        io_rspOut_valid,
  output [31:0] io_rspOut_bits_dataResponse);

  reg         startWBTransaction;	// WishboneHost.scala:39:35
  reg  [31:0] dataReg;	// WishboneHost.scala:41:24
  reg         respReg;	// WishboneHost.scala:42:24
  reg         stbReg;	// WishboneHost.scala:46:23
  reg         cycReg;	// WishboneHost.scala:47:23
  reg         weReg;	// WishboneHost.scala:48:22
  reg  [31:0] datReg;	// WishboneHost.scala:49:23
  reg  [31:0] adrReg;	// WishboneHost.scala:50:23
  reg  [3:0]  selReg;	// WishboneHost.scala:51:23
  reg         stateReg;	// WishboneHost.scala:56:25
  reg         readyReg;	// WishboneHost.scala:62:25
  wire        _GEN = startWBTransaction & stbReg;	// WishboneHost.scala:39:35, :46:23, :95:37, :102:31, :103:118
  always @(posedge clock) begin
    if (reset) begin
      startWBTransaction <= 1'h0;	// WishboneHost.scala:37:116, :39:35
      dataReg <= 32'h0;	// WishboneHost.scala:41:24
      respReg <= 1'h0;	// WishboneHost.scala:37:116, :42:24
      stbReg <= 1'h0;	// WishboneHost.scala:37:116, :46:23
      cycReg <= 1'h0;	// WishboneHost.scala:37:116, :47:23
      weReg <= 1'h0;	// WishboneHost.scala:37:116, :48:22
      datReg <= 32'h0;	// WishboneHost.scala:41:24, :49:23
      adrReg <= 32'h0;	// WishboneHost.scala:41:24, :50:23
      selReg <= 4'h0;	// WishboneHost.scala:51:23, :103:118
      stateReg <= 1'h0;	// WishboneHost.scala:37:116, :56:25
      readyReg <= 1'h1;	// WishboneHost.scala:62:25
    end
    else begin
      automatic logic _T_7;	// WishboneHost.scala:77:67
      automatic logic _T_11;	// WishboneHost.scala:85:73
      automatic logic _GEN_0;	// WishboneHost.scala:77:86, :81:13, :85:92
      automatic logic _T_14 = io_wbSlaveReceiver_bits_ack & ~io_wbSlaveReceiver_bits_err;	// WishboneHost.scala:106:{38,41}
      automatic logic _T_16 = io_wbSlaveReceiver_bits_err & ~io_wbSlaveReceiver_bits_ack;	// WishboneHost.scala:112:{45,48}
      _T_7 = ~io_reqIn_bits_isWrite & readyReg & io_reqIn_valid;	// WishboneHost.scala:62:25, :77:{32,67}
      _T_11 = io_reqIn_bits_isWrite & readyReg & io_reqIn_valid;	// WishboneHost.scala:62:25, :85:73
      _GEN_0 = _T_7 | _T_11;	// WishboneHost.scala:77:{67,86}, :81:13, :85:{73,92}
      startWBTransaction <= ~_T_14 & ~_T_16 & (_T_7 | _T_11 | startWBTransaction);	// WishboneHost.scala:39:35, :77:{67,86}, :78:26, :85:{73,92}, :106:{38,71}, :111:26, :112:{45,78}, :116:26
      dataReg <= _T_14 | _T_16 ? io_wbSlaveReceiver_bits_dat : dataReg;	// WishboneHost.scala:41:24, :106:{38,71}, :107:15, :112:{45,78}
      respReg <= (~stateReg | ~stateReg) & (_T_14 | _T_16 | respReg);	// WishboneHost.scala:42:24, :56:25, :106:{38,71}, :108:15, :112:{45,78}, :119:29, :121:42, :122:15
      stbReg <= _T_7 | _T_11 | stbReg;	// WishboneHost.scala:46:23, :77:{67,86}, :79:14, :85:{73,92}
      cycReg <= _T_7 | _T_11 | cycReg;	// WishboneHost.scala:47:23, :77:{67,86}, :80:14, :85:{73,92}
      weReg <= _GEN_0 ? io_reqIn_bits_isWrite : weReg;	// WishboneHost.scala:48:22, :77:86, :81:13, :85:92
      datReg <= _T_7 ? 32'h0 : _T_11 ? io_reqIn_bits_dataRequest : datReg;	// WishboneHost.scala:41:24, :49:23, :77:{67,86}, :83:14, :85:{73,92}, :91:14
      adrReg <= _GEN_0 ? io_reqIn_bits_addrRequest : adrReg;	// WishboneHost.scala:50:23, :77:86, :81:13, :82:14, :85:92
      selReg <= _GEN_0 ? 4'hF : selReg;	// WishboneHost.scala:51:23, :77:86, :81:13, :84:14, :85:92
      stateReg <= ~stateReg & (io_wbSlaveReceiver_bits_ack | io_wbSlaveReceiver_bits_err);	// WishboneHost.scala:56:25, :119:{19,29}, :120:{16,51}, :121:42
      readyReg <= stateReg | ~io_reqIn_valid & readyReg;	// WishboneHost.scala:56:25, :62:25, :63:14, :64:14, :66:33, :67:14
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        startWBTransaction = _RANDOM_0[0];	// WishboneHost.scala:39:35
        dataReg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// WishboneHost.scala:39:35, :41:24
        respReg = _RANDOM_1[1];	// WishboneHost.scala:41:24, :42:24
        stbReg = _RANDOM_1[4];	// WishboneHost.scala:41:24, :46:23
        cycReg = _RANDOM_1[5];	// WishboneHost.scala:41:24, :47:23
        weReg = _RANDOM_1[6];	// WishboneHost.scala:41:24, :48:22
        datReg = {_RANDOM_1[31:7], _RANDOM_2[6:0]};	// WishboneHost.scala:41:24, :49:23
        adrReg = {_RANDOM_2[31:7], _RANDOM_3[6:0]};	// WishboneHost.scala:49:23, :50:23
        selReg = _RANDOM_3[10:7];	// WishboneHost.scala:50:23, :51:23
        stateReg = _RANDOM_3[11];	// WishboneHost.scala:50:23, :56:25
        readyReg = _RANDOM_3[12];	// WishboneHost.scala:50:23, :62:25
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_wbMasterTransmitter_valid = _GEN;	// WishboneHost.scala:95:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_cyc = startWBTransaction & cycReg;	// WishboneHost.scala:39:35, :47:23, :96:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_stb = _GEN;	// WishboneHost.scala:95:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_we = startWBTransaction & weReg;	// WishboneHost.scala:39:35, :48:22, :97:36, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_adr = startWBTransaction ? adrReg : 32'h0;	// WishboneHost.scala:39:35, :41:24, :50:23, :98:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_dat = startWBTransaction ? datReg : 32'h0;	// WishboneHost.scala:39:35, :41:24, :49:23, :99:37, :102:31, :103:118
  assign io_wbMasterTransmitter_bits_sel = startWBTransaction ? selReg : 4'h0;	// WishboneHost.scala:39:35, :51:23, :100:37, :102:31, :103:118
  assign io_rspOut_valid = respReg;	// WishboneHost.scala:42:24
  assign io_rspOut_bits_dataResponse = dataReg;	// WishboneHost.scala:41:24
endmodule

module WishboneDevice_1(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input  [3:0]  io_wbMasterReceiver_bits_sel,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output [3:0]  io_reqOut_bits_activeByteLane,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & io_rspIn_valid;	// WishboneDevice.scala:16:80, :25:16, :26:40, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_activeByteLane = io_wbMasterReceiver_bits_sel;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module SubReg(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  input         io_de,
  input  [31:0] io_d,
  output [31:0] io_q,
                io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we | io_de ? (io_de ? io_d : q_reg) & ~({32{io_we}} & io_wd) : q_reg;	// SubReg.scala:24:22, :33:20, :34:{19,40,45}, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_q = q_reg;	// SubReg.scala:24:22
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubReg_1(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  output [31:0] io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we ? io_wd : q_reg;	// SubReg.scala:24:22, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubRegExt(
  input         io_we,
  input  [31:0] io_wd,
  output        io_qe,
  output [31:0] io_q);

  assign io_qe = io_we;
  assign io_q = io_wd;
endmodule

module SubReg_2(
  input         clock,
                reset,
  input  [31:0] io_d,
  output [31:0] io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_d;	// SubReg.scala:24:22
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubRegExt_1(
  input         io_we,
  input  [31:0] io_wd,
                io_d,
  output        io_qe,
  output [31:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_2(
  input         io_we,
  input  [15:0] io_wd,
                io_d,
  output        io_qe,
  output [15:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_3(
  input  [15:0] io_wd,
  output [15:0] io_q);

  assign io_q = io_wd;
endmodule

module SubRegExt_4(
  input         io_we,
  input  [15:0] io_wd,
                io_d,
  output        io_qe,
  output [15:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_5(
  input  [15:0] io_wd,
  output [15:0] io_q);

  assign io_q = io_wd;
endmodule

module SubRegExt_6(
  input         io_we,
  input  [31:0] io_wd,
                io_d,
  output        io_qe,
  output [31:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_7(
  input         io_we,
  input  [15:0] io_wd,
                io_d,
  output        io_qe,
  output [15:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_8(
  input  [15:0] io_wd,
  output [15:0] io_q);

  assign io_q = io_wd;
endmodule

module SubRegExt_9(
  input         io_we,
  input  [15:0] io_wd,
                io_d,
  output        io_qe,
  output [15:0] io_q,
                io_qs);

  assign io_qe = io_we;
  assign io_q = io_wd;
  assign io_qs = io_d;
endmodule

module SubRegExt_10(
  input  [15:0] io_wd,
  output [15:0] io_q);

  assign io_q = io_wd;
endmodule

module SubReg_3(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  output [31:0] io_q,
                io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we ? io_wd : q_reg;	// SubReg.scala:24:22, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_q = q_reg;	// SubReg.scala:24:22
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubReg_4(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  output [31:0] io_q,
                io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we ? io_wd : q_reg;	// SubReg.scala:24:22, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_q = q_reg;	// SubReg.scala:24:22
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubReg_5(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  output [31:0] io_q,
                io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we ? io_wd : q_reg;	// SubReg.scala:24:22, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_q = q_reg;	// SubReg.scala:24:22
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module SubReg_6(
  input         clock,
                reset,
                io_we,
  input  [31:0] io_wd,
  output [31:0] io_q,
                io_qs);

  reg [31:0] q_reg;	// SubReg.scala:24:22
  always @(posedge clock) begin
    if (reset)
      q_reg <= 32'h0;	// SubReg.scala:24:22
    else
      q_reg <= io_we ? io_wd : q_reg;	// SubReg.scala:24:22, :47:15, :48:11
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        q_reg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// SubReg.scala:24:22
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_q = q_reg;	// SubReg.scala:24:22
  assign io_qs = q_reg;	// SubReg.scala:24:22
endmodule

module GpioRegTop(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
  input  [31:0] io_hw2reg_intr_state_d,
  input         io_hw2reg_intr_state_de,
  input  [31:0] io_hw2reg_data_in_d,
                io_hw2reg_direct_out_d,
  input  [15:0] io_hw2reg_masked_out_lower_data_d,
                io_hw2reg_masked_out_upper_data_d,
  input  [31:0] io_hw2reg_direct_oe_d,
  input  [15:0] io_hw2reg_masked_oe_lower_data_d,
                io_hw2reg_masked_oe_upper_data_d,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error,
  output [31:0] io_reg2hw_intr_state_q,
                io_reg2hw_intr_test_q,
  output        io_reg2hw_intr_test_qe,
  output [31:0] io_reg2hw_direct_out_q,
  output        io_reg2hw_direct_out_qe,
  output [15:0] io_reg2hw_masked_out_lower_data_q,
  output        io_reg2hw_masked_out_lower_data_qe,
  output [15:0] io_reg2hw_masked_out_lower_mask_q,
                io_reg2hw_masked_out_upper_data_q,
  output        io_reg2hw_masked_out_upper_data_qe,
  output [15:0] io_reg2hw_masked_out_upper_mask_q,
  output [31:0] io_reg2hw_direct_oe_q,
  output        io_reg2hw_direct_oe_qe,
  output [15:0] io_reg2hw_masked_oe_lower_data_q,
  output        io_reg2hw_masked_oe_lower_data_qe,
  output [15:0] io_reg2hw_masked_oe_lower_mask_q,
                io_reg2hw_masked_oe_upper_data_q,
  output        io_reg2hw_masked_oe_upper_data_qe,
  output [15:0] io_reg2hw_masked_oe_upper_mask_q,
  output [31:0] io_reg2hw_intr_ctrl_en_rising_q,
                io_reg2hw_intr_ctrl_en_falling_q,
                io_reg2hw_intr_ctrl_en_lvlHigh_q,
                io_reg2hw_intr_ctrl_en_lvlLow_q);

  wire        _wr_err_T_13;	// Mux.scala:98:16
  wire        _addr_miss_T_30;	// GpioRegTop.scala:280:19
  wire [31:0] _intr_ctrl_en_lvllow_reg_io_qs;	// GpioRegTop.scala:267:39
  wire [31:0] _intr_ctrl_en_lvlhigh_reg_io_qs;	// GpioRegTop.scala:258:40
  wire [31:0] _intr_ctrl_en_falling_reg_io_qs;	// GpioRegTop.scala:249:40
  wire [31:0] _intr_ctrl_en_rising_reg_io_qs;	// GpioRegTop.scala:240:39
  wire [15:0] _masked_oe_upper_data_reg_io_qs;	// GpioRegTop.scala:219:40
  wire [15:0] _masked_oe_lower_data_reg_io_qs;	// GpioRegTop.scala:197:40
  wire [31:0] _direct_oe_reg_io_qs;	// GpioRegTop.scala:186:29
  wire [15:0] _masked_out_upper_data_reg_io_qs;	// GpioRegTop.scala:166:41
  wire [15:0] _masked_out_lower_data_reg_io_qs;	// GpioRegTop.scala:145:41
  wire [31:0] _direct_out_reg_io_qs;	// GpioRegTop.scala:134:30
  wire [31:0] _data_in_reg_io_qs;	// GpioRegTop.scala:126:27
  wire [31:0] _intr_enable_reg_io_qs;	// GpioRegTop.scala:108:31
  wire [31:0] _intr_state_reg_io_qs;	// GpioRegTop.scala:93:30
  wire        _reg_we_T_1 = io_req_valid & io_req_bits_isWrite;	// GpioRegTop.scala:33:16
  wire        _addr_miss_T = _reg_we_T_1 | io_req_valid & ~io_req_bits_isWrite;	// GpioRegTop.scala:33:16, :34:{16,32}, :39:38
  reg         io_rsp_valid_REG;	// GpioRegTop.scala:39:26
  wire        _addr_hit_0_T_1 = io_req_bits_addrRequest[5:0] == 6'h0;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_1_T_1 = io_req_bits_addrRequest[5:0] == 6'h4;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_2_T_1 = io_req_bits_addrRequest[5:0] == 6'h8;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_3_T_1 = io_req_bits_addrRequest[5:0] == 6'hC;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_4_T_1 = io_req_bits_addrRequest[5:0] == 6'h10;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_5_T_1 = io_req_bits_addrRequest[5:0] == 6'h14;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_6_T_1 = io_req_bits_addrRequest[5:0] == 6'h18;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_7_T_1 = io_req_bits_addrRequest[5:0] == 6'h1C;	// GpioRegTop.scala:36:12, :277:29
  wire        _addr_hit_8_T_1 = io_req_bits_addrRequest[5:0] == 6'h20;	// GpioRegTop.scala:36:12, :277:{29,63}
  wire        _addr_hit_9_T_1 = io_req_bits_addrRequest[5:0] == 6'h24;	// GpioRegTop.scala:36:12, :277:{29,63}
  wire        _addr_hit_10_T_1 = io_req_bits_addrRequest[5:0] == 6'h28;	// GpioRegTop.scala:36:12, :277:{29,63}
  wire        _addr_hit_11_T_1 = io_req_bits_addrRequest[5:0] == 6'h2C;	// GpioRegTop.scala:36:12, :277:{29,63}
  wire        _addr_hit_12_T_1 = io_req_bits_addrRequest[5:0] == 6'h30;	// GpioRegTop.scala:36:12, :277:{29,63}
  wire        _addr_hit_13_T_1 = io_req_bits_addrRequest[5:0] == 6'h34;	// GpioRegTop.scala:36:12, :277:{29,63}
  assign _addr_miss_T_30 = _addr_miss_T & ~(_addr_hit_0_T_1 | _addr_hit_1_T_1 | _addr_hit_2_T_1 | _addr_hit_3_T_1 |
                _addr_hit_4_T_1 | _addr_hit_5_T_1 | _addr_hit_6_T_1 | _addr_hit_7_T_1 | _addr_hit_8_T_1 |
                _addr_hit_9_T_1 | _addr_hit_10_T_1 | _addr_hit_11_T_1 | _addr_hit_12_T_1 |
                _addr_hit_13_T_1);	// GpioRegTop.scala:39:38, :277:29, :280:{19,38,56}
  wire        _intr_state_we_T = _addr_hit_0_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_enable_we_T = _addr_hit_1_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_test_we_T = _addr_hit_2_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _direct_out_we_T = _addr_hit_4_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _masked_out_lower_mask_we_T = _addr_hit_5_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _masked_out_upper_mask_we_T = _addr_hit_6_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _direct_oe_we_T = _addr_hit_7_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _masked_oe_lower_mask_we_T = _addr_hit_8_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _masked_oe_upper_mask_we_T = _addr_hit_9_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_ctrl_en_rising_we_T = _addr_hit_10_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_ctrl_en_falling_we_T = _addr_hit_11_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_ctrl_en_lvlhigh_we_T = _addr_hit_12_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  wire        _intr_ctrl_en_lvllow_we_T = _addr_hit_13_T_1 & _reg_we_T_1;	// GpioRegTop.scala:33:16, :277:29, :289:8
  assign _wr_err_T_13 = _intr_state_we_T & ~(&io_req_bits_activeByteLane) | _intr_enable_we_T &
                ~(&io_req_bits_activeByteLane) | _intr_test_we_T & ~(&io_req_bits_activeByteLane) |
                _addr_hit_3_T_1 & _reg_we_T_1 & ~(&io_req_bits_activeByteLane) | _direct_out_we_T &
                ~(&io_req_bits_activeByteLane) | _masked_out_lower_mask_we_T &
                ~(&io_req_bits_activeByteLane) | _masked_out_upper_mask_we_T &
                ~(&io_req_bits_activeByteLane) | _direct_oe_we_T & ~(&io_req_bits_activeByteLane) |
                _masked_oe_lower_mask_we_T & ~(&io_req_bits_activeByteLane) | _masked_oe_upper_mask_we_T &
                ~(&io_req_bits_activeByteLane) | _intr_ctrl_en_rising_we_T & ~(&io_req_bits_activeByteLane)
                | _intr_ctrl_en_falling_we_T & ~(&io_req_bits_activeByteLane) | _intr_ctrl_en_lvlhigh_we_T
                & ~(&io_req_bits_activeByteLane) | _intr_ctrl_en_lvllow_we_T &
                ~(&io_req_bits_activeByteLane);	// GpioRegTop.scala:33:16, :277:29, :289:{8,18,24}, Mux.scala:98:16
  always @(posedge clock)
    io_rsp_valid_REG <= _addr_miss_T;	// GpioRegTop.scala:39:{26,38}
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        io_rsp_valid_REG = _RANDOM_0[0];	// GpioRegTop.scala:39:26
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  SubReg intr_state_reg (	// GpioRegTop.scala:93:30
    .clock (clock),
    .reset (reset),
    .io_we (_intr_state_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:{41,43}, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_de (io_hw2reg_intr_state_de),
    .io_d  (io_hw2reg_intr_state_d),
    .io_q  (io_reg2hw_intr_state_q),
    .io_qs (_intr_state_reg_io_qs)
  );
  SubReg_1 intr_enable_reg (	// GpioRegTop.scala:108:31
    .clock (clock),
    .reset (reset),
    .io_we (_intr_enable_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :299:42, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_qs (_intr_enable_reg_io_qs)
  );
  SubRegExt intr_test_reg (	// GpioRegTop.scala:117:29
    .io_we (_intr_test_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :302:40, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_qe (io_reg2hw_intr_test_qe),
    .io_q  (io_reg2hw_intr_test_q)
  );
  SubReg_2 data_in_reg (	// GpioRegTop.scala:126:27
    .clock (clock),
    .reset (reset),
    .io_d  (io_hw2reg_data_in_d),
    .io_qs (_data_in_reg_io_qs)
  );
  SubRegExt_1 direct_out_reg (	// GpioRegTop.scala:134:30
    .io_we (_direct_out_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :305:41, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_d  (io_hw2reg_direct_out_d),
    .io_qe (io_reg2hw_direct_out_qe),
    .io_q  (io_reg2hw_direct_out_q),
    .io_qs (_direct_out_reg_io_qs)
  );
  SubRegExt_2 masked_out_lower_data_reg (	// GpioRegTop.scala:145:41
    .io_we (_masked_out_lower_mask_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :309:52, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest[15:0]),	// GpioRegTop.scala:310:40
    .io_d  (io_hw2reg_masked_out_lower_data_d),
    .io_qe (io_reg2hw_masked_out_lower_data_qe),
    .io_q  (io_reg2hw_masked_out_lower_data_q),
    .io_qs (_masked_out_lower_data_reg_io_qs)
  );
  SubRegExt_3 masked_out_lower_mask_reg (	// GpioRegTop.scala:156:41
    .io_wd (io_req_bits_dataRequest[31:16]),	// GpioRegTop.scala:314:40
    .io_q  (io_reg2hw_masked_out_lower_mask_q)
  );
  SubRegExt_4 masked_out_upper_data_reg (	// GpioRegTop.scala:166:41
    .io_we (_masked_out_upper_mask_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :316:52, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest[15:0]),	// GpioRegTop.scala:310:40
    .io_d  (io_hw2reg_masked_out_upper_data_d),
    .io_qe (io_reg2hw_masked_out_upper_data_qe),
    .io_q  (io_reg2hw_masked_out_upper_data_q),
    .io_qs (_masked_out_upper_data_reg_io_qs)
  );
  SubRegExt_5 masked_out_upper_mask_reg (	// GpioRegTop.scala:177:41
    .io_wd (io_req_bits_dataRequest[31:16]),	// GpioRegTop.scala:314:40
    .io_q  (io_reg2hw_masked_out_upper_mask_q)
  );
  SubRegExt_6 direct_oe_reg (	// GpioRegTop.scala:186:29
    .io_we (_direct_oe_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :323:40, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_d  (io_hw2reg_direct_oe_d),
    .io_qe (io_reg2hw_direct_oe_qe),
    .io_q  (io_reg2hw_direct_oe_q),
    .io_qs (_direct_oe_reg_io_qs)
  );
  SubRegExt_7 masked_oe_lower_data_reg (	// GpioRegTop.scala:197:40
    .io_we (_masked_oe_lower_mask_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :327:51, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest[15:0]),	// GpioRegTop.scala:310:40
    .io_d  (io_hw2reg_masked_oe_lower_data_d),
    .io_qe (io_reg2hw_masked_oe_lower_data_qe),
    .io_q  (io_reg2hw_masked_oe_lower_data_q),
    .io_qs (_masked_oe_lower_data_reg_io_qs)
  );
  SubRegExt_8 masked_oe_lower_mask_reg (	// GpioRegTop.scala:208:40
    .io_wd (io_req_bits_dataRequest[31:16]),	// GpioRegTop.scala:314:40
    .io_q  (io_reg2hw_masked_oe_lower_mask_q)
  );
  SubRegExt_9 masked_oe_upper_data_reg (	// GpioRegTop.scala:219:40
    .io_we (_masked_oe_upper_mask_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :335:51, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest[15:0]),	// GpioRegTop.scala:310:40
    .io_d  (io_hw2reg_masked_oe_upper_data_d),
    .io_qe (io_reg2hw_masked_oe_upper_data_qe),
    .io_q  (io_reg2hw_masked_oe_upper_data_q),
    .io_qs (_masked_oe_upper_data_reg_io_qs)
  );
  SubRegExt_10 masked_oe_upper_mask_reg (	// GpioRegTop.scala:230:40
    .io_wd (io_req_bits_dataRequest[31:16]),	// GpioRegTop.scala:314:40
    .io_q  (io_reg2hw_masked_oe_upper_mask_q)
  );
  SubReg_3 intr_ctrl_en_rising_reg (	// GpioRegTop.scala:240:39
    .clock (clock),
    .reset (reset),
    .io_we (_intr_ctrl_en_rising_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :343:51, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_q  (io_reg2hw_intr_ctrl_en_rising_q),
    .io_qs (_intr_ctrl_en_rising_reg_io_qs)
  );
  SubReg_4 intr_ctrl_en_falling_reg (	// GpioRegTop.scala:249:40
    .clock (clock),
    .reset (reset),
    .io_we (_intr_ctrl_en_falling_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :346:52, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_q  (io_reg2hw_intr_ctrl_en_falling_q),
    .io_qs (_intr_ctrl_en_falling_reg_io_qs)
  );
  SubReg_5 intr_ctrl_en_lvlhigh_reg (	// GpioRegTop.scala:258:40
    .clock (clock),
    .reset (reset),
    .io_we (_intr_ctrl_en_lvlhigh_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :349:52, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_q  (io_reg2hw_intr_ctrl_en_lvlHigh_q),
    .io_qs (_intr_ctrl_en_lvlhigh_reg_io_qs)
  );
  SubReg_6 intr_ctrl_en_lvllow_reg (	// GpioRegTop.scala:267:39
    .clock (clock),
    .reset (reset),
    .io_we (_intr_ctrl_en_lvllow_we_T & ~_wr_err_T_13),	// GpioRegTop.scala:289:8, :296:43, :352:51, Mux.scala:98:16
    .io_wd (io_req_bits_dataRequest),
    .io_q  (io_reg2hw_intr_ctrl_en_lvlLow_q),
    .io_qs (_intr_ctrl_en_lvllow_reg_io_qs)
  );
  assign io_rsp_valid = io_rsp_valid_REG;	// GpioRegTop.scala:39:26
  assign io_rsp_bits_dataResponse = _addr_hit_0_T_1 ? _intr_state_reg_io_qs : _addr_hit_1_T_1 ? _intr_enable_reg_io_qs :
                _addr_hit_2_T_1 ? 32'h0 : _addr_hit_3_T_1 ? _data_in_reg_io_qs : _addr_hit_4_T_1 ?
                _direct_out_reg_io_qs : _addr_hit_5_T_1 ? {16'h0, _masked_out_lower_data_reg_io_qs} :
                _addr_hit_6_T_1 ? {16'h0, _masked_out_upper_data_reg_io_qs} : _addr_hit_7_T_1 ?
                _direct_oe_reg_io_qs : _addr_hit_8_T_1 ? {16'h0, _masked_oe_lower_data_reg_io_qs} :
                _addr_hit_9_T_1 ? {16'h0, _masked_oe_upper_data_reg_io_qs} : _addr_hit_10_T_1 ?
                _intr_ctrl_en_rising_reg_io_qs : _addr_hit_11_T_1 ? _intr_ctrl_en_falling_reg_io_qs :
                _addr_hit_12_T_1 ? _intr_ctrl_en_lvlhigh_reg_io_qs : _addr_hit_13_T_1 ?
                _intr_ctrl_en_lvllow_reg_io_qs : 32'hFFFFFFFF;	// Bitwise.scala:72:12, Cat.scala:30:58, GpioRegTop.scala:93:30, :108:31, :111:24, :126:27, :134:30, :145:41, :166:41, :186:29, :197:40, :219:40, :240:39, :249:40, :258:40, :267:39, :277:29, :356:21, :357:20, :358:27, :359:20, :360:27, :361:20, :362:27, :363:20, :364:27, :365:20, :366:27, :367:20, :368:27, :369:20, :370:27, :371:20, :372:27, :373:20, :374:27, :375:20, :376:28, :377:20, :378:28, :379:20, :380:28, :381:20, :382:28, :383:20, :385:20
  assign io_rsp_bits_error = _addr_miss_T_30 | _wr_err_T_13;	// GpioRegTop.scala:44:26, :280:19, Mux.scala:98:16
endmodule

module IntrHardware(
  input  [31:0] io_event_intr_i,
                io_reg2hw_intr_test_q_i,
  input         io_reg2hw_intr_test_qe_i,
  input  [31:0] io_reg2hw_intr_state_q_i,
  output        io_hw2reg_intr_state_de_o,
  output [31:0] io_hw2reg_intr_state_d_o);

  wire [31:0] _new_event_T_3 = {32{io_reg2hw_intr_test_qe_i}} & io_reg2hw_intr_test_q_i | io_event_intr_i;	// Bitwise.scala:72:12, IntrHardware.scala:26:{54,80}
  assign io_hw2reg_intr_state_de_o = |_new_event_T_3;	// IntrHardware.scala:26:80, :27:45
  assign io_hw2reg_intr_state_d_o = _new_event_T_3 | io_reg2hw_intr_state_q_i;	// IntrHardware.scala:26:80, :28:41
endmodule

module Gpio(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
  input  [31:0] io_cio_gpio_i,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error,
  output [31:0] io_cio_gpio_o,
                io_cio_gpio_en_o);

  wire        _intr_hw_io_hw2reg_intr_state_de_o;	// Gpio.scala:115:23
  wire [31:0] _intr_hw_io_hw2reg_intr_state_d_o;	// Gpio.scala:115:23
  wire [31:0] _gpioRegTop_io_reg2hw_intr_state_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_intr_test_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_intr_test_qe;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_direct_out_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_direct_out_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_out_lower_data_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_masked_out_lower_data_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_out_lower_mask_q;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_out_upper_data_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_masked_out_upper_data_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_out_upper_mask_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_direct_oe_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_direct_oe_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_oe_lower_data_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_masked_oe_lower_data_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_oe_lower_mask_q;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_oe_upper_data_q;	// Gpio.scala:23:26
  wire        _gpioRegTop_io_reg2hw_masked_oe_upper_data_qe;	// Gpio.scala:23:26
  wire [15:0] _gpioRegTop_io_reg2hw_masked_oe_upper_mask_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_intr_ctrl_en_rising_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_intr_ctrl_en_falling_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_intr_ctrl_en_lvlHigh_q;	// Gpio.scala:23:26
  wire [31:0] _gpioRegTop_io_reg2hw_intr_ctrl_en_lvlLow_q;	// Gpio.scala:23:26
  reg  [31:0] cio_gpio_q;	// Gpio.scala:31:27
  reg  [31:0] cio_gpio_en_q;	// Gpio.scala:32:30
  reg  [31:0] data_in_q;	// Gpio.scala:33:26
  always @(posedge clock) begin
    if (reset) begin
      cio_gpio_q <= 32'h0;	// Gpio.scala:31:27
      cio_gpio_en_q <= 32'h0;	// Gpio.scala:31:27, :32:30
      data_in_q <= 32'h0;	// Gpio.scala:31:27, :33:26
    end
    else begin
      cio_gpio_q <= _gpioRegTop_io_reg2hw_direct_out_qe ? _gpioRegTop_io_reg2hw_direct_out_q :
                                                _gpioRegTop_io_reg2hw_masked_out_upper_data_qe ?
                                                {_gpioRegTop_io_reg2hw_masked_out_upper_data_q &
                                                _gpioRegTop_io_reg2hw_masked_out_upper_mask_q |
                                                ~_gpioRegTop_io_reg2hw_masked_out_upper_mask_q & cio_gpio_q[31:16], 16'h0} :
                                                _gpioRegTop_io_reg2hw_masked_out_lower_data_qe ? {16'h0,
                                                _gpioRegTop_io_reg2hw_masked_out_lower_data_q &
                                                _gpioRegTop_io_reg2hw_masked_out_lower_mask_q |
                                                ~_gpioRegTop_io_reg2hw_masked_out_lower_mask_q & cio_gpio_q[15:0]} : cio_gpio_q;	// Cat.scala:30:58, Gpio.scala:23:26, :31:27, :48:47, :49:34, :50:47, :53:30, :54:16, :55:48, :56:16, :57:{39,73}, :58:{10,42}, :66:48, :67:{16,66,100}, :68:{8,40}
      cio_gpio_en_q <= _gpioRegTop_io_reg2hw_direct_oe_qe ? _gpioRegTop_io_reg2hw_direct_oe_q :
                                                _gpioRegTop_io_reg2hw_masked_oe_upper_data_qe ?
                                                {_gpioRegTop_io_reg2hw_masked_oe_upper_data_q &
                                                _gpioRegTop_io_reg2hw_masked_oe_upper_mask_q |
                                                ~_gpioRegTop_io_reg2hw_masked_oe_upper_mask_q & cio_gpio_en_q[31:16], 16'h0} :
                                                _gpioRegTop_io_reg2hw_masked_oe_lower_data_qe ? {16'h0,
                                                _gpioRegTop_io_reg2hw_masked_oe_lower_data_q & _gpioRegTop_io_reg2hw_masked_oe_lower_mask_q
                                                | ~_gpioRegTop_io_reg2hw_masked_oe_lower_mask_q & cio_gpio_en_q[15:0]} : cio_gpio_en_q;	// Cat.scala:30:58, Gpio.scala:23:26, :32:30, :49:34, :73:49, :75:49, :78:29, :79:19, :80:47, :81:{19,57,90}, :82:{8,39}, :83:47, :84:{19,68,101}, :85:{8,39}
      data_in_q <= io_cio_gpio_i;	// Gpio.scala:33:26
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        cio_gpio_q = _RANDOM_0;	// Gpio.scala:31:27
        cio_gpio_en_q = _RANDOM_1;	// Gpio.scala:32:30
        data_in_q = _RANDOM_2;	// Gpio.scala:33:26
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  GpioRegTop gpioRegTop (	// Gpio.scala:23:26
    .clock                              (clock),
    .reset                              (reset),
    .io_req_valid                       (io_req_valid),
    .io_req_bits_addrRequest            (io_req_bits_addrRequest),
    .io_req_bits_dataRequest            (io_req_bits_dataRequest),
    .io_req_bits_activeByteLane         (io_req_bits_activeByteLane),
    .io_req_bits_isWrite                (io_req_bits_isWrite),
    .io_hw2reg_intr_state_d             (_intr_hw_io_hw2reg_intr_state_d_o),	// Gpio.scala:115:23
    .io_hw2reg_intr_state_de            (_intr_hw_io_hw2reg_intr_state_de_o),	// Gpio.scala:115:23
    .io_hw2reg_data_in_d                (io_cio_gpio_i),
    .io_hw2reg_direct_out_d             (cio_gpio_q),	// Gpio.scala:31:27
    .io_hw2reg_masked_out_lower_data_d  (cio_gpio_q[15:0]),	// Gpio.scala:31:27, :50:47
    .io_hw2reg_masked_out_upper_data_d  (cio_gpio_q[31:16]),	// Gpio.scala:31:27, :48:47
    .io_hw2reg_direct_oe_d              (cio_gpio_en_q),	// Gpio.scala:32:30
    .io_hw2reg_masked_oe_lower_data_d   (cio_gpio_en_q[15:0]),	// Gpio.scala:32:30, :75:49
    .io_hw2reg_masked_oe_upper_data_d   (cio_gpio_en_q[31:16]),	// Gpio.scala:32:30, :73:49
    .io_rsp_valid                       (io_rsp_valid),
    .io_rsp_bits_dataResponse           (io_rsp_bits_dataResponse),
    .io_rsp_bits_error                  (io_rsp_bits_error),
    .io_reg2hw_intr_state_q             (_gpioRegTop_io_reg2hw_intr_state_q),
    .io_reg2hw_intr_test_q              (_gpioRegTop_io_reg2hw_intr_test_q),
    .io_reg2hw_intr_test_qe             (_gpioRegTop_io_reg2hw_intr_test_qe),
    .io_reg2hw_direct_out_q             (_gpioRegTop_io_reg2hw_direct_out_q),
    .io_reg2hw_direct_out_qe            (_gpioRegTop_io_reg2hw_direct_out_qe),
    .io_reg2hw_masked_out_lower_data_q  (_gpioRegTop_io_reg2hw_masked_out_lower_data_q),
    .io_reg2hw_masked_out_lower_data_qe (_gpioRegTop_io_reg2hw_masked_out_lower_data_qe),
    .io_reg2hw_masked_out_lower_mask_q  (_gpioRegTop_io_reg2hw_masked_out_lower_mask_q),
    .io_reg2hw_masked_out_upper_data_q  (_gpioRegTop_io_reg2hw_masked_out_upper_data_q),
    .io_reg2hw_masked_out_upper_data_qe (_gpioRegTop_io_reg2hw_masked_out_upper_data_qe),
    .io_reg2hw_masked_out_upper_mask_q  (_gpioRegTop_io_reg2hw_masked_out_upper_mask_q),
    .io_reg2hw_direct_oe_q              (_gpioRegTop_io_reg2hw_direct_oe_q),
    .io_reg2hw_direct_oe_qe             (_gpioRegTop_io_reg2hw_direct_oe_qe),
    .io_reg2hw_masked_oe_lower_data_q   (_gpioRegTop_io_reg2hw_masked_oe_lower_data_q),
    .io_reg2hw_masked_oe_lower_data_qe  (_gpioRegTop_io_reg2hw_masked_oe_lower_data_qe),
    .io_reg2hw_masked_oe_lower_mask_q   (_gpioRegTop_io_reg2hw_masked_oe_lower_mask_q),
    .io_reg2hw_masked_oe_upper_data_q   (_gpioRegTop_io_reg2hw_masked_oe_upper_data_q),
    .io_reg2hw_masked_oe_upper_data_qe  (_gpioRegTop_io_reg2hw_masked_oe_upper_data_qe),
    .io_reg2hw_masked_oe_upper_mask_q   (_gpioRegTop_io_reg2hw_masked_oe_upper_mask_q),
    .io_reg2hw_intr_ctrl_en_rising_q    (_gpioRegTop_io_reg2hw_intr_ctrl_en_rising_q),
    .io_reg2hw_intr_ctrl_en_falling_q   (_gpioRegTop_io_reg2hw_intr_ctrl_en_falling_q),
    .io_reg2hw_intr_ctrl_en_lvlHigh_q   (_gpioRegTop_io_reg2hw_intr_ctrl_en_lvlHigh_q),
    .io_reg2hw_intr_ctrl_en_lvlLow_q    (_gpioRegTop_io_reg2hw_intr_ctrl_en_lvlLow_q)
  );
  IntrHardware intr_hw (	// Gpio.scala:115:23
    .io_event_intr_i           (~data_in_q & io_cio_gpio_i & _gpioRegTop_io_reg2hw_intr_ctrl_en_rising_q | data_in_q &
                ~io_cio_gpio_i & _gpioRegTop_io_reg2hw_intr_ctrl_en_falling_q | io_cio_gpio_i &
                _gpioRegTop_io_reg2hw_intr_ctrl_en_lvlHigh_q | ~io_cio_gpio_i &
                _gpioRegTop_io_reg2hw_intr_ctrl_en_lvlLow_q),	// Gpio.scala:23:26, :33:26, :95:{23,47}, :99:{35,47}, :105:35, :111:35, :113:81
    .io_reg2hw_intr_test_q_i   (_gpioRegTop_io_reg2hw_intr_test_q),	// Gpio.scala:23:26
    .io_reg2hw_intr_test_qe_i  (_gpioRegTop_io_reg2hw_intr_test_qe),	// Gpio.scala:23:26
    .io_reg2hw_intr_state_q_i  (_gpioRegTop_io_reg2hw_intr_state_q),	// Gpio.scala:23:26
    .io_hw2reg_intr_state_de_o (_intr_hw_io_hw2reg_intr_state_de_o),
    .io_hw2reg_intr_state_d_o  (_intr_hw_io_hw2reg_intr_state_d_o)
  );
  assign io_cio_gpio_o = cio_gpio_q;	// Gpio.scala:31:27
  assign io_cio_gpio_en_o = cio_gpio_en_q;	// Gpio.scala:32:30
endmodule

module WishboneDevice_2(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input  [3:0]  io_wbMasterReceiver_bits_sel,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output [3:0]  io_reqOut_bits_activeByteLane,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_activeByteLane = io_wbMasterReceiver_bits_sel;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module Protocol(
  input         clock,
                reset,
                io_miso,
                io_data_in_valid,
  input  [31:0] io_data_in_bits,
  input         io_CPOL,
  output        io_mosi,
                io_ss,
                io_sck,
                io_data_out_valid,
  output [31:0] io_data_out_bits);

  reg         state;	// Protocol.scala:28:24
  reg  [31:0] miso_dataReg;	// Protocol.scala:30:31
  reg  [6:0]  count;	// Protocol.scala:31:24
  reg  [63:0] dataReg;	// Protocol.scala:32:26
  wire        _T_2 = count == 7'h40;	// Protocol.scala:31:24, :60:25
  reg  [6:0]  count1;	// Protocol.scala:75:25
  wire        _T_4 = count1 == 7'h40;	// Protocol.scala:60:25, :75:25, :79:26
  wire        _GEN = state & _T_4;	// Conditional.scala:40:58, Protocol.scala:28:24, :41:22, :79:{26,63}
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;	// Protocol.scala:28:24
      miso_dataReg <= 32'h0;	// Protocol.scala:30:31
      count <= 7'h0;	// Protocol.scala:31:24
      dataReg <= 64'h0;	// Protocol.scala:32:26
      count1 <= 7'h0;	// Protocol.scala:31:24, :75:25
    end
    else begin
      state <= state ? (~state | ~_T_2) & state : io_data_in_valid | state;	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :49:59, :51:23, :60:{25,38}, :63:23
      miso_dataReg <= ~state | _T_4 ? miso_dataReg : {miso_dataReg[30:0], io_miso};	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :30:31, :60:38, :79:{26,63}, :84:30
      count <= state ? (_T_2 ? 7'h0 : count + 7'h1) : count;	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :31:24, :60:{25,38}, :64:23, :69:{23,32}
      dataReg <= state ? (~state | _T_2 ? dataReg : {dataReg[62:0], 1'h0}) : io_data_in_valid ?
                                                {io_data_in_bits, 32'h0} : dataReg;	// Cat.scala:30:58, Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :30:31, :32:26, :49:59, :50:25, :60:{25,38}, :68:25
      count1 <= state ? (_T_4 ? 7'h0 : count1 + 7'h1) : count1;	// Conditional.scala:40:58, Protocol.scala:28:24, :31:24, :69:32, :75:25, :79:{26,63}, :82:24, :85:{24,34}
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        state = _RANDOM_0[0];	// Protocol.scala:28:24
        miso_dataReg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// Protocol.scala:28:24, :30:31
        count = _RANDOM_1[7:1];	// Protocol.scala:30:31, :31:24
        dataReg = {_RANDOM_1[31:8], _RANDOM_2, _RANDOM_3[7:0]};	// Protocol.scala:30:31, :32:26
        count1 = _RANDOM_3[14:8];	// Protocol.scala:32:26, :75:25
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_mosi = state & ~_T_2 & dataReg[63];	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :32:26, :43:13, :60:{25,38}, :63:23, :67:35
  assign io_ss = ~state & (~state | ~state | _T_2);	// Conditional.scala:37:30, :39:67, :40:58, Protocol.scala:28:24, :42:11, :60:{25,38}, :78:19
  assign io_sck = state & (io_CPOL ^ clock);	// Protocol.scala:28:24, :35:{18,38}
  assign io_data_out_valid = _GEN;	// Conditional.scala:40:58, Protocol.scala:41:22, :79:63
  assign io_data_out_bits = _GEN ? miso_dataReg : 32'h0;	// Conditional.scala:40:58, Protocol.scala:30:31, :41:22, :79:63
endmodule

module Spi(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
                io_miso,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error,
                io_cs_n,
                io_sclk,
                io_mosi);

  wire        _spiProtocol_io_data_out_valid;	// Spi.scala:127:29
  wire [31:0] _spiProtocol_io_data_out_bits;	// Spi.scala:127:29
  reg  [31:0] ControlReg;	// Spi.scala:28:29
  reg  [31:0] TxDataReg;	// Spi.scala:29:31
  reg         TxDataValidReg;	// Spi.scala:30:33
  reg  [31:0] RxDataReg;	// Spi.scala:31:31
  reg         RxDataValidReg;	// Spi.scala:32:33
  wire        _T_15 = ~(|(io_req_bits_addrRequest[3:0])) & io_req_bits_isWrite;	// Spi.scala:41:{34,40,48}
  reg  [31:0] io_rsp_bits_dataResponse_REG;	// Spi.scala:44:44
  reg         io_rsp_valid_REG;	// Spi.scala:45:32
  wire        _T_19 = ~(|(io_req_bits_addrRequest[3:0])) & ~io_req_bits_isWrite;	// Spi.scala:41:{34,40}, :51:{44,52,75}
  reg  [31:0] io_rsp_bits_dataResponse_REG_1;	// Spi.scala:52:44
  reg         io_rsp_valid_REG_1;	// Spi.scala:53:32
  wire        _T_23 = io_req_bits_addrRequest[3:0] == 4'h4 & io_req_bits_isWrite;	// Spi.scala:41:34, :59:{44,52}
  reg  [31:0] io_rsp_bits_dataResponse_REG_2;	// Spi.scala:83:44
  wire        _T_27 = io_req_bits_addrRequest[3:0] == 4'h4 & ~io_req_bits_isWrite;	// Spi.scala:41:34, :51:75, :59:44, :89:{44,52}
  reg  [31:0] io_rsp_bits_dataResponse_REG_3;	// Spi.scala:90:44
  reg         io_rsp_valid_REG_3;	// Spi.scala:91:32
  reg  [31:0] io_rsp_bits_dataResponse_REG_4;	// Spi.scala:97:44
  reg  [31:0] io_rsp_bits_dataResponse_REG_5;	// Spi.scala:108:44
  reg  [25:0] spiProtocol_clock_x;	// Spi.scala:113:24
  reg         spiProtocol_clock_x_1;	// Spi.scala:119:24
  wire        _T_32 = io_req_bits_addrRequest[3:0] == 4'h8;	// Spi.scala:41:34, :96:44, :153:39
  reg         io_rsp_bits_error_REG;	// Spi.scala:162:78
  reg         io_rsp_bits_error_REG_1;	// Spi.scala:163:44
  always @(posedge clock) begin
    if (reset) begin
      ControlReg <= 32'h60;	// Spi.scala:28:29
      TxDataReg <= 32'h0;	// Spi.scala:29:31
      TxDataValidReg <= 1'h0;	// Spi.scala:30:33
      RxDataReg <= 32'h0;	// Spi.scala:29:31, :31:31
      RxDataValidReg <= 1'h0;	// Spi.scala:30:33, :32:33
      spiProtocol_clock_x <= 26'h0;	// Spi.scala:113:24
      spiProtocol_clock_x_1 <= 1'h0;	// Spi.scala:30:33, :119:24
    end
    else begin
      automatic logic [7:0] _T_5 = {8{io_req_bits_activeByteLane[0]}};	// Bitwise.scala:72:12, Spi.scala:35:54
      automatic logic [7:0] _T_7 = {8{io_req_bits_activeByteLane[1]}};	// Bitwise.scala:72:12, Spi.scala:35:54
      automatic logic [7:0] _T_9 = {8{io_req_bits_activeByteLane[2]}};	// Bitwise.scala:72:12, Spi.scala:35:54
      automatic logic [7:0] _T_11 = {8{io_req_bits_activeByteLane[3]}};	// Bitwise.scala:72:12, Spi.scala:35:54
      automatic logic       _GEN = _T_15 | _T_19 | ~_T_23;	// Spi.scala:29:31, :41:{48,79}, :51:{52,83}, :59:{52,83}
      ControlReg <= _T_15 & io_req_valid ? io_req_bits_dataRequest & {_T_11, _T_9, _T_7, _T_5} : ControlReg;	// Bitwise.scala:72:12, Spi.scala:28:29, :41:{48,79}, :42:{20,65,78}
      TxDataReg <= _GEN ? TxDataReg : io_req_valid ? io_req_bits_dataRequest & {_T_11, _T_9, _T_7, _T_5} :
                                                32'h0;	// Bitwise.scala:72:12, Spi.scala:29:31, :41:79, :51:83, :80:{25,64,77}
      TxDataValidReg <= _GEN ? TxDataValidReg : io_req_valid;	// Spi.scala:29:31, :30:33, :41:79, :51:83
      RxDataReg <= _spiProtocol_io_data_out_valid ? _spiProtocol_io_data_out_bits : RxDataReg;	// Spi.scala:31:31, :127:29, :137:40, :138:19
      RxDataValidReg <= _spiProtocol_io_data_out_valid | RxDataValidReg;	// Spi.scala:32:33, :127:29, :137:40, :139:24
      spiProtocol_clock_x <= spiProtocol_clock_x == ControlReg[31:6] - 26'h1 ? 26'h0 : spiProtocol_clock_x + 26'h1;	// Spi.scala:28:29, :113:24, :114:{17,20,36}, :117:36, :123:54
      spiProtocol_clock_x_1 <= spiProtocol_clock_x == 26'h0 ^ spiProtocol_clock_x_1;	// Spi.scala:113:24, :117:43, :119:24, :120:17
    end
    io_rsp_bits_dataResponse_REG <= io_req_bits_dataRequest;	// Spi.scala:44:44
    io_rsp_valid_REG <= io_req_valid;	// Spi.scala:45:32
    io_rsp_bits_dataResponse_REG_1 <= ControlReg;	// Spi.scala:28:29, :52:44
    io_rsp_valid_REG_1 <= io_req_valid;	// Spi.scala:53:32
    io_rsp_bits_dataResponse_REG_2 <= io_req_bits_addrRequest;	// Spi.scala:83:44
    io_rsp_bits_dataResponse_REG_3 <= TxDataReg;	// Spi.scala:29:31, :90:44
    io_rsp_valid_REG_3 <= io_req_valid;	// Spi.scala:91:32
    io_rsp_bits_dataResponse_REG_4 <= RxDataReg;	// Spi.scala:31:31, :97:44
    io_rsp_bits_dataResponse_REG_5 <= io_req_bits_addrRequest;	// Spi.scala:108:44
    io_rsp_bits_error_REG <= io_req_valid;	// Spi.scala:162:78
    io_rsp_bits_error_REG_1 <= io_req_valid & ~(io_req_bits_addrRequest[3:0] == 4'h0 | io_req_bits_addrRequest[3:0] ==
                                4'h4 | _T_32);	// Spi.scala:41:{34,40}, :59:44, :153:39, :161:{18,37}, :163:{44,58}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        ControlReg = _RANDOM_0;	// Spi.scala:28:29
        TxDataReg = _RANDOM_1;	// Spi.scala:29:31
        TxDataValidReg = _RANDOM_2[0];	// Spi.scala:30:33
        RxDataReg = {_RANDOM_2[31:1], _RANDOM_3[0]};	// Spi.scala:30:33, :31:31
        RxDataValidReg = _RANDOM_3[1];	// Spi.scala:31:31, :32:33
        io_rsp_bits_dataResponse_REG = {_RANDOM_3[31:2], _RANDOM_4[1:0]};	// Spi.scala:31:31, :44:44
        io_rsp_valid_REG = _RANDOM_4[2];	// Spi.scala:44:44, :45:32
        io_rsp_bits_dataResponse_REG_1 = {_RANDOM_4[31:3], _RANDOM_5[2:0]};	// Spi.scala:44:44, :52:44
        io_rsp_valid_REG_1 = _RANDOM_5[3];	// Spi.scala:52:44, :53:32
        io_rsp_bits_dataResponse_REG_2 = {_RANDOM_5[31:4], _RANDOM_6[3:0]};	// Spi.scala:52:44, :83:44
        io_rsp_bits_dataResponse_REG_3 = {_RANDOM_6[31:5], _RANDOM_7[4:0]};	// Spi.scala:83:44, :90:44
        io_rsp_valid_REG_3 = _RANDOM_7[5];	// Spi.scala:90:44, :91:32
        io_rsp_bits_dataResponse_REG_4 = {_RANDOM_7[31:6], _RANDOM_8[5:0]};	// Spi.scala:90:44, :97:44
        io_rsp_bits_dataResponse_REG_5 = {_RANDOM_8[31:6], _RANDOM_9[5:0]};	// Spi.scala:97:44, :108:44
        spiProtocol_clock_x = _RANDOM_9[31:6];	// Spi.scala:108:44, :113:24
        spiProtocol_clock_x_1 = _RANDOM_10[0];	// Spi.scala:119:24
        io_rsp_bits_error_REG = _RANDOM_10[1];	// Spi.scala:119:24, :162:78
        io_rsp_bits_error_REG_1 = _RANDOM_10[2];	// Spi.scala:119:24, :163:44
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  Protocol spiProtocol (	// Spi.scala:127:29
    .clock             (spiProtocol_clock_x_1),	// Spi.scala:119:24
    .reset             (reset),
    .io_miso           (io_miso),
    .io_data_in_valid  (TxDataValidReg),	// Spi.scala:30:33
    .io_data_in_bits   (TxDataReg),	// Spi.scala:29:31
    .io_CPOL           (ControlReg[1]),	// Spi.scala:28:29, :132:38
    .io_mosi           (io_mosi),
    .io_ss             (io_cs_n),
    .io_sck            (io_sclk),
    .io_data_out_valid (_spiProtocol_io_data_out_valid),
    .io_data_out_bits  (_spiProtocol_io_data_out_bits)
  );
  assign io_rsp_valid = _T_15 ? io_rsp_valid_REG : _T_19 ? io_rsp_valid_REG_1 : _T_23 | (_T_27 ? io_rsp_valid_REG_3
                : RxDataValidReg);	// Spi.scala:32:33, :41:{48,79}, :45:{22,32}, :51:{52,83}, :53:{22,32}, :59:{52,83}, :84:22, :89:{52,83}, :91:{22,32}, :96:83
  assign io_rsp_bits_dataResponse = _T_15 ? io_rsp_bits_dataResponse_REG : _T_19 ? io_rsp_bits_dataResponse_REG_1 : _T_23 ?
                io_rsp_bits_dataResponse_REG_2 : _T_27 ? io_rsp_bits_dataResponse_REG_3 :
                io_req_bits_addrRequest[3:0] == 4'h8 & ~io_req_bits_isWrite ?
                io_rsp_bits_dataResponse_REG_4 : io_rsp_bits_dataResponse_REG_5;	// Spi.scala:41:{34,48,79}, :44:{34,44}, :51:{52,75,83}, :52:{34,44}, :59:{52,83}, :83:{34,44}, :89:{52,83}, :90:{34,44}, :96:{44,52,83}, :97:{34,44}, :108:{34,44}
  assign io_rsp_bits_error = _T_32 & io_req_bits_isWrite ? io_rsp_bits_error_REG : io_rsp_bits_error_REG_1;	// Spi.scala:153:39, :162:{27,49,68,78}, :163:{34,44}
endmodule

module WishboneDevice_3(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input  [3:0]  io_wbMasterReceiver_bits_sel,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output [3:0]  io_reqOut_bits_activeByteLane,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_activeByteLane = io_wbMasterReceiver_bits_sel;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module uartTX(
  input         clock,
                reset,
                io_tx_en,
  input  [7:0]  io_i_TX_Byte,
  input  [15:0] io_CLKS_PER_BIT,
  output        io_o_TX_Serial,
                io_o_TX_Done);

  reg  [2:0]  r_SM_Main;	// uartTX.scala:23:28
  reg  [15:0] r_Clock_Count;	// uartTX.scala:24:32
  reg  [2:0]  r_Bit_Index;	// uartTX.scala:25:30
  reg  [7:0]  r_TX_Data;	// uartTX.scala:26:28
  reg         r_TX_Done;	// uartTX.scala:27:28
  wire        _T = r_SM_Main == 3'h0;	// Conditional.scala:37:30, uartTX.scala:23:28
  wire        _T_2 = r_SM_Main == 3'h1;	// Conditional.scala:37:30, uartTX.scala:23:28, :42:27
  wire        _T_6 = r_SM_Main == 3'h2;	// Conditional.scala:37:30, uartTX.scala:23:28, :56:27
  wire [7:0]  _GEN = r_TX_Data >> r_Bit_Index;	// uartTX.scala:25:30, :26:28, :61:40
  always @(posedge clock) begin
    if (reset) begin
      r_SM_Main <= 3'h0;	// uartTX.scala:23:28
      r_Clock_Count <= 16'h0;	// uartTX.scala:24:32
      r_Bit_Index <= 3'h0;	// uartTX.scala:23:28, :25:30
      r_TX_Data <= 8'h0;	// uartTX.scala:26:28
      r_TX_Done <= 1'h0;	// uartTX.scala:27:28
    end
    else begin
      automatic logic            _T_5;	// uartTX.scala:51:32
      automatic logic            _T_9;	// uartTX.scala:63:32
      automatic logic            _T_10;	// uartTX.scala:68:34
      automatic logic            _T_11;	// Conditional.scala:37:30
      automatic logic            _T_14;	// uartTX.scala:83:32
      automatic logic [7:0][2:0] _GEN_0;	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:23:28, :40:35, :51:54, :63:56, :83:56, :97:23
      _T_5 = r_Clock_Count < io_CLKS_PER_BIT - 16'h1;	// uartTX.scala:24:32, :51:{32,49}
      _T_9 = r_Clock_Count < io_CLKS_PER_BIT - 16'h1;	// uartTX.scala:24:32, :63:{32,50}
      _T_10 = r_Bit_Index != 3'h7;	// uartTX.scala:25:30, :68:34
      _T_11 = r_SM_Main == 3'h3;	// Conditional.scala:37:30, uartTX.scala:23:28, :73:31
      _T_14 = r_Clock_Count < io_CLKS_PER_BIT - 16'h1;	// uartTX.scala:24:32, :83:{32,50}
      _GEN_0 = {{r_SM_Main}, {r_SM_Main}, {r_SM_Main}, {3'h0}, {_T_14 ? 3'h3 : 3'h4}, {_T_9 ? 3'h2 :
                                                {2'h1, ~_T_10}}, {_T_5 ? 3'h1 : 3'h2}, {{2'h0, io_tx_en}}};	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:23:28, :40:35, :42:27, :44:27, :51:{32,54}, :53:27, :56:27, :63:{32,56}, :65:27, :68:{34,40}, :70:31, :73:31, :83:{32,56}, :85:27, :89:27, :97:23
      r_SM_Main <= _GEN_0[r_SM_Main];	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:23:28, :40:35, :51:54, :63:56, :83:56, :97:23
      r_Clock_Count <= _T ? 16'h0 : _T_2 ? (_T_5 ? r_Clock_Count + 16'h1 : 16'h0) : _T_6 ? (_T_9 ? r_Clock_Count +
                                                16'h1 : 16'h0) : _T_11 ? (_T_14 ? r_Clock_Count + 16'h1 : 16'h0) : r_Clock_Count;	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:24:32, :37:27, :51:{32,49,54}, :52:{31,48}, :55:31, :63:{32,56}, :64:{31,48}, :67:31, :83:{32,56}, :84:{31,48}, :88:31
      r_Bit_Index <= _T ? 3'h0 : _T_2 | ~_T_6 | _T_9 ? r_Bit_Index : _T_10 ? r_Bit_Index + 3'h1 : 3'h0;	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:23:28, :25:30, :38:25, :42:27, :63:{32,56}, :68:{34,40}, :69:{33,48}, :72:33
      r_TX_Data <= _T & io_tx_en ? io_i_TX_Byte : r_TX_Data;	// Conditional.scala:37:30, :40:58, uartTX.scala:26:28, :40:35
      r_TX_Done <= ~_T & (_T_2 | _T_6 ? r_TX_Done : _T_11 ? ~_T_14 | r_TX_Done : r_SM_Main == 3'h4 |
                                                r_TX_Done);	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:23:28, :27:28, :36:23, :83:{32,56}, :87:27, :89:27, :96:23
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        r_SM_Main = _RANDOM_0[2:0];	// uartTX.scala:23:28
        r_Clock_Count = _RANDOM_0[18:3];	// uartTX.scala:23:28, :24:32
        r_Bit_Index = _RANDOM_0[21:19];	// uartTX.scala:23:28, :25:30
        r_TX_Data = _RANDOM_0[29:22];	// uartTX.scala:23:28, :26:28
        r_TX_Done = _RANDOM_0[30];	// uartTX.scala:23:28, :27:28
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_o_TX_Serial = _T | ~_T_2 & (~_T_6 | _GEN[0]);	// Conditional.scala:37:30, :39:67, :40:58, uartTX.scala:25:30, :35:28, :49:28, :61:{28,40}, :63:56
  assign io_o_TX_Done = r_TX_Done;	// uartTX.scala:27:28
endmodule

module uartRX(
  input         clock,
                reset,
                io_i_Rx_Serial,
  input  [15:0] io_CLKS_PER_BIT,
  output        io_o_Rx_DV,
  output [7:0]  io_o_Rx_Byte);

  reg        rxReg_REG;	// uartRX.scala:18:32
  reg        rxReg;	// uartRX.scala:18:24
  reg [7:0]  shiftReg;	// uartRX.scala:19:27
  reg [2:0]  r_SM_Main;	// uartRX.scala:21:28
  reg [15:0] r_Clock_Count;	// uartRX.scala:22:32
  reg [2:0]  r_Bit_Index;	// uartRX.scala:23:30
  reg        r_Rx_DV;	// uartRX.scala:24:26
  always @(posedge clock) begin
    if (reset) begin
      rxReg_REG <= 1'h1;	// uartRX.scala:18:32
      rxReg <= 1'h1;	// uartRX.scala:18:{24,32}
      shiftReg <= 8'h0;	// uartRX.scala:19:27
      r_SM_Main <= 3'h0;	// uartRX.scala:21:28
      r_Clock_Count <= 16'h0;	// uartRX.scala:22:32
      r_Bit_Index <= 3'h0;	// uartRX.scala:21:28, :23:30
      r_Rx_DV <= 1'h0;	// uartRX.scala:24:26
    end
    else begin
      automatic logic            _T;	// Conditional.scala:37:30
      automatic logic            _T_2;	// Conditional.scala:37:30
      automatic logic            _T_6;	// uartRX.scala:41:32
      automatic logic            _T_8;	// Conditional.scala:37:30
      automatic logic            _T_11;	// uartRX.scala:55:32
      automatic logic            _T_12;	// uartRX.scala:62:34
      automatic logic            _T_13;	// Conditional.scala:37:30
      automatic logic            _T_16;	// uartRX.scala:74:32
      automatic logic [7:0][2:0] _GEN;	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:21:28, :33:41, :41:62, :55:56, :74:56, :85:23
      _T = r_SM_Main == 3'h0;	// Conditional.scala:37:30, uartRX.scala:21:28
      _T_2 = r_SM_Main == 3'h1;	// Conditional.scala:37:30, uartRX.scala:21:28, :34:27
      _T_6 = r_Clock_Count == (io_CLKS_PER_BIT - 16'h1) / 16'h2;	// uartRX.scala:22:32, :41:{32,52,57}
      _T_8 = r_SM_Main == 3'h2;	// Conditional.scala:37:30, uartRX.scala:21:28, :44:31
      _T_11 = r_Clock_Count < io_CLKS_PER_BIT - 16'h1;	// uartRX.scala:22:32, :55:{32,50}
      _T_12 = r_Bit_Index != 3'h7;	// uartRX.scala:23:30, :62:34
      _T_13 = r_SM_Main == 3'h3;	// Conditional.scala:37:30, uartRX.scala:21:28, :67:31
      _T_16 = r_Clock_Count < io_CLKS_PER_BIT - 16'h1;	// uartRX.scala:22:32, :74:{32,50}
      rxReg_REG <= io_i_Rx_Serial;	// uartRX.scala:18:32
      rxReg <= rxReg_REG;	// uartRX.scala:18:{24,32}
      shiftReg <= _T | _T_2 | ~_T_8 | _T_11 ? shiftReg : {rxReg, shiftReg[7:1]};	// Cat.scala:30:58, Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:18:24, :19:27, :55:{32,56}, :60:49
      _GEN = {{r_SM_Main}, {r_SM_Main}, {r_SM_Main}, {3'h0}, {_T_16 ? 3'h3 : 3'h4}, {_T_11 ? 3'h2 :
                                                {2'h1, ~_T_12}}, {_T_6 ? {1'h0, ~io_i_Rx_Serial, 1'h0} : 3'h1}, {{2'h0, ~io_i_Rx_Serial}}};	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:21:28, :24:26, :33:{33,41}, :34:27, :36:27, :41:{32,62}, :42:{37,45}, :44:31, :46:31, :50:27, :55:{32,56}, :57:27, :62:{34,40}, :64:31, :67:31, :74:{32,56}, :76:27, :80:27, :85:23
      r_SM_Main <= _GEN[r_SM_Main];	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:21:28, :33:41, :41:62, :55:56, :74:56, :85:23
      r_Clock_Count <= _T ? 16'h0 : _T_2 ? (_T_6 ? (io_i_Rx_Serial ? r_Clock_Count : 16'h0) : r_Clock_Count +
                                                16'h1) : _T_8 ? (_T_11 ? r_Clock_Count + 16'h1 : 16'h0) : _T_13 ? (_T_16 ? r_Clock_Count +
                                                16'h1 : 16'h0) : r_Clock_Count;	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:22:32, :29:27, :41:{32,52,62}, :42:45, :43:35, :49:{31,48}, :55:{32,56}, :56:{31,48}, :59:31, :74:{32,56}, :75:{31,48}, :79:31
      r_Bit_Index <= _T ? 3'h0 : _T_2 | ~_T_8 | _T_11 ? r_Bit_Index : _T_12 ? r_Bit_Index + 3'h1 : 3'h0;	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:19:27, :21:28, :23:30, :30:25, :34:27, :55:{32,56}, :62:{34,40}, :63:{33,48}, :66:33
      r_Rx_DV <= ~_T & (_T_2 | _T_8 ? r_Rx_DV : _T_13 ? ~_T_16 | r_Rx_DV : r_SM_Main != 3'h4 & r_Rx_DV);	// Conditional.scala:37:30, :39:67, :40:58, uartRX.scala:21:28, :24:26, :28:21, :74:{32,56}, :78:25, :80:27, :86:21
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        rxReg_REG = _RANDOM_0[0];	// uartRX.scala:18:32
        rxReg = _RANDOM_0[1];	// uartRX.scala:18:{24,32}
        shiftReg = _RANDOM_0[9:2];	// uartRX.scala:18:32, :19:27
        r_SM_Main = _RANDOM_0[12:10];	// uartRX.scala:18:32, :21:28
        r_Clock_Count = _RANDOM_0[28:13];	// uartRX.scala:18:32, :22:32
        r_Bit_Index = _RANDOM_0[31:29];	// uartRX.scala:18:32, :23:30
        r_Rx_DV = _RANDOM_1[0];	// uartRX.scala:24:26
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_o_Rx_DV = r_Rx_DV;	// uartRX.scala:24:26
  assign io_o_Rx_Byte = shiftReg;	// uartRX.scala:19:27
endmodule

module UartTOP(
  input         clock,
                reset,
                io_ren,
                io_we,
  input  [31:0] io_wdata,
  input  [7:0]  io_addr,
  input         io_rx_i,
  output [31:0] io_rdata,
  output        io_tx_o,
                io_intr_tx);

  wire        _uart_rx_io_o_Rx_DV;	// UartTOP.scala:69:25
  wire [7:0]  _uart_rx_io_o_Rx_Byte;	// UartTOP.scala:69:25
  reg  [15:0] control;	// UartTOP.scala:29:26
  reg  [7:0]  tx;	// UartTOP.scala:30:21
  reg  [7:0]  rx;	// UartTOP.scala:31:21
  reg  [7:0]  rx_reg;	// UartTOP.scala:32:25
  reg         rx_en;	// UartTOP.scala:33:24
  reg         tx_en;	// UartTOP.scala:34:24
  reg         rx_status;	// UartTOP.scala:35:28
  reg         rx_clr;	// UartTOP.scala:36:25
  reg         rx_done;	// UartTOP.scala:37:26
  always @(posedge clock) begin
    if (reset) begin
      control <= 16'h0;	// UartTOP.scala:29:26
      tx <= 8'h0;	// UartTOP.scala:30:21
      rx <= 8'h0;	// UartTOP.scala:30:21, :31:21
      rx_reg <= 8'h0;	// UartTOP.scala:30:21, :32:25
      rx_en <= 1'h0;	// UartTOP.scala:33:24
      tx_en <= 1'h0;	// UartTOP.scala:33:24, :34:24
      rx_status <= 1'h0;	// UartTOP.scala:33:24, :35:28
      rx_clr <= 1'h1;	// UartTOP.scala:36:25
      rx_done <= 1'h0;	// UartTOP.scala:33:24, :37:26
    end
    else begin
      automatic logic _T_1 = ~io_ren & io_we;	// UartTOP.scala:39:{10,20}
      automatic logic _T_2 = io_addr == 8'h0;	// UartTOP.scala:30:21, :40:22
      automatic logic _T_3 = io_addr == 8'h4;	// UartTOP.scala:42:28
      automatic logic _T_4 = io_addr == 8'hC;	// UartTOP.scala:44:28
      automatic logic _T_5 = io_addr == 8'h10;	// UartTOP.scala:46:28
      automatic logic _T_6 = io_addr == 8'h18;	// UartTOP.scala:48:28
      control <= _T_1 & _T_2 ? io_wdata[15:0] : control;	// UartTOP.scala:29:26, :39:{20,29}, :40:{22,36}, :41:32
      tx <= ~_T_1 | _T_2 ? tx : _T_3 ? io_wdata[7:0] : _T_4 | _T_5 | _T_6 ? tx : 8'h0;	// UartTOP.scala:30:21, :39:{20,29}, :40:{22,36}, :42:{28,40}, :43:{16,27}, :44:{28,38}, :46:{28,38}, :48:28
      rx <= _uart_rx_io_o_Rx_Byte;	// UartTOP.scala:31:21, :69:25
      rx_reg <= rx_done ? rx : rx_reg;	// UartTOP.scala:31:21, :32:25, :37:26, :81:18, :82:16
      rx_en <= ~_T_1 | _T_2 | _T_3 ? rx_en : _T_4 ? io_wdata[0] : (_T_5 | _T_6) & rx_en;	// UartTOP.scala:30:21, :33:24, :39:{20,29}, :40:{22,36}, :42:28, :44:{28,38}, :45:{19,30}, :46:{28,38}, :48:{28,38}
      tx_en <= ~_T_1 | _T_2 | _T_3 | _T_4 ? tx_en : _T_5 ? io_wdata[0] : _T_6 & tx_en;	// UartTOP.scala:30:21, :34:24, :39:{20,29}, :40:{22,36}, :42:28, :44:28, :46:{28,38}, :47:{19,30}, :48:{28,38}, :54:19
      rx_status <= rx_done | rx_clr & rx_status;	// UartTOP.scala:35:28, :36:25, :37:26, :81:18, :83:19, :84:26, :85:19
      rx_clr <= ~_T_1 | _T_2 | _T_3 | _T_4 | _T_5 ? rx_clr : _T_6 & io_wdata[0];	// UartTOP.scala:30:21, :36:25, :39:{20,29}, :40:{22,36}, :42:28, :44:28, :46:28, :48:{28,38}, :49:{20,31}, :55:20
      rx_done <= _uart_rx_io_o_Rx_DV;	// UartTOP.scala:37:26, :69:25
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        control = _RANDOM_0[15:0];	// UartTOP.scala:29:26
        tx = _RANDOM_0[23:16];	// UartTOP.scala:29:26, :30:21
        rx = _RANDOM_0[31:24];	// UartTOP.scala:29:26, :31:21
        rx_reg = _RANDOM_1[7:0];	// UartTOP.scala:32:25
        rx_en = _RANDOM_1[8];	// UartTOP.scala:32:25, :33:24
        tx_en = _RANDOM_1[9];	// UartTOP.scala:32:25, :34:24
        rx_status = _RANDOM_1[10];	// UartTOP.scala:32:25, :35:28
        rx_clr = _RANDOM_1[11];	// UartTOP.scala:32:25, :36:25
        rx_done = _RANDOM_1[12];	// UartTOP.scala:32:25, :37:26
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  uartTX uart_tx (	// UartTOP.scala:60:25
    .clock           (clock),
    .reset           (reset),
    .io_tx_en        (tx_en),	// UartTOP.scala:34:24
    .io_i_TX_Byte    (tx),	// UartTOP.scala:30:21
    .io_CLKS_PER_BIT (control),	// UartTOP.scala:29:26
    .io_o_TX_Serial  (io_tx_o),
    .io_o_TX_Done    (io_intr_tx)
  );
  uartRX uart_rx (	// UartTOP.scala:69:25
    .clock           (clock),
    .reset           (reset),
    .io_i_Rx_Serial  (~rx_en | io_rx_i),	// UartTOP.scala:33:24, :70:16, :71:32, :73:32
    .io_CLKS_PER_BIT (control),	// UartTOP.scala:29:26
    .io_o_Rx_DV      (_uart_rx_io_o_Rx_DV),
    .io_o_Rx_Byte    (_uart_rx_io_o_Rx_Byte)
  );
  assign io_rdata = {24'h0, io_addr == 8'h14 ? {7'h0, rx_status} : io_addr == 8'h8 ? rx_reg : 8'h0};	// UartTOP.scala:30:21, :32:25, :35:28, :88:{14,20,29,55,64}
endmodule

module uart(
  input         clock,
                reset,
                io_request_valid,
  input  [31:0] io_request_bits_addrRequest,
                io_request_bits_dataRequest,
  input         io_request_bits_isWrite,
                io_cio_uart_rx_i,
  output        io_response_valid,
  output [31:0] io_response_bits_dataResponse,
  output        io_response_bits_error,
                io_cio_uart_tx_o,
                io_cio_uart_intr_tx_o);

  wire [31:0] _uart_top_io_rdata;	// uart.scala:57:27
  wire        _uart_top_io_intr_tx;	// uart.scala:57:27
  wire        _write_register_T_1 = io_request_valid & io_request_bits_isWrite;	// uart.scala:64:26
  wire        _read_register_T_2 = io_request_valid & ~io_request_bits_isWrite;	// uart.scala:65:{25,45}
  reg  [31:0] io_response_bits_dataResponse_REG;	// uart.scala:73:45
  reg         io_response_valid_REG;	// uart.scala:74:33
  reg         io_response_bits_error_REG;	// uart.scala:75:38
  always @(posedge clock) begin
    io_response_bits_dataResponse_REG <= _uart_top_io_rdata;	// uart.scala:57:27, :73:45
    io_response_valid_REG <= _write_register_T_1 | _read_register_T_2;	// uart.scala:64:26, :65:25, :74:{33,53}
    io_response_bits_error_REG <= _uart_top_io_intr_tx;	// uart.scala:57:27, :75:38
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        io_response_bits_dataResponse_REG = _RANDOM_0;	// uart.scala:73:45
        io_response_valid_REG = _RANDOM_1[0];	// uart.scala:74:33
        io_response_bits_error_REG = _RANDOM_1[1];	// uart.scala:74:33, :75:38
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  UartTOP uart_top (	// uart.scala:57:27
    .clock      (clock),
    .reset      (reset),
    .io_ren     (_read_register_T_2),	// uart.scala:65:25
    .io_we      (_write_register_T_1),	// uart.scala:64:26
    .io_wdata   (io_request_bits_dataRequest),
    .io_addr    (io_request_bits_addrRequest[7:0]),	// uart.scala:67:44
    .io_rx_i    (io_cio_uart_rx_i),
    .io_rdata   (_uart_top_io_rdata),
    .io_tx_o    (io_cio_uart_tx_o),
    .io_intr_tx (_uart_top_io_intr_tx)
  );
  assign io_response_valid = io_response_valid_REG;	// uart.scala:74:33
  assign io_response_bits_dataResponse = io_response_bits_dataResponse_REG;	// uart.scala:73:45
  assign io_response_bits_error = io_response_bits_error_REG;	// uart.scala:75:38
  assign io_cio_uart_intr_tx_o = _uart_top_io_intr_tx;	// uart.scala:57:27
endmodule

module WishboneDevice_4(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module Timer(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error,
                io_cio_timer_intr_cmp,
                io_cio_timer_intr_ovf);

  reg  [31:0] TimerReg;	// Timer.scala:23:29
  reg  [31:0] ControlReg;	// Timer.scala:24:29
  reg  [31:0] CompareReg;	// Timer.scala:25:29
  reg  [31:0] PreCountReg;	// Timer.scala:26:29
  wire        _T_15 = io_req_bits_addrRequest[3:0] == 4'h0 & ~io_req_bits_isWrite;	// Timer.scala:36:{34,40,48,71}
  reg  [31:0] io_rsp_bits_dataResponse_REG;	// Timer.scala:37:44
  reg         io_rsp_valid_REG;	// Timer.scala:38:32
  wire        _T_19 = io_req_bits_addrRequest[3:0] == 4'h4 & io_req_bits_isWrite;	// Timer.scala:36:34, :40:{45,53}
  reg  [31:0] io_rsp_bits_dataResponse_REG_1;	// Timer.scala:43:44
  reg         io_rsp_valid_REG_1;	// Timer.scala:44:32
  wire        _T_23 = io_req_bits_addrRequest[3:0] == 4'h4 & ~io_req_bits_isWrite;	// Timer.scala:36:{34,71}, :40:45, :46:{45,53}
  reg  [31:0] io_rsp_bits_dataResponse_REG_2;	// Timer.scala:47:44
  reg         io_rsp_valid_REG_2;	// Timer.scala:48:32
  wire        _T_27 = io_req_bits_addrRequest[3:0] == 4'h8 & io_req_bits_isWrite;	// Timer.scala:36:34, :50:{45,53}
  reg  [31:0] io_rsp_bits_dataResponse_REG_3;	// Timer.scala:53:44
  reg         io_rsp_valid_REG_3;	// Timer.scala:54:32
  wire        _T_31 = io_req_bits_addrRequest[3:0] == 4'h8 & ~io_req_bits_isWrite;	// Timer.scala:36:{34,71}, :50:45, :56:{45,53}
  reg  [31:0] io_rsp_bits_dataResponse_REG_4;	// Timer.scala:57:44
  reg         io_rsp_valid_REG_4;	// Timer.scala:58:32
  reg  [31:0] io_rsp_bits_dataResponse_REG_5;	// Timer.scala:61:44
  reg         io_rsp_valid_REG_5;	// Timer.scala:62:32
  reg  [31:0] io_rsp_bits_dataResponse_REG_6;	// Timer.scala:66:44
  wire        _T_44 = io_req_bits_addrRequest[3:0] == 4'h0;	// Timer.scala:36:{34,40}, :102:39
  wire        _T_46 = io_req_bits_addrRequest[3:0] == 4'hC;	// Timer.scala:36:34, :102:39
  reg         io_rsp_bits_error_REG;	// Timer.scala:111:78
  reg         io_rsp_bits_error_REG_1;	// Timer.scala:112:84
  reg         io_rsp_bits_error_REG_2;	// Timer.scala:113:44
  always @(posedge clock) begin
    if (reset) begin
      TimerReg <= 32'h0;	// Timer.scala:23:29
      ControlReg <= 32'h0;	// Timer.scala:23:29, :24:29
      CompareReg <= 32'h0;	// Timer.scala:23:29, :25:29
      PreCountReg <= 32'h0;	// Timer.scala:23:29, :26:29
    end
    else begin
      automatic logic [7:0]  _T_5 = {8{io_req_bits_activeByteLane[0]}};	// Bitwise.scala:72:12, Timer.scala:29:54
      automatic logic [7:0]  _T_7 = {8{io_req_bits_activeByteLane[1]}};	// Bitwise.scala:72:12, Timer.scala:29:54
      automatic logic [7:0]  _T_9 = {8{io_req_bits_activeByteLane[2]}};	// Bitwise.scala:72:12, Timer.scala:29:54
      automatic logic [7:0]  _T_11 = {8{io_req_bits_activeByteLane[3]}};	// Bitwise.scala:72:12, Timer.scala:29:54
      automatic logic        _T_37;	// Timer.scala:73:30
      automatic logic        _T_40;	// Timer.scala:76:39
      automatic logic [31:0] _GEN;	// Timer.scala:79:27
      automatic logic        _T_42;	// Timer.scala:79:41
      _T_37 = PreCountReg == 32'h0 & ControlReg[0];	// Timer.scala:23:29, :24:29, :26:29, :69:37, :73:{22,30}
      _T_40 = TimerReg == CompareReg | &TimerReg;	// Timer.scala:23:29, :25:29, :76:{24,39,51}
      _GEN = {1'h0, ControlReg[31:1]};	// Timer.scala:24:29, :32:18, :70:40, :79:27
      _T_42 = PreCountReg == _GEN & ControlReg[0];	// Timer.scala:24:29, :26:29, :69:37, :79:{27,41}
      TimerReg <= _T_37 ? TimerReg : _T_40 ? 32'h0 : _T_42 ? TimerReg + 32'h1 : TimerReg;	// Timer.scala:23:29, :73:{30,40}, :74:36, :76:{39,69}, :77:18, :79:{41,51}, :80:{18,30}
      ControlReg <= _T_15 | ~(_T_19 & io_req_valid) ? ControlReg : io_req_bits_dataRequest & {_T_11, _T_9,
                                                _T_7, _T_5};	// Bitwise.scala:72:12, Timer.scala:24:29, :36:{48,79}, :40:{53,84}, :41:{20,65,78}
      CompareReg <= _T_15 | _T_19 | _T_23 | ~(_T_27 & io_req_valid) ? CompareReg : io_req_bits_dataRequest &
                                                {_T_11, _T_9, _T_7, _T_5};	// Bitwise.scala:72:12, Timer.scala:25:29, :36:{48,79}, :40:{53,84}, :46:{53,84}, :50:{53,84}, :51:{20,65,78}
      PreCountReg <= _T_37 ? PreCountReg + 32'h1 : _T_40 ? PreCountReg : _T_42 ? 32'h0 : PreCountReg < _GEN ?
                                                PreCountReg + 32'h1 : PreCountReg;	// Timer.scala:23:29, :26:29, :73:{30,40}, :74:{21,36}, :76:{39,69}, :79:{27,41,51}, :81:21, :82:{28,40}, :83:{21,36}
    end
    io_rsp_bits_dataResponse_REG <= TimerReg;	// Timer.scala:23:29, :37:44
    io_rsp_valid_REG <= io_req_valid;	// Timer.scala:38:32
    io_rsp_bits_dataResponse_REG_1 <= io_req_bits_dataRequest;	// Timer.scala:43:44
    io_rsp_valid_REG_1 <= io_req_valid;	// Timer.scala:44:32
    io_rsp_bits_dataResponse_REG_2 <= ControlReg;	// Timer.scala:24:29, :47:44
    io_rsp_valid_REG_2 <= io_req_valid;	// Timer.scala:48:32
    io_rsp_bits_dataResponse_REG_3 <= io_req_bits_dataRequest;	// Timer.scala:53:44
    io_rsp_valid_REG_3 <= io_req_valid;	// Timer.scala:54:32
    io_rsp_bits_dataResponse_REG_4 <= CompareReg;	// Timer.scala:25:29, :57:44
    io_rsp_valid_REG_4 <= io_req_valid;	// Timer.scala:58:32
    io_rsp_bits_dataResponse_REG_5 <= PreCountReg;	// Timer.scala:26:29, :61:44
    io_rsp_valid_REG_5 <= io_req_valid;	// Timer.scala:62:32
    io_rsp_bits_dataResponse_REG_6 <= io_req_bits_addrRequest;	// Timer.scala:66:44
    io_rsp_bits_error_REG <= io_req_valid;	// Timer.scala:111:78
    io_rsp_bits_error_REG_1 <= io_req_valid;	// Timer.scala:112:84
    io_rsp_bits_error_REG_2 <= io_req_valid & ~(_T_44 | io_req_bits_addrRequest[3:0] == 4'h4 |
                                io_req_bits_addrRequest[3:0] == 4'h8 | _T_46);	// Timer.scala:36:34, :40:45, :50:45, :102:39, :110:{18,37}, :113:{44,58}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        TimerReg = _RANDOM_0;	// Timer.scala:23:29
        ControlReg = _RANDOM_1;	// Timer.scala:24:29
        CompareReg = _RANDOM_2;	// Timer.scala:25:29
        PreCountReg = _RANDOM_3;	// Timer.scala:26:29
        io_rsp_bits_dataResponse_REG = _RANDOM_4;	// Timer.scala:37:44
        io_rsp_valid_REG = _RANDOM_5[0];	// Timer.scala:38:32
        io_rsp_bits_dataResponse_REG_1 = {_RANDOM_5[31:1], _RANDOM_6[0]};	// Timer.scala:38:32, :43:44
        io_rsp_valid_REG_1 = _RANDOM_6[1];	// Timer.scala:43:44, :44:32
        io_rsp_bits_dataResponse_REG_2 = {_RANDOM_6[31:2], _RANDOM_7[1:0]};	// Timer.scala:43:44, :47:44
        io_rsp_valid_REG_2 = _RANDOM_7[2];	// Timer.scala:47:44, :48:32
        io_rsp_bits_dataResponse_REG_3 = {_RANDOM_7[31:3], _RANDOM_8[2:0]};	// Timer.scala:47:44, :53:44
        io_rsp_valid_REG_3 = _RANDOM_8[3];	// Timer.scala:53:44, :54:32
        io_rsp_bits_dataResponse_REG_4 = {_RANDOM_8[31:4], _RANDOM_9[3:0]};	// Timer.scala:53:44, :57:44
        io_rsp_valid_REG_4 = _RANDOM_9[4];	// Timer.scala:57:44, :58:32
        io_rsp_bits_dataResponse_REG_5 = {_RANDOM_9[31:5], _RANDOM_10[4:0]};	// Timer.scala:57:44, :61:44
        io_rsp_valid_REG_5 = _RANDOM_10[5];	// Timer.scala:61:44, :62:32
        io_rsp_bits_dataResponse_REG_6 = {_RANDOM_10[31:6], _RANDOM_11[5:0]};	// Timer.scala:61:44, :66:44
        io_rsp_bits_error_REG = _RANDOM_11[6];	// Timer.scala:66:44, :111:78
        io_rsp_bits_error_REG_1 = _RANDOM_11[7];	// Timer.scala:66:44, :112:84
        io_rsp_bits_error_REG_2 = _RANDOM_11[8];	// Timer.scala:66:44, :113:44
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_rsp_valid = _T_15 ? io_rsp_valid_REG : _T_19 ? io_rsp_valid_REG_1 : _T_23 ? io_rsp_valid_REG_2 : _T_27
                ? io_rsp_valid_REG_3 : _T_31 ? io_rsp_valid_REG_4 : io_rsp_valid_REG_5;	// Timer.scala:36:{48,79}, :38:{22,32}, :40:{53,84}, :44:{22,32}, :46:{53,84}, :48:{22,32}, :50:{53,84}, :54:{22,32}, :56:{53,84}, :58:{22,32}, :60:84, :62:32
  assign io_rsp_bits_dataResponse = _T_15 ? io_rsp_bits_dataResponse_REG : _T_19 ? io_rsp_bits_dataResponse_REG_1 : _T_23 ?
                io_rsp_bits_dataResponse_REG_2 : _T_27 ? io_rsp_bits_dataResponse_REG_3 : _T_31 ?
                io_rsp_bits_dataResponse_REG_4 : io_req_bits_addrRequest[3:0] == 4'h8 &
                ~io_req_bits_isWrite ? io_rsp_bits_dataResponse_REG_5 : io_rsp_bits_dataResponse_REG_6;	// Timer.scala:36:{34,48,71,79}, :37:{34,44}, :40:{53,84}, :43:{34,44}, :46:{53,84}, :47:{34,44}, :50:{45,53,84}, :53:{34,44}, :56:{53,84}, :57:{34,44}, :60:{45,53,84}, :61:{34,44}, :66:{34,44}
  assign io_rsp_bits_error = _T_44 & io_req_bits_isWrite ? io_rsp_bits_error_REG : _T_46 & io_req_bits_isWrite ?
                io_rsp_bits_error_REG_1 : io_rsp_bits_error_REG_2;	// Timer.scala:102:39, :111:{27,49,68,78}, :112:{33,55,74,84}, :113:{34,44}
  assign io_cio_timer_intr_cmp = ControlReg[0] & TimerReg == CompareReg;	// Timer.scala:23:29, :24:29, :25:29, :69:37, :87:{33,51}
  assign io_cio_timer_intr_ovf = ControlReg[0] & (&TimerReg);	// Timer.scala:23:29, :24:29, :69:37, :88:{33,51}
endmodule

module WishboneDevice_5(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input  [3:0]  io_wbMasterReceiver_bits_sel,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output [3:0]  io_reqOut_bits_activeByteLane,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_activeByteLane = io_wbMasterReceiver_bits_sel;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module Protocol_1(
  input         clock,
                reset,
                io_miso,
                io_data_in_valid,
  input  [31:0] io_data_in_bits,
  input         io_CPOL,
  output        io_mosi,
                io_ss,
                io_sck,
                io_data_out_valid,
  output [31:0] io_data_out_bits);

  reg         state;	// Protocol.scala:28:24
  reg  [31:0] miso_dataReg;	// Protocol.scala:30:31
  reg  [6:0]  count;	// Protocol.scala:31:24
  reg  [63:0] dataReg;	// Protocol.scala:32:26
  wire        _T_2 = count == 7'h40;	// Protocol.scala:31:24, :60:25
  reg  [6:0]  count1;	// Protocol.scala:75:25
  wire        _T_4 = count1 == 7'h40;	// Protocol.scala:60:25, :75:25, :79:26
  wire        _GEN = state & _T_4;	// Conditional.scala:40:58, Protocol.scala:28:24, :41:22, :79:{26,63}
  always @(posedge clock) begin
    if (reset) begin
      state <= 1'h0;	// Protocol.scala:28:24
      miso_dataReg <= 32'h0;	// Protocol.scala:30:31
      count <= 7'h0;	// Protocol.scala:31:24
      dataReg <= 64'h0;	// Protocol.scala:32:26
      count1 <= 7'h0;	// Protocol.scala:31:24, :75:25
    end
    else begin
      state <= state ? (~state | ~_T_2) & state : io_data_in_valid | state;	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :49:59, :51:23, :60:{25,38}, :63:23
      miso_dataReg <= ~state | _T_4 ? miso_dataReg : {miso_dataReg[30:0], io_miso};	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :30:31, :60:38, :79:{26,63}, :84:30
      count <= state ? (_T_2 ? 7'h0 : count + 7'h1) : count;	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :31:24, :60:{25,38}, :64:23, :69:{23,32}
      dataReg <= state ? (~state | _T_2 ? dataReg : {dataReg[62:0], 1'h0}) : io_data_in_valid ?
                                                {io_data_in_bits, 32'h0} : dataReg;	// Cat.scala:30:58, Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :30:31, :32:26, :49:59, :50:25, :60:{25,38}, :68:25
      count1 <= state ? (_T_4 ? 7'h0 : count1 + 7'h1) : count1;	// Conditional.scala:40:58, Protocol.scala:28:24, :31:24, :69:32, :75:25, :79:{26,63}, :82:24, :85:{24,34}
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        state = _RANDOM_0[0];	// Protocol.scala:28:24
        miso_dataReg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// Protocol.scala:28:24, :30:31
        count = _RANDOM_1[7:1];	// Protocol.scala:30:31, :31:24
        dataReg = {_RANDOM_1[31:8], _RANDOM_2, _RANDOM_3[7:0]};	// Protocol.scala:30:31, :32:26
        count1 = _RANDOM_3[14:8];	// Protocol.scala:32:26, :75:25
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_mosi = state & ~_T_2 & dataReg[63];	// Conditional.scala:39:67, :40:58, Protocol.scala:28:24, :32:26, :43:13, :60:{25,38}, :63:23, :67:35
  assign io_ss = ~state & (~state | ~state | _T_2);	// Conditional.scala:37:30, :39:67, :40:58, Protocol.scala:28:24, :42:11, :60:{25,38}, :78:19
  assign io_sck = state & (io_CPOL ^ clock);	// Protocol.scala:28:24, :35:{18,38}
  assign io_data_out_valid = _GEN;	// Conditional.scala:40:58, Protocol.scala:41:22, :79:63
  assign io_data_out_bits = _GEN ? miso_dataReg : 32'h0;	// Conditional.scala:40:58, Protocol.scala:30:31, :41:22, :79:63
endmodule

module SpiFlash(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
                io_miso,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error,
                io_cs_n,
                io_sclk,
                io_mosi);

  wire        _spiProtocol_io_data_out_valid;	// SpiFlash.scala:126:29
  wire [31:0] _spiProtocol_io_data_out_bits;	// SpiFlash.scala:126:29
  reg  [31:0] ControlReg;	// SpiFlash.scala:28:29
  reg  [31:0] TxDataReg;	// SpiFlash.scala:29:31
  reg         TxDataValidReg;	// SpiFlash.scala:30:33
  reg  [31:0] RxDataReg;	// SpiFlash.scala:31:31
  reg         RxDataValidReg;	// SpiFlash.scala:32:33
  wire        _T_15 = ~(|(io_req_bits_addrRequest[3:0])) & io_req_bits_isWrite;	// SpiFlash.scala:41:{34,40,48}
  reg  [31:0] io_rsp_bits_dataResponse_REG;	// SpiFlash.scala:44:44
  reg         io_rsp_valid_REG;	// SpiFlash.scala:45:32
  wire        _T_19 = ~(|(io_req_bits_addrRequest[3:0])) & ~io_req_bits_isWrite;	// SpiFlash.scala:41:{34,40}, :51:{44,52,75}
  reg  [31:0] io_rsp_bits_dataResponse_REG_1;	// SpiFlash.scala:52:44
  reg         io_rsp_valid_REG_1;	// SpiFlash.scala:53:32
  wire        _T_23 = io_req_bits_addrRequest[3:0] == 4'h4 & io_req_bits_isWrite;	// SpiFlash.scala:41:34, :59:{44,52}
  reg  [31:0] io_rsp_bits_dataResponse_REG_2;	// SpiFlash.scala:82:44
  wire        _T_37 = io_req_bits_addrRequest[3:0] == 4'h4 & ~io_req_bits_isWrite;	// SpiFlash.scala:41:34, :51:75, :59:44, :88:{44,52}
  reg  [31:0] io_rsp_bits_dataResponse_REG_3;	// SpiFlash.scala:89:44
  reg         io_rsp_valid_REG_3;	// SpiFlash.scala:90:32
  reg  [31:0] io_rsp_bits_dataResponse_REG_4;	// SpiFlash.scala:96:44
  reg  [31:0] io_rsp_bits_dataResponse_REG_5;	// SpiFlash.scala:107:44
  reg  [25:0] spiProtocol_clock_x;	// SpiFlash.scala:112:24
  reg         spiProtocol_clock_x_1;	// SpiFlash.scala:118:24
  wire        _T_42 = io_req_bits_addrRequest[3:0] == 4'h8;	// SpiFlash.scala:41:34, :95:44, :152:39
  reg         io_rsp_bits_error_REG;	// SpiFlash.scala:161:78
  reg         io_rsp_bits_error_REG_1;	// SpiFlash.scala:162:44
  always @(posedge clock) begin
    if (reset) begin
      ControlReg <= 32'h60;	// SpiFlash.scala:28:29
      TxDataReg <= 32'h0;	// SpiFlash.scala:29:31
      TxDataValidReg <= 1'h0;	// SpiFlash.scala:30:33
      RxDataReg <= 32'h0;	// SpiFlash.scala:29:31, :31:31
      RxDataValidReg <= 1'h0;	// SpiFlash.scala:30:33, :32:33
      spiProtocol_clock_x <= 26'h0;	// SpiFlash.scala:112:24
      spiProtocol_clock_x_1 <= 1'h0;	// SpiFlash.scala:30:33, :118:24
    end
    else begin
      automatic logic [7:0]       _T_5 = {8{io_req_bits_activeByteLane[0]}};	// Bitwise.scala:72:12, SpiFlash.scala:35:54
      automatic logic [7:0]       _T_7 = {8{io_req_bits_activeByteLane[1]}};	// Bitwise.scala:72:12, SpiFlash.scala:35:54
      automatic logic [7:0]       _T_9 = {8{io_req_bits_activeByteLane[2]}};	// Bitwise.scala:72:12, SpiFlash.scala:35:54
      automatic logic [7:0]       _T_11 = {8{io_req_bits_activeByteLane[3]}};	// Bitwise.scala:72:12, SpiFlash.scala:35:54
      automatic logic [23:0]      _GEN = {_T_9, _T_7, _T_5};	// Bitwise.scala:72:12, SpiFlash.scala:61:100
      automatic logic             _GEN_0 = _T_15 | _T_19 | ~_T_23;	// SpiFlash.scala:29:31, :41:{48,79}, :51:{52,83}, :59:{52,83}
      automatic logic [7:0][31:0] _GEN_1;	// SpiFlash.scala:29:31, :60:{30,38}, :61:23, :64:{35,43}, :65:23, :68:{35,43}, :69:23, :72:{35,43}, :73:23, :76:{35,43}, :77:23
      automatic logic [7:0]       _GEN_2;	// SpiFlash.scala:60:{30,38}, :62:28, :64:43, :66:28, :68:43
      ControlReg <= _T_15 & io_req_valid ? io_req_bits_dataRequest & {_T_11, _T_9, _T_7, _T_5} : ControlReg;	// Bitwise.scala:72:12, SpiFlash.scala:28:29, :41:{48,79}, :42:{20,65,78}
      _GEN_1 = {{TxDataReg}, {TxDataReg}, {TxDataReg}, {{5'h0, io_req_valid, 26'h0}}, {io_req_valid ?
                                                io_req_bits_dataRequest & {_T_11, _T_9, _T_7, _T_5} : 32'h0}, {{6'h0, io_req_valid ? {2'h2,
                                                io_req_bits_dataRequest[23:0] & _GEN} : 26'h0}}, {{5'h0, io_req_valid ? 27'h6000000 :
                                                27'h0}}, {{6'h0, io_req_valid ? {2'h3, io_req_bits_dataRequest[23:0] & _GEN} : 26'h0}}};	// Bitwise.scala:72:12, Cat.scala:30:58, SpiFlash.scala:29:31, :60:{30,38}, :61:{23,29,87,100}, :64:{35,43}, :65:{23,29}, :68:{35,43}, :69:{23,29,87}, :72:{35,43}, :73:{23,29,68,81}, :76:{35,43}, :77:23, :112:24
      TxDataReg <= _GEN_0 ? TxDataReg : _GEN_1[ControlReg[4:2]];	// SpiFlash.scala:28:29, :29:31, :41:79, :51:83, :60:{24,30,38}, :61:23, :64:{35,43}, :65:23, :68:{35,43}, :69:23, :72:{35,43}, :73:23, :76:{35,43}, :77:23
      _GEN_2 = {{TxDataValidReg}, {TxDataValidReg}, {TxDataValidReg}, {io_req_valid}, {io_req_valid},
                                                {io_req_valid}, {io_req_valid}, {io_req_valid}};	// SpiFlash.scala:30:33, :60:{30,38}, :62:28, :64:43, :66:28, :68:43
      TxDataValidReg <= _GEN_0 ? TxDataValidReg : _GEN_2[ControlReg[4:2]];	// SpiFlash.scala:28:29, :29:31, :30:33, :41:79, :51:83, :60:{24,30,38}, :62:28, :64:43, :66:28, :68:43
      RxDataReg <= _spiProtocol_io_data_out_valid ? _spiProtocol_io_data_out_bits : RxDataReg;	// SpiFlash.scala:31:31, :126:29, :136:40, :137:19
      RxDataValidReg <= _spiProtocol_io_data_out_valid | RxDataValidReg;	// SpiFlash.scala:32:33, :126:29, :136:40, :138:24
      spiProtocol_clock_x <= spiProtocol_clock_x == ControlReg[31:6] - 26'h1 ? 26'h0 : spiProtocol_clock_x + 26'h1;	// SpiFlash.scala:28:29, :112:24, :113:{17,20,36}, :116:36, :122:54
      spiProtocol_clock_x_1 <= spiProtocol_clock_x == 26'h0 ^ spiProtocol_clock_x_1;	// SpiFlash.scala:112:24, :116:43, :118:24, :119:17
    end
    io_rsp_bits_dataResponse_REG <= io_req_bits_dataRequest;	// SpiFlash.scala:44:44
    io_rsp_valid_REG <= io_req_valid;	// SpiFlash.scala:45:32
    io_rsp_bits_dataResponse_REG_1 <= ControlReg;	// SpiFlash.scala:28:29, :52:44
    io_rsp_valid_REG_1 <= io_req_valid;	// SpiFlash.scala:53:32
    io_rsp_bits_dataResponse_REG_2 <= io_req_bits_addrRequest;	// SpiFlash.scala:82:44
    io_rsp_bits_dataResponse_REG_3 <= TxDataReg;	// SpiFlash.scala:29:31, :89:44
    io_rsp_valid_REG_3 <= io_req_valid;	// SpiFlash.scala:90:32
    io_rsp_bits_dataResponse_REG_4 <= RxDataReg;	// SpiFlash.scala:31:31, :96:44
    io_rsp_bits_dataResponse_REG_5 <= io_req_bits_addrRequest;	// SpiFlash.scala:107:44
    io_rsp_bits_error_REG <= io_req_valid;	// SpiFlash.scala:161:78
    io_rsp_bits_error_REG_1 <= io_req_valid & ~(io_req_bits_addrRequest[3:0] == 4'h0 | io_req_bits_addrRequest[3:0] ==
                                4'h4 | _T_42);	// SpiFlash.scala:41:{34,40}, :59:44, :152:39, :160:{18,37}, :162:{44,58}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        ControlReg = _RANDOM_0;	// SpiFlash.scala:28:29
        TxDataReg = _RANDOM_1;	// SpiFlash.scala:29:31
        TxDataValidReg = _RANDOM_2[0];	// SpiFlash.scala:30:33
        RxDataReg = {_RANDOM_2[31:1], _RANDOM_3[0]};	// SpiFlash.scala:30:33, :31:31
        RxDataValidReg = _RANDOM_3[1];	// SpiFlash.scala:31:31, :32:33
        io_rsp_bits_dataResponse_REG = {_RANDOM_3[31:2], _RANDOM_4[1:0]};	// SpiFlash.scala:31:31, :44:44
        io_rsp_valid_REG = _RANDOM_4[2];	// SpiFlash.scala:44:44, :45:32
        io_rsp_bits_dataResponse_REG_1 = {_RANDOM_4[31:3], _RANDOM_5[2:0]};	// SpiFlash.scala:44:44, :52:44
        io_rsp_valid_REG_1 = _RANDOM_5[3];	// SpiFlash.scala:52:44, :53:32
        io_rsp_bits_dataResponse_REG_2 = {_RANDOM_5[31:4], _RANDOM_6[3:0]};	// SpiFlash.scala:52:44, :82:44
        io_rsp_bits_dataResponse_REG_3 = {_RANDOM_6[31:5], _RANDOM_7[4:0]};	// SpiFlash.scala:82:44, :89:44
        io_rsp_valid_REG_3 = _RANDOM_7[5];	// SpiFlash.scala:89:44, :90:32
        io_rsp_bits_dataResponse_REG_4 = {_RANDOM_7[31:6], _RANDOM_8[5:0]};	// SpiFlash.scala:89:44, :96:44
        io_rsp_bits_dataResponse_REG_5 = {_RANDOM_8[31:6], _RANDOM_9[5:0]};	// SpiFlash.scala:96:44, :107:44
        spiProtocol_clock_x = _RANDOM_9[31:6];	// SpiFlash.scala:107:44, :112:24
        spiProtocol_clock_x_1 = _RANDOM_10[0];	// SpiFlash.scala:118:24
        io_rsp_bits_error_REG = _RANDOM_10[1];	// SpiFlash.scala:118:24, :161:78
        io_rsp_bits_error_REG_1 = _RANDOM_10[2];	// SpiFlash.scala:118:24, :162:44
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  Protocol_1 spiProtocol (	// SpiFlash.scala:126:29
    .clock             (spiProtocol_clock_x_1),	// SpiFlash.scala:118:24
    .reset             (reset),
    .io_miso           (io_miso),
    .io_data_in_valid  (TxDataValidReg),	// SpiFlash.scala:30:33
    .io_data_in_bits   (TxDataReg),	// SpiFlash.scala:29:31
    .io_CPOL           (ControlReg[1]),	// SpiFlash.scala:28:29, :131:38
    .io_mosi           (io_mosi),
    .io_ss             (io_cs_n),
    .io_sck            (io_sclk),
    .io_data_out_valid (_spiProtocol_io_data_out_valid),
    .io_data_out_bits  (_spiProtocol_io_data_out_bits)
  );
  assign io_rsp_valid = _T_15 ? io_rsp_valid_REG : _T_19 ? io_rsp_valid_REG_1 : _T_23 | (_T_37 ? io_rsp_valid_REG_3
                : RxDataValidReg);	// SpiFlash.scala:32:33, :41:{48,79}, :45:{22,32}, :51:{52,83}, :53:{22,32}, :59:{52,83}, :83:22, :88:{52,83}, :90:{22,32}, :95:83
  assign io_rsp_bits_dataResponse = _T_15 ? io_rsp_bits_dataResponse_REG : _T_19 ? io_rsp_bits_dataResponse_REG_1 : _T_23 ?
                io_rsp_bits_dataResponse_REG_2 : _T_37 ? io_rsp_bits_dataResponse_REG_3 :
                io_req_bits_addrRequest[3:0] == 4'h8 & ~io_req_bits_isWrite ?
                io_rsp_bits_dataResponse_REG_4 : io_rsp_bits_dataResponse_REG_5;	// SpiFlash.scala:41:{34,48,79}, :44:{34,44}, :51:{52,75,83}, :52:{34,44}, :59:{52,83}, :82:{34,44}, :88:{52,83}, :89:{34,44}, :95:{44,52,83}, :96:{34,44}, :107:{34,44}
  assign io_rsp_bits_error = _T_42 & io_req_bits_isWrite ? io_rsp_bits_error_REG : io_rsp_bits_error_REG_1;	// SpiFlash.scala:152:39, :161:{27,49,68,78}, :162:{34,44}
endmodule

module WishboneDevice_6(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input  [3:0]  io_wbMasterReceiver_bits_sel,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output [3:0]  io_reqOut_bits_activeByteLane,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_activeByteLane = io_wbMasterReceiver_bits_sel;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module i2c_master(
  input        clock,
               reset,
               io_start,
  input  [6:0] io_addr,
  input  [7:0] io_data,
  input        io_read_write,
               io_i2c_sda_in,
  output       io_i2c_sda,
               io_i2c_scl,
               io_i2c_intr);

  reg  [7:0]  state;	// i2c_master.scala:25:24
  reg  [14:0] count;	// i2c_master.scala:26:24
  reg  [6:0]  saved_addr;	// i2c_master.scala:27:29
  reg         i2c_scl_enable;	// i2c_master.scala:29:33
  reg         intr_done;	// i2c_master.scala:30:28
  wire        _T_9 = state == 8'h1;	// Conditional.scala:37:30, i2c_master.scala:25:24, :62:27
  wire        _T_10 = state == 8'h2;	// Conditional.scala:37:30, i2c_master.scala:25:24, :77:23
  wire [14:0] _GEN = {8'h0, saved_addr} >> count;	// i2c_master.scala:25:24, :26:24, :27:29, :82:41
  wire        _T_12 = state == 8'h3;	// Conditional.scala:37:30, i2c_master.scala:25:24, :86:27
  wire        _T_13 = state == 8'h4;	// Conditional.scala:37:30, i2c_master.scala:25:24, :98:23
  wire        _T_15 = state == 8'h5;	// Conditional.scala:37:30, i2c_master.scala:25:24, :106:31
  wire [14:0] _GEN_0 = {7'h0, io_data} >> count;	// i2c_master.scala:26:24, :27:29, :120:38
  wire        _T_17 = state == 8'h6;	// Conditional.scala:37:30, i2c_master.scala:25:24, :124:27
  always @(posedge clock) begin
    if (reset) begin
      state <= 8'h0;	// i2c_master.scala:25:24
      count <= 15'h0;	// i2c_master.scala:26:24
      saved_addr <= 7'h0;	// i2c_master.scala:27:29
      i2c_scl_enable <= 1'h1;	// i2c_master.scala:29:33
      intr_done <= 1'h0;	// i2c_master.scala:30:28
    end
    else begin
      state <= reset ? 8'h0 : |state ? (_T_9 ? 8'h2 : _T_10 ? {7'h1, ~(|count)} : _T_12 ? 8'h4 : _T_13 ?
                                                {6'h1, io_i2c_sda_in, 1'h1} : _T_15 ? (|count ? 8'h5 : 8'h6) : _T_17 ? 8'h7 : 8'h0) :
                                                {7'h0, io_start};	// Conditional.scala:37:30, :39:67, :40:58, i2c_master.scala:25:24, :26:24, :27:29, :29:33, :46:22, :53:22, :54:15, :61:39, :62:27, :66:27, :77:23, :85:{28,36}, :86:27, :89:27, :98:23, :105:48, :106:31, :111:31, :123:36, :124:27, :127:27, :136:23
      count <= reset | ~(|state) ? count : _T_9 ? 15'h6 : _T_10 ? (|count ? count - 15'h1 : count) : _T_12
                                                ? count : _T_13 ? (io_i2c_sda_in ? count : 15'h7) : _T_15 & |count ? count - 15'h1 : count;	// Conditional.scala:37:30, :39:67, :40:58, i2c_master.scala:25:24, :26:24, :46:22, :53:22, :78:23, :85:{28,36}, :88:{27,36}, :105:48, :107:31, :123:36, :126:36
      saved_addr <= reset | ~(|state & _T_9) ? saved_addr : io_addr;	// Conditional.scala:37:30, :39:67, :40:58, i2c_master.scala:25:24, :27:29, :46:22, :53:22
      i2c_scl_enable <= ~reset & ~(~(|state) | state == 8'h1 | state == 8'h7);	// i2c_master.scala:25:24, :29:33, :43:22, :44:24, :46:{22,46,62,71,87}, :47:28, :49:29, :62:27, :111:31
      intr_done <= reset ? intr_done : |state & (~_T_9 & ~_T_10 & ~_T_12 & ~_T_13 & ~_T_15 & ~_T_17 & state ==
                                                8'h7 | intr_done);	// Conditional.scala:37:30, :39:67, :40:58, i2c_master.scala:25:24, :30:28, :46:22, :53:22, :60:27, :72:28, :111:31, :133:28
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        state = _RANDOM_0[7:0];	// i2c_master.scala:25:24
        count = _RANDOM_0[22:8];	// i2c_master.scala:25:24, :26:24
        saved_addr = _RANDOM_0[29:23];	// i2c_master.scala:25:24, :27:29
        i2c_scl_enable = _RANDOM_1[6];	// i2c_master.scala:29:33
        intr_done = _RANDOM_1[7];	// i2c_master.scala:29:33, :30:28
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_i2c_sda = reset | ~(|state) | ~_T_9 & (_T_10 ? _GEN[0] : _T_12 ? io_read_write : _T_13 ?
                io_i2c_sda_in : _T_15 ? _GEN_0[0] : ~_T_17 | io_i2c_sda_in);	// Conditional.scala:37:30, :39:67, :40:58, i2c_master.scala:25:24, :46:22, :53:22, :55:20, :72:28, :82:{28,41}, :95:28, :104:32, :120:{28,38}, :133:28
  assign io_i2c_scl = ~i2c_scl_enable | ~clock;	// i2c_master.scala:29:33, :41:{22,38,54}
  assign io_i2c_intr = intr_done;	// i2c_master.scala:30:28
endmodule

module I2C_Top(
  input         clock,
                reset,
  input  [31:0] io_wdata,
  input  [6:0]  io_addr,
  input         io_ren,
                io_we,
  output        io_sda,
                io_scl,
                io_intr);

  reg       addr_start_bit;	// I2C_Top.scala:31:33
  reg [6:0] addr_slave_addr;	// I2C_Top.scala:32:34
  reg [7:0] addr_data;	// I2C_Top.scala:33:28
  reg       addr_read_write_bit;	// I2C_Top.scala:34:38
  reg       addr_sda_in;	// I2C_Top.scala:35:30
  always @(posedge clock) begin
    if (reset) begin
      addr_start_bit <= 1'h0;	// I2C_Top.scala:31:33
      addr_slave_addr <= 7'h0;	// I2C_Top.scala:32:34
      addr_data <= 8'h0;	// I2C_Top.scala:33:28
      addr_read_write_bit <= 1'h0;	// I2C_Top.scala:31:33, :34:38
      addr_sda_in <= 1'h1;	// I2C_Top.scala:35:30
    end
    else begin
      automatic logic _T_1 = ~io_ren & io_we;	// I2C_Top.scala:40:{10,20}
      automatic logic _T_2 = io_addr == 7'h0;	// I2C_Top.scala:32:34, :41:18
      automatic logic _T_3 = io_addr == 7'h4;	// I2C_Top.scala:43:24
      automatic logic _T_4 = io_addr == 7'h10;	// I2C_Top.scala:45:24
      automatic logic _T_5 = io_addr == 7'h8;	// I2C_Top.scala:47:24
      automatic logic _T_6 = io_addr == 7'hC;	// I2C_Top.scala:49:24
      addr_start_bit <= _T_1 ? (_T_2 ? io_wdata[0] : (_T_3 | _T_4 | _T_5 | _T_6) & addr_start_bit) : addr_start_bit;	// I2C_Top.scala:31:33, :40:{20,29}, :41:{18,37}, :42:{24,35}, :43:{24,44}, :45:{24,38}, :47:24, :49:24
      addr_slave_addr <= ~_T_1 | _T_2 ? addr_slave_addr : _T_3 ? io_wdata[6:0] : _T_4 | _T_5 | _T_6 ?
                                                addr_slave_addr : 7'h0;	// I2C_Top.scala:32:34, :34:38, :40:{20,29}, :41:{18,37}, :43:{24,44}, :44:{25,36}, :45:{24,38}, :47:{24,48}, :49:24
      addr_data <= ~_T_1 | _T_2 | _T_3 ? addr_data : _T_4 ? io_wdata[7:0] : _T_5 | _T_6 ? addr_data : 8'h0;	// I2C_Top.scala:33:28, :34:38, :40:{20,29}, :41:{18,37}, :43:24, :45:{24,38}, :46:{19,30}, :47:{24,48}, :49:{24,40}
      addr_read_write_bit <= ~_T_1 | _T_2 | _T_3 | _T_4 | ~_T_5 ? addr_read_write_bit : io_wdata[0];	// I2C_Top.scala:34:38, :40:{20,29}, :41:{18,37}, :43:24, :45:{24,38}, :47:{24,48}, :48:40
      addr_sda_in <= ~_T_1 | _T_2 | _T_3 | _T_4 | _T_5 | ~_T_6 ? addr_sda_in : io_wdata[0];	// I2C_Top.scala:34:38, :35:30, :40:{20,29}, :41:{18,37}, :43:24, :45:24, :47:{24,48}, :49:{24,40}, :50:33
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        addr_start_bit = _RANDOM_0[0];	// I2C_Top.scala:31:33
        addr_slave_addr = _RANDOM_0[7:1];	// I2C_Top.scala:31:33, :32:34
        addr_data = _RANDOM_0[15:8];	// I2C_Top.scala:31:33, :33:28
        addr_read_write_bit = _RANDOM_0[16];	// I2C_Top.scala:31:33, :34:38
        addr_sda_in = _RANDOM_0[17];	// I2C_Top.scala:31:33, :35:30
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  i2c_master i2c_master (	// I2C_Top.scala:63:28
    .clock         (clock),
    .reset         (reset),
    .io_start      (addr_start_bit),	// I2C_Top.scala:31:33
    .io_addr       (addr_slave_addr),	// I2C_Top.scala:32:34
    .io_data       (addr_data),	// I2C_Top.scala:33:28
    .io_read_write (addr_read_write_bit),	// I2C_Top.scala:34:38
    .io_i2c_sda_in (addr_sda_in),	// I2C_Top.scala:35:30
    .io_i2c_sda    (io_sda),
    .io_i2c_scl    (io_scl),
    .io_i2c_intr   (io_intr)
  );
endmodule

module i2c(
  input         clock,
                reset,
                io_request_valid,
  input  [31:0] io_request_bits_addrRequest,
                io_request_bits_dataRequest,
  input         io_request_bits_isWrite,
  output        io_response_valid,
  output [31:0] io_response_bits_dataResponse,
  output        io_response_bits_error,
                io_cio_i2c_sda,
                io_cio_i2c_scl,
                io_cio_i2c_intr);

  wire        _i2c_top_io_intr;	// i2c.scala:19:26
  wire        _write_register_T_1 = io_request_valid & io_request_bits_isWrite;	// i2c.scala:26:26
  wire        _read_register_T_2 = io_request_valid & ~io_request_bits_isWrite;	// i2c.scala:27:{25,45}
  reg  [31:0] io_response_bits_dataResponse_REG;	// i2c.scala:35:45
  reg         io_response_valid_REG;	// i2c.scala:36:33
  reg         io_response_bits_error_REG;	// i2c.scala:37:38
  always @(posedge clock) begin
    io_response_bits_dataResponse_REG <= io_request_bits_dataRequest;	// i2c.scala:35:45
    io_response_valid_REG <= _write_register_T_1 | _read_register_T_2;	// i2c.scala:26:26, :27:25, :36:{33,53}
    io_response_bits_error_REG <= _i2c_top_io_intr;	// i2c.scala:19:26, :37:38
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        io_response_bits_dataResponse_REG = _RANDOM_0;	// i2c.scala:35:45
        io_response_valid_REG = _RANDOM_1[0];	// i2c.scala:36:33
        io_response_bits_error_REG = _RANDOM_1[1];	// i2c.scala:36:33, :37:38
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  I2C_Top i2c_top (	// i2c.scala:19:26
    .clock    (clock),
    .reset    (reset),
    .io_wdata (io_request_bits_dataRequest),
    .io_addr  (io_request_bits_addrRequest[6:0]),	// i2c.scala:29:44
    .io_ren   (_read_register_T_2),	// i2c.scala:27:25
    .io_we    (_write_register_T_1),	// i2c.scala:26:26
    .io_sda   (io_cio_i2c_sda),
    .io_scl   (io_cio_i2c_scl),
    .io_intr  (_i2c_top_io_intr)
  );
  assign io_response_valid = io_response_valid_REG;	// i2c.scala:36:33
  assign io_response_bits_dataResponse = io_response_bits_dataResponse_REG;	// i2c.scala:35:45
  assign io_response_bits_error = io_response_bits_error_REG;	// i2c.scala:37:38
  assign io_cio_i2c_intr = _i2c_top_io_intr;	// i2c.scala:19:26
endmodule

module WishboneDevice_7(
  input         io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
                io_wbMasterReceiver_bits_we,
  input  [31:0] io_wbMasterReceiver_bits_adr,
                io_wbMasterReceiver_bits_dat,
  input         io_rspIn_valid,
  input  [31:0] io_rspIn_bits_dataResponse,
  input         io_rspIn_bits_error,
  output        io_wbSlaveTransmitter_bits_ack,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err,
                io_reqOut_valid,
  output [31:0] io_reqOut_bits_addrRequest,
                io_reqOut_bits_dataRequest,
  output        io_reqOut_bits_isWrite);

  wire _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneDevice.scala:16:80
  wire _T_4 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:36:{27,30}
  wire _T_7 = io_rspIn_valid & ~io_rspIn_bits_error;	// WishboneDevice.scala:60:{27,30}
  assign io_wbSlaveTransmitter_bits_ack = _T_1 & (io_wbMasterReceiver_bits_we ? _T_7 : _T_4);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :60:{27,52}, :88:9
  assign io_wbSlaveTransmitter_bits_dat = io_wbMasterReceiver_bits_we ? 32'h0 : io_rspIn_bits_dataResponse;	// WishboneDevice.scala:26:40, :36:52, :60:52, :65:58, :69:40, :75:40
  assign io_wbSlaveTransmitter_bits_err = _T_1 & (io_wbMasterReceiver_bits_we ? ~_T_7 & io_rspIn_valid & io_rspIn_bits_error : ~_T_4
                & io_rspIn_valid & io_rspIn_bits_error);	// WishboneDevice.scala:16:80, :25:16, :26:40, :36:{27,52}, :40:40, :42:58, :60:{27,52}, :63:40, :65:58, :89:36
  assign io_reqOut_valid = _T_1;	// WishboneDevice.scala:16:80
  assign io_reqOut_bits_addrRequest = io_wbMasterReceiver_bits_adr;
  assign io_reqOut_bits_dataRequest = io_wbMasterReceiver_bits_dat;
  assign io_reqOut_bits_isWrite = io_wbMasterReceiver_bits_we;
endmodule

module BlockRamWithoutMasking(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse,
  output        io_rsp_bits_error);

  wire [31:0] _mem_ext_R0_data;	// BlockRam.scala:82:24
  reg         validReg;	// BlockRam.scala:72:25
  reg         errReg;	// BlockRam.scala:73:23
  wire [31:0] _GEN = io_req_bits_addrRequest / 32'h4;	// BlockRam.scala:79:65
  always @(posedge clock) begin
    if (reset) begin
      validReg <= 1'h0;	// BlockRam.scala:72:25
      errReg <= 1'h0;	// BlockRam.scala:73:23
    end
    else begin
      validReg <= io_req_valid;	// BlockRam.scala:72:25
      errReg <= io_req_valid & |(io_req_bits_addrRequest[1:0]) | io_req_valid & _GEN > 32'h3FE;	// BlockRam.scala:73:23, :78:{24,63,72}, :79:{25,65,71}, :81:28
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        validReg = _RANDOM_0[0];	// BlockRam.scala:72:25
        errReg = _RANDOM_0[1];	// BlockRam.scala:72:25, :73:23
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  mem_combMem mem_ext (	// BlockRam.scala:82:24
    .R0_addr (_GEN[9:0]),	// BlockRam.scala:79:65, :90:41
    .R0_en   (io_req_valid),
    .R0_clk  (clock),
    .W0_addr (_GEN[9:0]),	// BlockRam.scala:79:65
    .W0_en   (1'h0),
    .W0_clk  (clock),
    .W0_data (32'h0),
    .R0_data (_mem_ext_R0_data)
  );
  assign io_rsp_valid = validReg;	// BlockRam.scala:72:25
  assign io_rsp_bits_dataResponse = io_req_valid ? _mem_ext_R0_data : 32'h0;	// BlockRam.scala:82:24, :88:47, :90:30, :92:53
  assign io_rsp_bits_error = errReg;	// BlockRam.scala:73:23
endmodule

module BlockRamWithMasking(
  input         clock,
                reset,
                io_req_valid,
  input  [31:0] io_req_bits_addrRequest,
                io_req_bits_dataRequest,
  input  [3:0]  io_req_bits_activeByteLane,
  input         io_req_bits_isWrite,
  output        io_rsp_valid,
  output [31:0] io_rsp_bits_dataResponse);

  wire        _GEN;	// BlockRam.scala:141:24, :143:47, :147:53
  wire [7:0]  _mem_3_ext_R0_data;	// BlockRam.scala:141:24
  wire [7:0]  _mem_2_ext_R0_data;	// BlockRam.scala:141:24
  wire [7:0]  _mem_1_ext_R0_data;	// BlockRam.scala:141:24
  wire [7:0]  _mem_0_ext_R0_data;	// BlockRam.scala:141:24
  reg         validReg;	// BlockRam.scala:136:25
  wire        _T_2 = io_req_valid & ~io_req_bits_isWrite;	// BlockRam.scala:143:{22,25}
  wire [31:0] _GEN_0 = io_req_bits_addrRequest / 32'h4;	// BlockRam.scala:145:46
  wire        _T_6 = io_req_valid & io_req_bits_isWrite;	// BlockRam.scala:147:29
  assign _GEN = ~_T_2 & _T_6;	// BlockRam.scala:141:24, :143:{22,47}, :147:{29,53}
  always @(posedge clock) begin
    if (reset)
      validReg <= 1'h0;	// BlockRam.scala:136:25
    else
      validReg <= _T_2 | _T_6;	// BlockRam.scala:136:25, :143:{22,47}, :146:14, :147:{29,53}
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        validReg = _RANDOM_0[0];	// BlockRam.scala:136:25
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  mem_0_combMem mem_0_ext (	// BlockRam.scala:141:24
    .R0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:{22,46}
    .R0_en   (_T_2),	// BlockRam.scala:143:22
    .R0_clk  (clock),
    .W0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:46
    .W0_en   (_GEN & io_req_bits_activeByteLane[0]),	// BlockRam.scala:128:52, :141:24, :143:47, :147:53
    .W0_clk  (clock),
    .W0_data (io_req_bits_dataRequest[7:0]),	// BlockRam.scala:121:38
    .R0_data (_mem_0_ext_R0_data)
  );
  mem_0_combMem mem_1_ext (	// BlockRam.scala:141:24
    .R0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:{22,46}
    .R0_en   (_T_2),	// BlockRam.scala:143:22
    .R0_clk  (clock),
    .W0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:46
    .W0_en   (_GEN & io_req_bits_activeByteLane[1]),	// BlockRam.scala:128:52, :141:24, :143:47, :147:53
    .W0_clk  (clock),
    .W0_data (io_req_bits_dataRequest[15:8]),	// BlockRam.scala:122:38
    .R0_data (_mem_1_ext_R0_data)
  );
  mem_0_combMem mem_2_ext (	// BlockRam.scala:141:24
    .R0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:{22,46}
    .R0_en   (_T_2),	// BlockRam.scala:143:22
    .R0_clk  (clock),
    .W0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:46
    .W0_en   (_GEN & io_req_bits_activeByteLane[2]),	// BlockRam.scala:128:52, :141:24, :143:47, :147:53
    .W0_clk  (clock),
    .W0_data (io_req_bits_dataRequest[23:16]),	// BlockRam.scala:123:38
    .R0_data (_mem_2_ext_R0_data)
  );
  mem_0_combMem mem_3_ext (	// BlockRam.scala:141:24
    .R0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:{22,46}
    .R0_en   (_T_2),	// BlockRam.scala:143:22
    .R0_clk  (clock),
    .W0_addr (_GEN_0[9:0]),	// BlockRam.scala:145:46
    .W0_en   (_GEN & io_req_bits_activeByteLane[3]),	// BlockRam.scala:128:52, :141:24, :143:47, :147:53
    .W0_clk  (clock),
    .W0_data (io_req_bits_dataRequest[31:24]),	// BlockRam.scala:124:38
    .R0_data (_mem_3_ext_R0_data)
  );
  assign io_rsp_valid = validReg;	// BlockRam.scala:136:25
  assign io_rsp_bits_dataResponse = {io_req_bits_activeByteLane[3] & _T_2 ? _mem_3_ext_R0_data : 8'h0,
                io_req_bits_activeByteLane[2] & _T_2 ? _mem_2_ext_R0_data : 8'h0,
                io_req_bits_activeByteLane[1] & _T_2 ? _mem_1_ext_R0_data : 8'h0,
                io_req_bits_activeByteLane[0] & _T_2 ? _mem_0_ext_R0_data : 8'h0};	// BlockRam.scala:128:52, :141:24, :143:22, :147:53, :151:18, :154:18, :160:8, Cat.scala:30:58
endmodule

module WishboneErr(
  input         clock,
                reset,
                io_wbMasterReceiver_valid,
                io_wbMasterReceiver_bits_cyc,
                io_wbMasterReceiver_bits_stb,
  output [31:0] io_wbSlaveTransmitter_bits_dat,
  output        io_wbSlaveTransmitter_bits_err);

  reg [31:0] dataReg;	// WishboneErr.scala:15:24
  reg        errReg;	// WishboneErr.scala:16:23
  always @(posedge clock) begin
    if (reset) begin
      dataReg <= 32'h0;	// WishboneErr.scala:15:24, :21:16, :27:39, :37:13
      errReg <= 1'h0;	// WishboneErr.scala:16:23
    end
    else begin
      automatic logic _T_1 = io_wbMasterReceiver_valid & io_wbMasterReceiver_bits_cyc & io_wbMasterReceiver_bits_stb;	// WishboneErr.scala:12:80
      dataReg <= {32{_T_1}};	// WishboneErr.scala:12:80, :15:24, :21:16, :27:39, :37:13
      errReg <= _T_1;	// WishboneErr.scala:12:80, :16:23
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        dataReg = {_RANDOM_0[31:1], _RANDOM_1[0]};	// WishboneErr.scala:15:24
        errReg = _RANDOM_1[1];	// WishboneErr.scala:15:24, :16:23
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_wbSlaveTransmitter_bits_dat = dataReg;	// WishboneErr.scala:15:24
  assign io_wbSlaveTransmitter_bits_err = errReg;	// WishboneErr.scala:16:23
endmodule

module InstructionFetch(
  input  [31:0] io_address,
  input         io_coreInstrReq_ready,
                io_coreInstrResp_valid,
  input  [31:0] io_coreInstrResp_bits_dataResponse,
  output [31:0] io_instruction,
  output        io_coreInstrReq_valid,
  output [31:0] io_coreInstrReq_bits_addrRequest);

  assign io_instruction = io_coreInstrResp_valid ? io_coreInstrResp_bits_dataResponse : 32'h0;	// InstructionFetch.scala:21:36, :26:24
  assign io_coreInstrReq_valid = io_coreInstrReq_ready;
  assign io_coreInstrReq_bits_addrRequest = io_address;
endmodule

module HazardUnit(
  input        io_id_ex_memRead,
               io_ex_mem_memRead,
               io_id_ex_branch,
  input  [4:0] io_id_ex_rd,
               io_ex_mem_rd,
               io_id_rs1,
               io_id_rs2,
  input        io_taken,
  input  [1:0] io_jump,
  input        io_branch,
  output       io_if_reg_write,
               io_pc_write,
               io_ctl_mux,
               io_ifid_flush,
               io_take_branch);

  wire _GEN = ~(io_ex_mem_memRead & io_branch & (io_ex_mem_rd == io_id_rs1 | io_ex_mem_rd == io_id_rs2))
                & ~((io_id_ex_memRead | io_branch) & (io_id_ex_rd == io_id_rs1 | io_id_ex_rd == io_id_rs2)
                & (|io_id_ex_rd & |io_id_rs1 | |io_id_ex_rd & |io_id_rs2) & ~io_id_ex_branch);	// HazardUnit.scala:26:14, :34:23, :35:{20,34,49}, :36:{21,29,42,51}, :37:{28,41,51}, :38:7, :40:3, :41:16, :47:{39,56,70,86,101}, :48:16
  assign io_if_reg_write = _GEN;	// HazardUnit.scala:40:3, :47:101, :48:16
  assign io_pc_write = _GEN;	// HazardUnit.scala:40:3, :47:101, :48:16
  assign io_ctl_mux = _GEN;	// HazardUnit.scala:40:3, :47:101, :48:16
  assign io_ifid_flush = io_taken | (|io_jump);	// HazardUnit.scala:55:{17,28}
  assign io_take_branch = _GEN;	// HazardUnit.scala:40:3, :47:101, :48:16
endmodule

module Control(
  input  [31:0] io_in,
  output        io_aluSrc,
  output [1:0]  io_memToReg,
  output        io_regWrite,
                io_memRead,
                io_memWrite,
                io_branch,
  output [1:0]  io_aluOp,
                io_jump,
                io_aluSrc1);

  wire       _T_1 = io_in[6:0] == 7'h33;	// Lookup.scala:31:38
  wire       _T_3 = io_in[6:0] == 7'h13;	// Lookup.scala:31:38
  wire       _T_48 = io_in[6:0] == 7'h3;	// Lookup.scala:31:38
  wire       _T_55 = io_in[6:0] == 7'h23;	// Lookup.scala:31:38
  wire       _T_62 = io_in[6:0] == 7'h63;	// Lookup.scala:31:38
  wire       _T_11 = io_in[6:0] == 7'h37;	// Lookup.scala:31:38
  wire       _T_84 = io_in[6:0] == 7'h17;	// Lookup.scala:31:38
  wire       _T_15 = io_in[6:0] == 7'h6F;	// Lookup.scala:31:38
  wire       _T_34 = io_in[6:0] == 7'h67;	// Lookup.scala:31:38
  wire [1:0] _T_66 = {_T_34, 1'h0};	// Lookup.scala:31:38, :33:37
  assign io_aluSrc = _T_1 | ~_T_3 & ~_T_48 & ~_T_55 & _T_62;	// Lookup.scala:31:38, :33:37
  assign io_memToReg = _T_1 | _T_3 ? 2'h0 : _T_48 ? 2'h1 : _T_55 | _T_62 | _T_11 | _T_84 ? 2'h0 : _T_15 ? 2'h2 :
                _T_66;	// Lookup.scala:31:38, :33:37
  assign io_regWrite = _T_1 | _T_3 | _T_48 | ~_T_55 & ~_T_62 & (_T_11 | _T_84 | _T_15 | _T_34);	// Lookup.scala:31:38, :33:37
  assign io_memRead = ~_T_1 & ~_T_3 & _T_48;	// Lookup.scala:31:38, :33:37
  assign io_memWrite = ~_T_1 & ~_T_3 & ~_T_48 & _T_55;	// Lookup.scala:31:38, :33:37
  assign io_branch = ~_T_1 & ~_T_3 & ~_T_48 & ~_T_55 & _T_62;	// Lookup.scala:31:38, :33:37
  assign io_aluOp = _T_1 ? 2'h2 : {_T_3, 1'h0};	// Lookup.scala:31:38, :33:37
  assign io_jump = _T_1 | _T_3 | _T_48 | _T_55 | _T_62 | _T_11 | _T_84 ? 2'h0 : _T_15 ? 2'h1 : _T_66;	// Lookup.scala:31:38, :33:37
  assign io_aluSrc1 = _T_1 | _T_3 | _T_48 | _T_55 | _T_62 ? 2'h0 : _T_11 ? 2'h2 : {1'h0, _T_84};	// Lookup.scala:31:38, :33:37
endmodule

module Registers(
  input         clock,
                reset,
  input  [4:0]  io_readAddress_0,
                io_readAddress_1,
  input         io_writeEnable,
  input  [4:0]  io_writeAddress,
  input  [31:0] io_writeData,
  output [31:0] io_readData_0,
                io_readData_1);

  reg  [31:0]       reg_0;	// Registers.scala:14:20
  reg  [31:0]       reg_1;	// Registers.scala:14:20
  reg  [31:0]       reg_2;	// Registers.scala:14:20
  reg  [31:0]       reg_3;	// Registers.scala:14:20
  reg  [31:0]       reg_4;	// Registers.scala:14:20
  reg  [31:0]       reg_5;	// Registers.scala:14:20
  reg  [31:0]       reg_6;	// Registers.scala:14:20
  reg  [31:0]       reg_7;	// Registers.scala:14:20
  reg  [31:0]       reg_8;	// Registers.scala:14:20
  reg  [31:0]       reg_9;	// Registers.scala:14:20
  reg  [31:0]       reg_10;	// Registers.scala:14:20
  reg  [31:0]       reg_11;	// Registers.scala:14:20
  reg  [31:0]       reg_12;	// Registers.scala:14:20
  reg  [31:0]       reg_13;	// Registers.scala:14:20
  reg  [31:0]       reg_14;	// Registers.scala:14:20
  reg  [31:0]       reg_15;	// Registers.scala:14:20
  reg  [31:0]       reg_16;	// Registers.scala:14:20
  reg  [31:0]       reg_17;	// Registers.scala:14:20
  reg  [31:0]       reg_18;	// Registers.scala:14:20
  reg  [31:0]       reg_19;	// Registers.scala:14:20
  reg  [31:0]       reg_20;	// Registers.scala:14:20
  reg  [31:0]       reg_21;	// Registers.scala:14:20
  reg  [31:0]       reg_22;	// Registers.scala:14:20
  reg  [31:0]       reg_23;	// Registers.scala:14:20
  reg  [31:0]       reg_24;	// Registers.scala:14:20
  reg  [31:0]       reg_25;	// Registers.scala:14:20
  reg  [31:0]       reg_26;	// Registers.scala:14:20
  reg  [31:0]       reg_27;	// Registers.scala:14:20
  reg  [31:0]       reg_28;	// Registers.scala:14:20
  reg  [31:0]       reg_29;	// Registers.scala:14:20
  reg  [31:0]       reg_30;	// Registers.scala:14:20
  reg  [31:0]       reg_31;	// Registers.scala:14:20
  wire [31:0][31:0] _GEN = {{reg_31}, {reg_30}, {reg_29}, {reg_28}, {reg_27}, {reg_26}, {reg_25}, {reg_24}, {reg_23},
                {reg_22}, {reg_21}, {reg_20}, {reg_19}, {reg_18}, {reg_17}, {reg_16}, {reg_15}, {reg_14},
                {reg_13}, {reg_12}, {reg_11}, {reg_10}, {reg_9}, {reg_8}, {reg_7}, {reg_6}, {reg_5},
                {reg_4}, {reg_3}, {reg_2}, {reg_1}, {reg_0}};	// Registers.scala:14:20, :23:22
  wire [31:0]       _GEN_0;	// Registers.scala:23:22
  /* synopsys infer_mux_override */
  assign _GEN_0 = _GEN[io_readAddress_0] /* cadence map_to_mux */;	// Registers.scala:23:22
  wire [31:0]       _GEN_1;	// Registers.scala:23:22
  /* synopsys infer_mux_override */
  assign _GEN_1 = _GEN[io_readAddress_1] /* cadence map_to_mux */;	// Registers.scala:23:22
  always @(posedge clock) begin
    if (reset) begin
      reg_0 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_1 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_2 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_3 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_4 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_5 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_6 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_7 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_8 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_9 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_10 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_11 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_12 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_13 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_14 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_15 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_16 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_17 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_18 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_19 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_20 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_21 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_22 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_23 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_24 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_25 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_26 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_27 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_28 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_29 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_30 <= 32'h0;	// Registers.scala:14:{20,28}
      reg_31 <= 32'h0;	// Registers.scala:14:{20,28}
    end
    else begin
      reg_0 <= io_writeEnable & io_writeAddress == 5'h0 ? io_writeData : reg_0;	// Registers.scala:14:20, :16:24, :17:26
      reg_1 <= io_writeEnable & io_writeAddress == 5'h1 ? io_writeData : reg_1;	// Registers.scala:14:20, :16:24, :17:26
      reg_2 <= io_writeEnable & io_writeAddress == 5'h2 ? io_writeData : reg_2;	// Registers.scala:14:20, :16:24, :17:26
      reg_3 <= io_writeEnable & io_writeAddress == 5'h3 ? io_writeData : reg_3;	// Registers.scala:14:20, :16:24, :17:26
      reg_4 <= io_writeEnable & io_writeAddress == 5'h4 ? io_writeData : reg_4;	// Registers.scala:14:20, :16:24, :17:26
      reg_5 <= io_writeEnable & io_writeAddress == 5'h5 ? io_writeData : reg_5;	// Registers.scala:14:20, :16:24, :17:26
      reg_6 <= io_writeEnable & io_writeAddress == 5'h6 ? io_writeData : reg_6;	// Registers.scala:14:20, :16:24, :17:26
      reg_7 <= io_writeEnable & io_writeAddress == 5'h7 ? io_writeData : reg_7;	// Registers.scala:14:20, :16:24, :17:26
      reg_8 <= io_writeEnable & io_writeAddress == 5'h8 ? io_writeData : reg_8;	// Registers.scala:14:20, :16:24, :17:26
      reg_9 <= io_writeEnable & io_writeAddress == 5'h9 ? io_writeData : reg_9;	// Registers.scala:14:20, :16:24, :17:26
      reg_10 <= io_writeEnable & io_writeAddress == 5'hA ? io_writeData : reg_10;	// Registers.scala:14:20, :16:24, :17:26
      reg_11 <= io_writeEnable & io_writeAddress == 5'hB ? io_writeData : reg_11;	// Registers.scala:14:20, :16:24, :17:26
      reg_12 <= io_writeEnable & io_writeAddress == 5'hC ? io_writeData : reg_12;	// Registers.scala:14:20, :16:24, :17:26
      reg_13 <= io_writeEnable & io_writeAddress == 5'hD ? io_writeData : reg_13;	// Registers.scala:14:20, :16:24, :17:26
      reg_14 <= io_writeEnable & io_writeAddress == 5'hE ? io_writeData : reg_14;	// Registers.scala:14:20, :16:24, :17:26
      reg_15 <= io_writeEnable & io_writeAddress == 5'hF ? io_writeData : reg_15;	// Registers.scala:14:20, :16:24, :17:26
      reg_16 <= io_writeEnable & io_writeAddress == 5'h10 ? io_writeData : reg_16;	// Registers.scala:14:20, :16:24, :17:26
      reg_17 <= io_writeEnable & io_writeAddress == 5'h11 ? io_writeData : reg_17;	// Registers.scala:14:20, :16:24, :17:26
      reg_18 <= io_writeEnable & io_writeAddress == 5'h12 ? io_writeData : reg_18;	// Registers.scala:14:20, :16:24, :17:26
      reg_19 <= io_writeEnable & io_writeAddress == 5'h13 ? io_writeData : reg_19;	// Registers.scala:14:20, :16:24, :17:26
      reg_20 <= io_writeEnable & io_writeAddress == 5'h14 ? io_writeData : reg_20;	// Registers.scala:14:20, :16:24, :17:26
      reg_21 <= io_writeEnable & io_writeAddress == 5'h15 ? io_writeData : reg_21;	// Registers.scala:14:20, :16:24, :17:26
      reg_22 <= io_writeEnable & io_writeAddress == 5'h16 ? io_writeData : reg_22;	// Registers.scala:14:20, :16:24, :17:26
      reg_23 <= io_writeEnable & io_writeAddress == 5'h17 ? io_writeData : reg_23;	// Registers.scala:14:20, :16:24, :17:26
      reg_24 <= io_writeEnable & io_writeAddress == 5'h18 ? io_writeData : reg_24;	// Registers.scala:14:20, :16:24, :17:26
      reg_25 <= io_writeEnable & io_writeAddress == 5'h19 ? io_writeData : reg_25;	// Registers.scala:14:20, :16:24, :17:26
      reg_26 <= io_writeEnable & io_writeAddress == 5'h1A ? io_writeData : reg_26;	// Registers.scala:14:20, :16:24, :17:26
      reg_27 <= io_writeEnable & io_writeAddress == 5'h1B ? io_writeData : reg_27;	// Registers.scala:14:20, :16:24, :17:26
      reg_28 <= io_writeEnable & io_writeAddress == 5'h1C ? io_writeData : reg_28;	// Registers.scala:14:20, :16:24, :17:26
      reg_29 <= io_writeEnable & io_writeAddress == 5'h1D ? io_writeData : reg_29;	// Registers.scala:14:20, :16:24, :17:26
      reg_30 <= io_writeEnable & io_writeAddress == 5'h1E ? io_writeData : reg_30;	// Registers.scala:14:20, :16:24, :17:26
      reg_31 <= io_writeEnable & (&io_writeAddress) ? io_writeData : reg_31;	// Registers.scala:14:20, :16:24, :17:26
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      automatic logic [31:0] _RANDOM_20;
      automatic logic [31:0] _RANDOM_21;
      automatic logic [31:0] _RANDOM_22;
      automatic logic [31:0] _RANDOM_23;
      automatic logic [31:0] _RANDOM_24;
      automatic logic [31:0] _RANDOM_25;
      automatic logic [31:0] _RANDOM_26;
      automatic logic [31:0] _RANDOM_27;
      automatic logic [31:0] _RANDOM_28;
      automatic logic [31:0] _RANDOM_29;
      automatic logic [31:0] _RANDOM_30;
      automatic logic [31:0] _RANDOM_31;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        _RANDOM_20 = `RANDOM;
        _RANDOM_21 = `RANDOM;
        _RANDOM_22 = `RANDOM;
        _RANDOM_23 = `RANDOM;
        _RANDOM_24 = `RANDOM;
        _RANDOM_25 = `RANDOM;
        _RANDOM_26 = `RANDOM;
        _RANDOM_27 = `RANDOM;
        _RANDOM_28 = `RANDOM;
        _RANDOM_29 = `RANDOM;
        _RANDOM_30 = `RANDOM;
        _RANDOM_31 = `RANDOM;
        reg_0 = _RANDOM_0;	// Registers.scala:14:20
        reg_1 = _RANDOM_1;	// Registers.scala:14:20
        reg_2 = _RANDOM_2;	// Registers.scala:14:20
        reg_3 = _RANDOM_3;	// Registers.scala:14:20
        reg_4 = _RANDOM_4;	// Registers.scala:14:20
        reg_5 = _RANDOM_5;	// Registers.scala:14:20
        reg_6 = _RANDOM_6;	// Registers.scala:14:20
        reg_7 = _RANDOM_7;	// Registers.scala:14:20
        reg_8 = _RANDOM_8;	// Registers.scala:14:20
        reg_9 = _RANDOM_9;	// Registers.scala:14:20
        reg_10 = _RANDOM_10;	// Registers.scala:14:20
        reg_11 = _RANDOM_11;	// Registers.scala:14:20
        reg_12 = _RANDOM_12;	// Registers.scala:14:20
        reg_13 = _RANDOM_13;	// Registers.scala:14:20
        reg_14 = _RANDOM_14;	// Registers.scala:14:20
        reg_15 = _RANDOM_15;	// Registers.scala:14:20
        reg_16 = _RANDOM_16;	// Registers.scala:14:20
        reg_17 = _RANDOM_17;	// Registers.scala:14:20
        reg_18 = _RANDOM_18;	// Registers.scala:14:20
        reg_19 = _RANDOM_19;	// Registers.scala:14:20
        reg_20 = _RANDOM_20;	// Registers.scala:14:20
        reg_21 = _RANDOM_21;	// Registers.scala:14:20
        reg_22 = _RANDOM_22;	// Registers.scala:14:20
        reg_23 = _RANDOM_23;	// Registers.scala:14:20
        reg_24 = _RANDOM_24;	// Registers.scala:14:20
        reg_25 = _RANDOM_25;	// Registers.scala:14:20
        reg_26 = _RANDOM_26;	// Registers.scala:14:20
        reg_27 = _RANDOM_27;	// Registers.scala:14:20
        reg_28 = _RANDOM_28;	// Registers.scala:14:20
        reg_29 = _RANDOM_29;	// Registers.scala:14:20
        reg_30 = _RANDOM_30;	// Registers.scala:14:20
        reg_31 = _RANDOM_31;	// Registers.scala:14:20
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_readData_0 = io_readAddress_0 == 5'h0 ? 32'h0 : _GEN_0;	// Registers.scala:14:28, :17:26, :20:{28,37}, :21:22, :23:22
  assign io_readData_1 = io_readAddress_1 == 5'h0 ? 32'h0 : _GEN_1;	// Registers.scala:14:28, :17:26, :20:{28,37}, :21:22, :23:22
endmodule

module ImmediateGen(
  input  [31:0] io_instruction,
  output [31:0] io_out);

  assign io_out = io_instruction[6:0] == 7'h3 | io_instruction[6:0] == 7'hF | io_instruction[6:0] == 7'h13 |
                io_instruction[6:0] == 7'h1B | io_instruction[6:0] == 7'h67 | io_instruction[6:0] == 7'h73
                ? {{20{io_instruction[31]}}, io_instruction[31:20]} : io_instruction[6:0] == 7'h17 |
                io_instruction[6:0] == 7'h37 ? {io_instruction[31:12], 12'h0} : io_instruction[6:0] ==
                7'h23 ? {{20{io_instruction[31]}}, io_instruction[31:25], io_instruction[11:7]} :
                {io_instruction[6:0] == 7'h63 ? {{20{io_instruction[31]}}, io_instruction[7],
                io_instruction[30:25], io_instruction[11:8]} : {{12{io_instruction[31]}},
                io_instruction[19:12], io_instruction[20], io_instruction[30:21]}, 1'h0};	// Bitwise.scala:72:12, Cat.scala:30:58, ImmediateGen.scala:11:30, :15:{12,30,49,68,87,97,107}, :16:5, :17:31, :18:35, :19:12, :23:{22,31,41,51}, :24:33, :26:14, :29:{22,32}, :30:{37,61}, :31:37, :32:14, :35:{22,32}, :37:23, :38:23, :39:23, :40:23, :43:14, :49:21, :50:21, :51:21, :52:21, :55:12
endmodule

module BranchUnit(
  input         io_branch,
  input  [2:0]  io_funct3,
  input  [31:0] io_rd1,
                io_rd2,
  input         io_take_branch,
  output        io_taken);

  wire       _T_15 = io_rd1 >= io_rd2;	// BranchUnit.scala:28:32
  wire [7:0] _GEN = {{_T_15}, {io_rd1 < io_rd2}, {$signed(io_rd1) >= $signed(io_rd2)}, {$signed(io_rd1) <
                $signed(io_rd2)}, {_T_15}, {_T_15}, {io_rd1 != io_rd2}, {io_rd1 == io_rd2}};	// BranchUnit.scala:23:{21,32}, :24:{21,32}, :25:{21,39}, :26:{21,39}, :27:{21,32}, :28:32, Conditional.scala:37:30, :39:67, :40:58
  assign io_taken = _GEN[io_funct3] & io_branch & io_take_branch;	// BranchUnit.scala:23:21, :24:21, :25:21, :26:21, :27:21, :31:33, Conditional.scala:37:30, :39:67, :40:58
endmodule

module InstructionDecode(
  input         clock,
                reset,
  input  [31:0] io_id_instruction,
                io_writeData,
  input  [4:0]  io_writeReg,
  input  [31:0] io_pcAddress,
  input         io_ctl_writeEnable,
                io_id_ex_mem_read,
                io_ex_mem_mem_read,
  input  [4:0]  io_id_ex_rd,
                io_ex_mem_rd,
  input         io_id_ex_branch,
  input  [31:0] io_ex_mem_ins,
                io_mem_wb_ins,
                io_ex_ins,
                io_ex_result,
                io_ex_mem_result,
                io_mem_wb_result,
  output [31:0] io_immediate,
  output [4:0]  io_writeRegAddress,
  output [31:0] io_readData1,
                io_readData2,
  output [6:0]  io_func7,
  output [2:0]  io_func3,
  output        io_ctl_aluSrc,
  output [1:0]  io_ctl_memToReg,
  output        io_ctl_regWrite,
                io_ctl_memRead,
                io_ctl_memWrite,
  output [1:0]  io_ctl_aluOp,
                io_ctl_aluSrc1,
  output        io_hdu_pcWrite,
                io_hdu_if_reg_write,
                io_pcSrc,
  output [31:0] io_pcPlusOffset,
  output        io_ifid_flush);

  wire        _bu_io_taken;	// InstructionDecode.scala:143:18
  wire [31:0] _immediate_io_out;	// InstructionDecode.scala:117:25
  wire [31:0] _registers_io_readData_0;	// InstructionDecode.scala:86:25
  wire [31:0] _registers_io_readData_1;	// InstructionDecode.scala:86:25
  wire        _control_io_regWrite;	// InstructionDecode.scala:67:23
  wire        _control_io_memWrite;	// InstructionDecode.scala:67:23
  wire        _control_io_branch;	// InstructionDecode.scala:67:23
  wire [1:0]  _control_io_jump;	// InstructionDecode.scala:67:23
  wire        _hdu_io_ctl_mux;	// InstructionDecode.scala:51:19
  wire        _hdu_io_take_branch;	// InstructionDecode.scala:51:19
  wire        _T_3 = _hdu_io_ctl_mux & io_id_instruction != 32'h13;	// InstructionDecode.scala:51:19, :76:{23,44}
  wire [31:0] _GEN = io_ctl_writeEnable & io_writeReg == io_id_instruction[19:15] ? (io_id_instruction[19:15] ==
                5'h0 ? 32'h0 : io_writeData) : _registers_io_readData_0;	// InstructionDecode.scala:59:37, :86:25, :97:{27,43,60}, :98:{22,30}, :99:20, :101:20, :104:18
  wire [31:0] _GEN_0 = io_ctl_writeEnable & io_writeReg == io_id_instruction[24:20] ? (io_id_instruction[24:20] ==
                5'h0 ? 32'h0 : io_writeData) : _registers_io_readData_1;	// InstructionDecode.scala:60:37, :86:25, :98:22, :99:20, :106:{27,43,60}, :107:{22,30}, :108:20, :110:20, :113:18
  HazardUnit hdu (	// InstructionDecode.scala:51:19
    .io_id_ex_memRead  (io_id_ex_mem_read),
    .io_ex_mem_memRead (io_ex_mem_mem_read),
    .io_id_ex_branch   (io_id_ex_branch),
    .io_id_ex_rd       (io_id_ex_rd),
    .io_ex_mem_rd      (io_ex_mem_rd),
    .io_id_rs1         (io_id_instruction[19:15]),	// InstructionDecode.scala:59:37
    .io_id_rs2         (io_id_instruction[24:20]),	// InstructionDecode.scala:60:37
    .io_taken          (_bu_io_taken),	// InstructionDecode.scala:143:18
    .io_jump           (_control_io_jump),	// InstructionDecode.scala:67:23
    .io_branch         (_control_io_branch),	// InstructionDecode.scala:67:23
    .io_if_reg_write   (io_hdu_if_reg_write),
    .io_pc_write       (io_hdu_pcWrite),
    .io_ctl_mux        (_hdu_io_ctl_mux),
    .io_ifid_flush     (io_ifid_flush),
    .io_take_branch    (_hdu_io_take_branch)
  );
  Control control (	// InstructionDecode.scala:67:23
    .io_in       (io_id_instruction),
    .io_aluSrc   (io_ctl_aluSrc),
    .io_memToReg (io_ctl_memToReg),
    .io_regWrite (_control_io_regWrite),
    .io_memRead  (io_ctl_memRead),
    .io_memWrite (_control_io_memWrite),
    .io_branch   (_control_io_branch),
    .io_aluOp    (io_ctl_aluOp),
    .io_jump     (_control_io_jump),
    .io_aluSrc1  (io_ctl_aluSrc1)
  );
  Registers registers (	// InstructionDecode.scala:86:25
    .clock            (clock),
    .reset            (reset),
    .io_readAddress_0 (io_id_instruction[19:15]),	// InstructionDecode.scala:59:37
    .io_readAddress_1 (io_id_instruction[24:20]),	// InstructionDecode.scala:60:37
    .io_writeEnable   (io_ctl_writeEnable),
    .io_writeAddress  (io_writeReg),
    .io_writeData     (io_writeData),
    .io_readData_0    (_registers_io_readData_0),
    .io_readData_1    (_registers_io_readData_1)
  );
  ImmediateGen immediate (	// InstructionDecode.scala:117:25
    .io_instruction (io_id_instruction),
    .io_out         (_immediate_io_out)
  );
  BranchUnit bu (	// InstructionDecode.scala:143:18
    .io_branch      (_control_io_branch),	// InstructionDecode.scala:67:23
    .io_funct3      (io_id_instruction[14:12]),	// InstructionDecode.scala:145:36
    .io_rd1         (io_id_instruction[19:15] == io_ex_mem_ins[11:7] ? io_ex_mem_result :
                io_id_instruction[19:15] == io_mem_wb_ins[11:7] ? io_mem_wb_result : _GEN),	// InstructionDecode.scala:59:37, :97:60, :98:30, :104:18, :125:{20,37,46}, :126:12, :127:{26,43,52}, :128:14, :131:14
    .io_rd2         (io_id_instruction[24:20] == io_ex_mem_ins[11:7] ? io_ex_mem_result :
                io_id_instruction[24:20] == io_mem_wb_ins[11:7] ? io_mem_wb_result : _GEN_0),	// InstructionDecode.scala:60:37, :106:60, :107:30, :113:18, :125:37, :133:{20,46}, :134:12, :135:{26,43,52}, :136:14, :139:14
    .io_take_branch (_hdu_io_take_branch),	// InstructionDecode.scala:51:19
    .io_taken       (_bu_io_taken)
  );
  assign io_immediate = _immediate_io_out;	// InstructionDecode.scala:117:25
  assign io_writeRegAddress = io_id_instruction[11:7];	// InstructionDecode.scala:184:42
  assign io_readData1 = _GEN;	// InstructionDecode.scala:97:60, :98:30, :104:18
  assign io_readData2 = _GEN_0;	// InstructionDecode.scala:106:60, :107:30, :113:18
  assign io_func7 = io_id_instruction[31:25];	// InstructionDecode.scala:186:32
  assign io_func3 = io_id_instruction[14:12];	// InstructionDecode.scala:145:36
  assign io_ctl_regWrite = _T_3 & _control_io_regWrite;	// InstructionDecode.scala:67:23, :76:{23,57}, :78:21, :82:21
  assign io_ctl_memWrite = _T_3 & _control_io_memWrite;	// InstructionDecode.scala:67:23, :76:{23,57}, :77:21, :81:21
  assign io_pcSrc = _bu_io_taken | (|_control_io_jump);	// InstructionDecode.scala:67:23, :143:18, :175:{20,35}
  assign io_pcPlusOffset = _control_io_jump == 2'h1 ? io_pcAddress + _immediate_io_out : _control_io_jump == 2'h2 ?
                (io_id_instruction[19:15] == io_ex_ins[11:7] ? io_ex_result : io_id_instruction[19:15] ==
                io_ex_mem_ins[11:7] ? io_ex_mem_result : io_id_instruction[19:15] == io_mem_wb_ins[11:7] ?
                io_mem_wb_result : io_id_instruction[19:15] == io_ex_ins[11:7] ? io_ex_result : _GEN) +
                _immediate_io_out : io_pcAddress + _immediate_io_out;	// InstructionDecode.scala:59:37, :67:23, :97:60, :98:30, :104:18, :117:25, :125:37, :153:{22,35,43}, :154:16, :155:{28,54}, :156:14, :157:{26,43,52}, :158:14, :159:{26,47}, :160:14, :162:16, :166:{20,29}, :167:{21,37}, :168:{26,35}, :169:{23,35}, :172:{23,39}
endmodule

module ALU(
  input  [31:0] io_input1,
                io_input2,
  input  [3:0]  io_aluCtl,
  output [31:0] io_result);

  wire [62:0]       _GEN = {31'h0, io_input1} << io_input2[4:0];	// ALU.scala:23:{41,53}
  wire [31:0]       _GEN_0 = {27'h0, io_input2[4:0]};	// ALU.scala:23:53, :24:41
  wire [15:0][31:0] _GEN_1 = {{32'h0}, {32'h0}, {32'h0}, {32'h0}, {32'h0}, {32'h0}, {io_input1 ^ io_input2},
                {$signed($signed(io_input1) >>> _GEN_0)}, {io_input1 >> _GEN_0}, {_GEN[31:0]}, {{31'h0,
                io_input1 < io_input2}}, {{31'h0, $signed(io_input1) < $signed(io_input2)}}, {io_input1 -
                io_input2}, {io_input1 + io_input2}, {io_input1 | io_input2}, {io_input1 & io_input2}};	// ALU.scala:17:{18,41}, :18:{18,41}, :19:{18,41}, :20:{18,41}, :21:{18,48}, :22:{18,41}, :23:{18,41}, :24:{18,41}, :25:{18,48}, :26:{18,41}, Mux.scala:98:16
  assign io_result = _GEN_1[io_aluCtl];	// ALU.scala:17:18, :18:18, :19:18, :20:18, :21:18, :22:18, :23:18, :24:18, :25:18, :26:18, Mux.scala:98:16
endmodule

module AluControl(
  input  [1:0] io_aluOp,
  input        io_f7,
  input  [2:0] io_f3,
  input        io_aluSrc,
  output [3:0] io_out);

  wire [7:0][3:0] _GEN = {{4'h0}, {4'h1}, {io_f7 ? 4'h8 : 4'h7}, {4'h9}, {4'h5}, {4'h4}, {4'h6}, {{3'h1,
                ~(~io_aluSrc | ~io_f7)}}};	// AluControl.scala:31:10, :38:{14,25,34,43}, :39:18, :42:20, :46:16, :49:16, :52:16, :55:29, :56:18, :58:18, :62:16, :65:16, :68:16, Conditional.scala:37:30, :39:67, :40:58
  assign io_out = io_aluOp == 2'h0 ? 4'h2 : _GEN[io_f3];	// AluControl.scala:31:10, :33:{17,26}, :34:12, :38:43, :46:16, :49:16, :52:16, :55:29, :62:16, :65:16, :68:16, Conditional.scala:37:30, :39:67, :40:58
endmodule

module ForwardingUnit(
  input  [4:0] io_ex_reg_rd,
               io_mem_reg_rd,
               io_reg_rs1,
               io_reg_rs2,
  input        io_ex_regWrite,
               io_mem_regWrite,
  output [1:0] io_forwardA,
               io_forwardB);

  assign io_forwardA = io_reg_rs1 == io_ex_reg_rd & |io_ex_reg_rd & io_ex_regWrite ? 2'h1 : {io_reg_rs1 ==
                io_mem_reg_rd & |io_mem_reg_rd & io_mem_regWrite, 1'h0};	// ForwardingUnit.scala:21:{19,52,60,79}, :22:17, :24:{18,53,61}, :25:7, :26:19, :29:19
  assign io_forwardB = io_reg_rs2 == io_ex_reg_rd & |io_ex_reg_rd & io_ex_regWrite ? 2'h1 : {io_reg_rs2 ==
                io_mem_reg_rd & |io_mem_reg_rd & io_mem_regWrite, 1'h0};	// ForwardingUnit.scala:21:52, :22:17, :25:7, :26:19, :29:19, :32:{19,60,79}, :33:17, :35:{18,53,61}, :36:7, :37:19, :40:19
endmodule

module MDU(
  input         clock,
                reset,
  input  [31:0] io_src_a,
                io_src_b,
  input  [4:0]  io_op,
  output        io_ready,
                io_output_valid,
  output [31:0] io_output_bits);

  wire        _T_40 = io_op == 5'h0;	// MDU.scala:18:30
  wire        _T_45 = io_op == 5'h1;	// MDU.scala:18:47
  wire [63:0] _GEN = {{32{io_src_a[31]}}, io_src_a};	// MDU.scala:18:78
  wire [63:0] _GEN_0 = {{32{io_src_b[31]}}, io_src_b};	// MDU.scala:18:78
  wire        _T_46 = io_op == 5'h2;	// MDU.scala:19:28
  wire        _T_48 = io_op == 5'h3;	// MDU.scala:20:28
  wire [63:0] _T_15 = _T_40 | _T_45 ? _GEN * _GEN_0 : _T_46 ? _GEN * _GEN_0 : _T_48 ? {32'h0, io_src_a} * {32'h0,
                io_src_b} : 64'h0;	// MDU.scala:18:{30,38,47,78}, :19:{28,78}, :20:{28,86}, :60:38, Mux.scala:98:16
  reg         r_ready;	// MDU.scala:26:29
  reg  [31:0] r_dividend;	// MDU.scala:28:29
  wire        _T_52 = io_op == 5'h5;	// MDU.scala:34:16
  wire        _T_54 = io_op == 5'h7;	// MDU.scala:34:33
  wire        _T_49 = _T_45 & _T_46 & _T_48;	// MDU.scala:18:47, :19:28, :20:28, :56:64
  always @(posedge clock) begin
    if (reset) begin
      r_ready <= 1'h1;	// MDU.scala:26:29
      r_dividend <= 32'h0;	// MDU.scala:28:29, :60:38
    end
    else begin
      automatic logic _T_18 = _T_52 | _T_54;	// MDU.scala:34:{16,24,33}
      r_ready <= ~_T_18 & r_ready;	// MDU.scala:26:29, :34:{24,41}, :37:32
      r_dividend <= _T_18 ? io_src_a : r_dividend;	// MDU.scala:28:29, :34:{24,41}, :37:32
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        r_ready = _RANDOM_0[0];	// MDU.scala:26:29
        r_dividend = {_RANDOM_0[31:7], _RANDOM_1[6:0]};	// MDU.scala:26:29, :28:29
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_ready = r_ready;	// MDU.scala:26:29
  assign io_output_valid = _T_40 | _T_49;	// MDU.scala:18:30, :53:24, :55:25, :56:{64,81}
  assign io_output_bits = _T_40 ? _T_15[31:0] : _T_49 ? _T_15[63:32] : _T_52 | ~_T_54 ? 32'h0 : r_dividend;	// MDU.scala:18:30, :28:29, :34:{16,33}, :53:24, :54:{24,35}, :56:{64,81}, :57:{24,35}, :59:30, :60:{24,38}, :61:30, Mux.scala:98:16
endmodule

module MduControl(
  input  [1:0] io_aluOp,
  input  [6:0] io_f7,
  input  [2:0] io_f3,
  output [3:0] io_op);

  assign io_op = io_f7 == 7'h1 & (io_f3 == 3'h0 | io_f3 == 3'h1 | io_f3 == 3'h2 | io_f3 == 3'h3 | io_f3 ==
                3'h4 | io_f3 == 3'h5 | io_f3 == 3'h6 | &io_f3) ? {1'h0, io_f3} : {2'h0, io_aluOp};	// MduControl.scala:15:{14,22,32,49,66,83,100,117,134,142,151,160}, :16:13, :19:13
endmodule

module Execute(
  input         clock,
                reset,
  input  [31:0] io_immediate,
                io_readData1,
                io_readData2,
                io_pcAddress,
  input  [6:0]  io_func7,
  input  [2:0]  io_func3,
  input  [31:0] io_mem_result,
                io_wb_result,
  input         io_ex_mem_regWrite,
                io_mem_wb_regWrite,
  input  [31:0] io_id_ex_ins,
                io_ex_mem_ins,
                io_mem_wb_ins,
  input         io_ctl_aluSrc,
  input  [1:0]  io_ctl_aluOp,
                io_ctl_aluSrc1,
  output [31:0] io_writeData,
                io_ALUresult);

  wire [3:0]       _MduControl_io_op;	// Execute.scala:81:24
  wire             _MDU_io_ready;	// Execute.scala:80:22
  wire             _MDU_io_output_valid;	// Execute.scala:80:22
  wire [31:0]      _MDU_io_output_bits;	// Execute.scala:80:22
  wire [1:0]       _ForwardingUnit_io_forwardA;	// Execute.scala:33:18
  wire [1:0]       _ForwardingUnit_io_forwardB;	// Execute.scala:33:18
  wire [3:0]       _aluCtl_io_out;	// Execute.scala:32:22
  wire [31:0]      _alu_io_result;	// Execute.scala:31:19
  wire [3:0][31:0] _GEN = {{32'h0}, {io_wb_result}, {io_mem_result}, {io_readData1}};	// Execute.scala:47:20, :48:20, :49:20, :93:65, Mux.scala:98:16
  wire [3:0][31:0] _GEN_0 = {{32'h0}, {io_wb_result}, {io_mem_result}, {io_readData2}};	// Execute.scala:55:20, :56:20, :57:20, :93:65, Mux.scala:98:16
  wire [31:0]      inputMux2 = _GEN_0[_ForwardingUnit_io_forwardB];	// Execute.scala:33:18, :55:20, :56:20, :57:20, Mux.scala:98:16
  wire [31:0]      aluIn1 = io_ctl_aluSrc1 == 2'h1 ? io_pcAddress : io_ctl_aluSrc1 == 2'h2 ? 32'h0 :
                _GEN[_ForwardingUnit_io_forwardA];	// Execute.scala:33:18, :47:20, :48:20, :49:20, :64:23, :65:23, :93:65, Mux.scala:98:16
  wire [31:0]      aluIn2 = io_ctl_aluSrc ? inputMux2 : io_immediate;	// Execute.scala:68:19, Mux.scala:98:16
  ALU alu (	// Execute.scala:31:19
    .io_input1 (aluIn1),	// Mux.scala:98:16
    .io_input2 (aluIn2),	// Execute.scala:68:19
    .io_aluCtl (_aluCtl_io_out),	// Execute.scala:32:22
    .io_result (_alu_io_result)
  );
  AluControl aluCtl (	// Execute.scala:32:22
    .io_aluOp  (io_ctl_aluOp),
    .io_f7     (io_func7[5]),	// Execute.scala:71:27
    .io_f3     (io_func3),
    .io_aluSrc (io_ctl_aluSrc),
    .io_out    (_aluCtl_io_out)
  );
  ForwardingUnit ForwardingUnit (	// Execute.scala:33:18
    .io_ex_reg_rd    (io_ex_mem_ins[11:7]),	// Execute.scala:39:32
    .io_mem_reg_rd   (io_mem_wb_ins[11:7]),	// Execute.scala:40:33
    .io_reg_rs1      (io_id_ex_ins[19:15]),	// Execute.scala:41:29
    .io_reg_rs2      (io_id_ex_ins[24:20]),	// Execute.scala:42:29
    .io_ex_regWrite  (io_ex_mem_regWrite),
    .io_mem_regWrite (io_mem_wb_regWrite),
    .io_forwardA     (_ForwardingUnit_io_forwardA),
    .io_forwardB     (_ForwardingUnit_io_forwardB)
  );
  MDU MDU (	// Execute.scala:80:22
    .clock           (clock),
    .reset           (reset),
    .io_src_a        (aluIn1),	// Mux.scala:98:16
    .io_src_b        (aluIn2),	// Execute.scala:68:19
    .io_op           ({1'h0, _MduControl_io_op}),	// Execute.scala:48:20, :81:24, :90:15
    .io_ready        (_MDU_io_ready),
    .io_output_valid (_MDU_io_output_valid),
    .io_output_bits  (_MDU_io_output_bits)
  );
  MduControl MduControl (	// Execute.scala:81:24
    .io_aluOp (io_ctl_aluOp),
    .io_f7    (io_func7),
    .io_f3    (io_func3),
    .io_op    (_MduControl_io_op)
  );
  assign io_writeData = inputMux2;	// Mux.scala:98:16
  assign io_ALUresult = io_func7 == 7'h1 & _MDU_io_ready ? (_MDU_io_output_valid ? _MDU_io_output_bits : 32'h0) :
                _alu_io_result;	// Execute.scala:31:19, :80:22, :93:{20,28,44,58,65}, :94:29
endmodule

module MemoryFetch(
  input         clock,
                reset,
  input  [31:0] io_aluResultIn,
                io_writeData,
  input         io_writeEnable,
                io_readEnable,
                io_dccmRsp_valid,
  input  [31:0] io_dccmRsp_bits_dataResponse,
  output [31:0] io_readData,
  output        io_stall,
                io_dccmReq_valid,
  output [31:0] io_dccmReq_bits_addrRequest,
                io_dccmReq_bits_dataRequest,
  output        io_dccmReq_bits_isWrite);

  wire _T_2 = io_writeEnable | io_readEnable;	// MemoryFetch.scala:33:42
  `ifndef SYNTHESIS	// MemoryFetch.scala:43:11
    always @(posedge clock) begin	// MemoryFetch.scala:43:11
      if ((`PRINTF_COND_) & io_writeEnable & io_aluResultIn[31:28] == 4'h8 & ~reset)	// MemoryFetch.scala:42:{40,49}, :43:11
        $fwrite(32'h80000002, "%x\n", io_writeData);	// MemoryFetch.scala:43:11
    end // always @(posedge)
  `endif
  assign io_readData = io_dccmRsp_valid ? io_dccmRsp_bits_dataResponse : 32'h0;	// MemoryFetch.scala:40:21
  assign io_stall = _T_2 & ~io_dccmRsp_valid;	// MemoryFetch.scala:33:42, :35:{49,52}
  assign io_dccmReq_valid = _T_2;	// MemoryFetch.scala:33:42
  assign io_dccmReq_bits_addrRequest = io_aluResultIn;
  assign io_dccmReq_bits_dataRequest = io_writeData;
  assign io_dccmReq_bits_isWrite = io_writeEnable;
endmodule

module PC(
  input         clock,
                reset,
  input  [31:0] io_in,
  input         io_halt,
  output [31:0] io_out,
                io_pc4);

  reg [31:0] pc_reg;	// PC.scala:12:23
  always @(posedge clock) begin
    if (reset)
      pc_reg <= 32'hFFFFFFFC;	// PC.scala:12:23
    else
      pc_reg <= io_in;	// PC.scala:12:23
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        pc_reg = _RANDOM_0;	// PC.scala:12:23
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  assign io_out = pc_reg;	// PC.scala:12:23
  assign io_pc4 = io_halt ? pc_reg : pc_reg + 32'h4;	// PC.scala:12:23, :15:{16,41}
endmodule

module Core(
  input         clock,
                reset,
                io_dmemRsp_valid,
  input  [31:0] io_dmemRsp_bits_dataResponse,
  input         io_imemReq_ready,
                io_imemRsp_valid,
  input  [31:0] io_imemRsp_bits_dataResponse,
  output        io_dmemReq_valid,
  output [31:0] io_dmemReq_bits_addrRequest,
                io_dmemReq_bits_dataRequest,
  output        io_dmemReq_bits_isWrite,
                io_imemReq_valid,
  output [31:0] io_imemReq_bits_addrRequest);

  wire [31:0] _pc_io_out;	// Core.scala:79:18
  wire [31:0] _pc_io_pc4;	// Core.scala:79:18
  wire [31:0] _MEM_io_readData;	// Core.scala:73:19
  wire        _MEM_io_stall;	// Core.scala:73:19
  wire [31:0] _Execute_io_writeData;	// Core.scala:72:18
  wire [31:0] _Execute_io_ALUresult;	// Core.scala:72:18
  wire [31:0] _InstructionDecode_io_immediate;	// Core.scala:71:18
  wire [4:0]  _InstructionDecode_io_writeRegAddress;	// Core.scala:71:18
  wire [31:0] _InstructionDecode_io_readData1;	// Core.scala:71:18
  wire [31:0] _InstructionDecode_io_readData2;	// Core.scala:71:18
  wire [6:0]  _InstructionDecode_io_func7;	// Core.scala:71:18
  wire [2:0]  _InstructionDecode_io_func3;	// Core.scala:71:18
  wire        _InstructionDecode_io_ctl_aluSrc;	// Core.scala:71:18
  wire [1:0]  _InstructionDecode_io_ctl_memToReg;	// Core.scala:71:18
  wire        _InstructionDecode_io_ctl_regWrite;	// Core.scala:71:18
  wire        _InstructionDecode_io_ctl_memRead;	// Core.scala:71:18
  wire        _InstructionDecode_io_ctl_memWrite;	// Core.scala:71:18
  wire [1:0]  _InstructionDecode_io_ctl_aluOp;	// Core.scala:71:18
  wire [1:0]  _InstructionDecode_io_ctl_aluSrc1;	// Core.scala:71:18
  wire        _InstructionDecode_io_hdu_pcWrite;	// Core.scala:71:18
  wire        _InstructionDecode_io_hdu_if_reg_write;	// Core.scala:71:18
  wire        _InstructionDecode_io_pcSrc;	// Core.scala:71:18
  wire [31:0] _InstructionDecode_io_pcPlusOffset;	// Core.scala:71:18
  wire        _InstructionDecode_io_ifid_flush;	// Core.scala:71:18
  wire [31:0] _InstructionFetch_io_instruction;	// Core.scala:70:18
  wire        _InstructionFetch_io_coreInstrReq_valid;	// Core.scala:70:18
  reg  [31:0] if_reg_pc;	// Core.scala:23:26
  reg  [31:0] if_reg_ins;	// Core.scala:24:27
  reg  [31:0] id_reg_pc;	// Core.scala:27:26
  reg  [31:0] id_reg_rd1;	// Core.scala:28:27
  reg  [31:0] id_reg_rd2;	// Core.scala:29:27
  reg  [31:0] id_reg_imm;	// Core.scala:30:27
  reg  [4:0]  id_reg_wra;	// Core.scala:31:27
  reg  [6:0]  id_reg_f7;	// Core.scala:32:26
  reg  [2:0]  id_reg_f3;	// Core.scala:33:26
  reg  [31:0] id_reg_ins;	// Core.scala:34:27
  reg         id_reg_ctl_aluSrc;	// Core.scala:35:34
  reg  [1:0]  id_reg_ctl_aluSrc1;	// Core.scala:36:35
  reg  [1:0]  id_reg_ctl_memToReg;	// Core.scala:37:36
  reg         id_reg_ctl_regWrite;	// Core.scala:38:36
  reg         id_reg_ctl_memRead;	// Core.scala:39:35
  reg         id_reg_ctl_memWrite;	// Core.scala:40:36
  reg  [1:0]  id_reg_ctl_aluOp;	// Core.scala:42:33
  reg  [31:0] ex_reg_result;	// Core.scala:48:30
  reg  [31:0] ex_reg_wd;	// Core.scala:49:26
  reg  [4:0]  ex_reg_wra;	// Core.scala:50:27
  reg  [31:0] ex_reg_ins;	// Core.scala:51:27
  reg  [1:0]  ex_reg_ctl_memToReg;	// Core.scala:52:36
  reg         ex_reg_ctl_regWrite;	// Core.scala:53:36
  reg         ex_reg_ctl_memRead;	// Core.scala:54:35
  reg         ex_reg_ctl_memWrite;	// Core.scala:55:36
  reg  [31:0] ex_reg_pc;	// Core.scala:57:26
  reg  [31:0] mem_reg_ins;	// Core.scala:61:28
  reg  [31:0] mem_reg_result;	// Core.scala:62:31
  reg  [4:0]  mem_reg_wra;	// Core.scala:64:28
  reg  [1:0]  mem_reg_ctl_memToReg;	// Core.scala:65:37
  reg         mem_reg_ctl_regWrite;	// Core.scala:66:37
  reg  [31:0] mem_reg_pc;	// Core.scala:67:27
  wire [31:0] _T_6 = _InstructionDecode_io_hdu_pcWrite & ~_MEM_io_stall ? (_InstructionDecode_io_pcSrc ?
                _InstructionDecode_io_pcPlusOffset : _pc_io_pc4) : _pc_io_out;	// Core.scala:71:18, :73:19, :79:18, :88:{18,34,37,55}
  wire        _T_15 = mem_reg_ctl_memToReg == 2'h1;	// Core.scala:65:37, :223:29
  wire [31:0] _GEN = _T_15 ? _MEM_io_readData : mem_reg_ctl_memToReg == 2'h2 ? mem_reg_pc : mem_reg_result;	// Core.scala:62:31, :65:37, :67:27, :73:19, :223:{29,38}, :224:13, :226:{35,44}, :227:15, :231:15
  always @(posedge clock) begin
    if (reset) begin
      if_reg_pc <= 32'h0;	// Core.scala:23:26
      if_reg_ins <= 32'h0;	// Core.scala:24:27
      id_reg_pc <= 32'h0;	// Core.scala:27:26
      id_reg_rd1 <= 32'h0;	// Core.scala:28:27
      id_reg_rd2 <= 32'h0;	// Core.scala:29:27
      id_reg_imm <= 32'h0;	// Core.scala:30:27
      id_reg_wra <= 5'h0;	// Core.scala:31:27
      id_reg_f7 <= 7'h0;	// Core.scala:32:26
      id_reg_f3 <= 3'h0;	// Core.scala:33:26
      id_reg_ins <= 32'h0;	// Core.scala:34:27
      id_reg_ctl_aluSrc <= 1'h0;	// Core.scala:35:34
      id_reg_ctl_aluSrc1 <= 2'h0;	// Core.scala:36:35
      id_reg_ctl_memToReg <= 2'h0;	// Core.scala:36:35, :37:36
      id_reg_ctl_regWrite <= 1'h0;	// Core.scala:38:36
      id_reg_ctl_memRead <= 1'h0;	// Core.scala:39:35
      id_reg_ctl_memWrite <= 1'h0;	// Core.scala:40:36
      id_reg_ctl_aluOp <= 2'h0;	// Core.scala:36:35, :42:33
      ex_reg_result <= 32'h0;	// Core.scala:48:30
      ex_reg_wd <= 32'h0;	// Core.scala:49:26
      ex_reg_wra <= 5'h0;	// Core.scala:31:27, :50:27
      ex_reg_ins <= 32'h0;	// Core.scala:51:27
      ex_reg_ctl_memToReg <= 2'h0;	// Core.scala:36:35, :52:36
      ex_reg_ctl_regWrite <= 1'h0;	// Core.scala:53:36
      ex_reg_ctl_memRead <= 1'h0;	// Core.scala:54:35
      ex_reg_ctl_memWrite <= 1'h0;	// Core.scala:55:36
      ex_reg_pc <= 32'h0;	// Core.scala:57:26
      mem_reg_ins <= 32'h0;	// Core.scala:61:28
      mem_reg_result <= 32'h0;	// Core.scala:62:31
      mem_reg_wra <= 5'h0;	// Core.scala:31:27, :64:28
      mem_reg_ctl_memToReg <= 2'h0;	// Core.scala:36:35, :65:37
      mem_reg_ctl_regWrite <= 1'h0;	// Core.scala:66:37
      mem_reg_pc <= 32'h0;	// Core.scala:67:27
    end
    else begin
      automatic logic _T_8 = _InstructionDecode_io_hdu_if_reg_write & ~_MEM_io_stall;	// Core.scala:71:18, :73:19, :88:37, :91:28
      if_reg_pc <= _T_8 ? _pc_io_out : if_reg_pc;	// Core.scala:23:26, :79:18, :91:{28,46}, :92:15
      if_reg_ins <= _InstructionDecode_io_ifid_flush ? 32'h0 : _T_8 ? (io_imemRsp_valid ?
                                                _InstructionFetch_io_instruction : 32'h13) : if_reg_ins;	// Core.scala:24:27, :70:18, :71:18, :85:24, :91:{28,46}, :93:16, :95:23, :96:16
      id_reg_pc <= if_reg_pc;	// Core.scala:23:26, :27:26
      id_reg_rd1 <= _InstructionDecode_io_readData1;	// Core.scala:28:27, :71:18
      id_reg_rd2 <= _InstructionDecode_io_readData2;	// Core.scala:29:27, :71:18
      id_reg_imm <= _InstructionDecode_io_immediate;	// Core.scala:30:27, :71:18
      id_reg_wra <= _InstructionDecode_io_writeRegAddress;	// Core.scala:31:27, :71:18
      id_reg_f7 <= _InstructionDecode_io_func7;	// Core.scala:32:26, :71:18
      id_reg_f3 <= _InstructionDecode_io_func3;	// Core.scala:33:26, :71:18
      id_reg_ins <= if_reg_ins;	// Core.scala:24:27, :34:27
      id_reg_ctl_aluSrc <= _InstructionDecode_io_ctl_aluSrc;	// Core.scala:35:34, :71:18
      id_reg_ctl_aluSrc1 <= _InstructionDecode_io_ctl_aluSrc1;	// Core.scala:36:35, :71:18
      id_reg_ctl_memToReg <= _InstructionDecode_io_ctl_memToReg;	// Core.scala:37:36, :71:18
      id_reg_ctl_regWrite <= _InstructionDecode_io_ctl_regWrite;	// Core.scala:38:36, :71:18
      id_reg_ctl_memRead <= _InstructionDecode_io_ctl_memRead;	// Core.scala:39:35, :71:18
      id_reg_ctl_memWrite <= _InstructionDecode_io_ctl_memWrite;	// Core.scala:40:36, :71:18
      id_reg_ctl_aluOp <= _InstructionDecode_io_ctl_aluOp;	// Core.scala:42:33, :71:18
      ex_reg_result <= _Execute_io_ALUresult;	// Core.scala:48:30, :72:18
      ex_reg_wd <= _Execute_io_writeData;	// Core.scala:49:26, :72:18
      ex_reg_wra <= _MEM_io_stall ? ex_reg_wra : id_reg_wra;	// Core.scala:31:27, :50:27, :73:19, :153:14, :181:21, :185:16
      ex_reg_ins <= id_reg_ins;	// Core.scala:34:27, :51:27
      ex_reg_ctl_memToReg <= _MEM_io_stall ? ex_reg_ctl_memToReg : id_reg_ctl_memToReg;	// Core.scala:37:36, :52:36, :73:19, :155:23, :181:21, :186:25
      ex_reg_ctl_regWrite <= _MEM_io_stall ? ex_reg_ctl_regWrite : id_reg_ctl_regWrite;	// Core.scala:38:36, :53:36, :73:19, :156:23, :181:21, :188:25
      ex_reg_ctl_memRead <= _MEM_io_stall ? ex_reg_ctl_memRead : id_reg_ctl_memRead;	// Core.scala:39:35, :54:35, :73:19, :181:21, :193:24, :204:24
      ex_reg_ctl_memWrite <= _MEM_io_stall ? ex_reg_ctl_memWrite : id_reg_ctl_memWrite;	// Core.scala:40:36, :55:36, :73:19, :181:21, :194:25, :205:25
      ex_reg_pc <= id_reg_pc;	// Core.scala:27:26, :57:26
      mem_reg_ins <= _MEM_io_stall ? mem_reg_ins : ex_reg_ins;	// Core.scala:51:27, :61:28, :73:19, :181:21, :190:17, :201:17
      mem_reg_result <= _MEM_io_stall ? mem_reg_result : ex_reg_result;	// Core.scala:48:30, :62:31, :73:19, :181:21, :183:20, :198:20
      mem_reg_wra <= ex_reg_wra;	// Core.scala:50:27, :64:28
      mem_reg_ctl_memToReg <= ex_reg_ctl_memToReg;	// Core.scala:52:36, :65:37
      mem_reg_ctl_regWrite <= ex_reg_ctl_regWrite;	// Core.scala:53:36, :66:37
      mem_reg_pc <= _MEM_io_stall ? mem_reg_pc : ex_reg_pc;	// Core.scala:57:26, :67:27, :73:19, :181:21, :191:16, :202:16
    end
  end // always @(posedge)
  `ifndef SYNTHESIS
    `ifdef FIRRTL_BEFORE_INITIAL
      `FIRRTL_BEFORE_INITIAL
    `endif
    initial begin
      automatic logic [31:0] _RANDOM_0;
      automatic logic [31:0] _RANDOM_1;
      automatic logic [31:0] _RANDOM_2;
      automatic logic [31:0] _RANDOM_3;
      automatic logic [31:0] _RANDOM_4;
      automatic logic [31:0] _RANDOM_5;
      automatic logic [31:0] _RANDOM_6;
      automatic logic [31:0] _RANDOM_7;
      automatic logic [31:0] _RANDOM_8;
      automatic logic [31:0] _RANDOM_9;
      automatic logic [31:0] _RANDOM_10;
      automatic logic [31:0] _RANDOM_11;
      automatic logic [31:0] _RANDOM_12;
      automatic logic [31:0] _RANDOM_13;
      automatic logic [31:0] _RANDOM_14;
      automatic logic [31:0] _RANDOM_15;
      automatic logic [31:0] _RANDOM_16;
      automatic logic [31:0] _RANDOM_17;
      automatic logic [31:0] _RANDOM_18;
      automatic logic [31:0] _RANDOM_19;
      `ifdef INIT_RANDOM_PROLOG_
        `INIT_RANDOM_PROLOG_
      `endif
      `ifdef RANDOMIZE_REG_INIT
        _RANDOM_0 = `RANDOM;
        _RANDOM_1 = `RANDOM;
        _RANDOM_2 = `RANDOM;
        _RANDOM_3 = `RANDOM;
        _RANDOM_4 = `RANDOM;
        _RANDOM_5 = `RANDOM;
        _RANDOM_6 = `RANDOM;
        _RANDOM_7 = `RANDOM;
        _RANDOM_8 = `RANDOM;
        _RANDOM_9 = `RANDOM;
        _RANDOM_10 = `RANDOM;
        _RANDOM_11 = `RANDOM;
        _RANDOM_12 = `RANDOM;
        _RANDOM_13 = `RANDOM;
        _RANDOM_14 = `RANDOM;
        _RANDOM_15 = `RANDOM;
        _RANDOM_16 = `RANDOM;
        _RANDOM_17 = `RANDOM;
        _RANDOM_18 = `RANDOM;
        _RANDOM_19 = `RANDOM;
        if_reg_pc = _RANDOM_0;	// Core.scala:23:26
        if_reg_ins = _RANDOM_1;	// Core.scala:24:27
        id_reg_pc = _RANDOM_2;	// Core.scala:27:26
        id_reg_rd1 = _RANDOM_3;	// Core.scala:28:27
        id_reg_rd2 = _RANDOM_4;	// Core.scala:29:27
        id_reg_imm = _RANDOM_5;	// Core.scala:30:27
        id_reg_wra = _RANDOM_6[4:0];	// Core.scala:31:27
        id_reg_f7 = _RANDOM_6[11:5];	// Core.scala:31:27, :32:26
        id_reg_f3 = _RANDOM_6[14:12];	// Core.scala:31:27, :33:26
        id_reg_ins = {_RANDOM_6[31:15], _RANDOM_7[14:0]};	// Core.scala:31:27, :34:27
        id_reg_ctl_aluSrc = _RANDOM_7[15];	// Core.scala:34:27, :35:34
        id_reg_ctl_aluSrc1 = _RANDOM_7[17:16];	// Core.scala:34:27, :36:35
        id_reg_ctl_memToReg = _RANDOM_7[19:18];	// Core.scala:34:27, :37:36
        id_reg_ctl_regWrite = _RANDOM_7[20];	// Core.scala:34:27, :38:36
        id_reg_ctl_memRead = _RANDOM_7[21];	// Core.scala:34:27, :39:35
        id_reg_ctl_memWrite = _RANDOM_7[22];	// Core.scala:34:27, :40:36
        id_reg_ctl_aluOp = _RANDOM_7[25:24];	// Core.scala:34:27, :42:33
        ex_reg_result = {_RANDOM_9[31:28], _RANDOM_10[27:0]};	// Core.scala:48:30
        ex_reg_wd = {_RANDOM_10[31:28], _RANDOM_11[27:0]};	// Core.scala:48:30, :49:26
        ex_reg_wra = {_RANDOM_11[31:28], _RANDOM_12[0]};	// Core.scala:49:26, :50:27
        ex_reg_ins = {_RANDOM_12[31:1], _RANDOM_13[0]};	// Core.scala:50:27, :51:27
        ex_reg_ctl_memToReg = _RANDOM_13[2:1];	// Core.scala:51:27, :52:36
        ex_reg_ctl_regWrite = _RANDOM_13[3];	// Core.scala:51:27, :53:36
        ex_reg_ctl_memRead = _RANDOM_13[4];	// Core.scala:51:27, :54:35
        ex_reg_ctl_memWrite = _RANDOM_13[5];	// Core.scala:51:27, :55:36
        ex_reg_pc = {_RANDOM_13[31:7], _RANDOM_14[6:0]};	// Core.scala:51:27, :57:26
        mem_reg_ins = {_RANDOM_15[31:7], _RANDOM_16[6:0]};	// Core.scala:61:28
        mem_reg_result = {_RANDOM_16[31:7], _RANDOM_17[6:0]};	// Core.scala:61:28, :62:31
        mem_reg_wra = _RANDOM_18[11:7];	// Core.scala:64:28
        mem_reg_ctl_memToReg = _RANDOM_18[13:12];	// Core.scala:64:28, :65:37
        mem_reg_ctl_regWrite = _RANDOM_18[14];	// Core.scala:64:28, :66:37
        mem_reg_pc = {_RANDOM_18[31:15], _RANDOM_19[14:0]};	// Core.scala:64:28, :67:27
      `endif
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL
      `FIRRTL_AFTER_INITIAL
    `endif
  `endif
  InstructionFetch InstructionFetch (	// Core.scala:70:18
    .io_address                         (_T_6),	// Core.scala:88:18
    .io_coreInstrReq_ready              (io_imemReq_ready),
    .io_coreInstrResp_valid             (io_imemRsp_valid),
    .io_coreInstrResp_bits_dataResponse (io_imemRsp_bits_dataResponse),
    .io_instruction                     (_InstructionFetch_io_instruction),
    .io_coreInstrReq_valid              (_InstructionFetch_io_coreInstrReq_valid),
    .io_coreInstrReq_bits_addrRequest   (io_imemReq_bits_addrRequest)
  );
  InstructionDecode InstructionDecode (	// Core.scala:71:18
    .clock               (clock),
    .reset               (reset),
    .io_id_instruction   (if_reg_ins),	// Core.scala:24:27
    .io_writeData        (_GEN),	// Core.scala:223:38, :224:13, :226:44
    .io_writeReg         (~_T_15 | io_dmemRsp_valid ? mem_reg_wra : 5'h0),	// Core.scala:31:27, :64:28, :223:{29,38}, :225:13, :226:44
    .io_pcAddress        (if_reg_pc),	// Core.scala:23:26
    .io_ctl_writeEnable  (mem_reg_ctl_regWrite),	// Core.scala:66:37
    .io_id_ex_mem_read   (id_reg_ctl_memRead),	// Core.scala:39:35
    .io_ex_mem_mem_read  (ex_reg_ctl_memRead),	// Core.scala:54:35
    .io_id_ex_rd         (id_reg_ins[11:7]),	// Core.scala:34:27, :167:28
    .io_ex_mem_rd        (ex_reg_ins[11:7]),	// Core.scala:51:27, :169:29
    .io_id_ex_branch     (id_reg_ins[6:0] == 7'h63),	// Core.scala:34:27, :168:{36,42}
    .io_ex_mem_ins       (ex_reg_ins),	// Core.scala:51:27
    .io_mem_wb_ins       (mem_reg_ins),	// Core.scala:61:28
    .io_ex_ins           (id_reg_ins),	// Core.scala:34:27
    .io_ex_result        (_Execute_io_ALUresult),	// Core.scala:72:18
    .io_ex_mem_result    (ex_reg_result),	// Core.scala:48:30
    .io_mem_wb_result    (_GEN),	// Core.scala:223:38, :224:13, :226:44
    .io_immediate        (_InstructionDecode_io_immediate),
    .io_writeRegAddress  (_InstructionDecode_io_writeRegAddress),
    .io_readData1        (_InstructionDecode_io_readData1),
    .io_readData2        (_InstructionDecode_io_readData2),
    .io_func7            (_InstructionDecode_io_func7),
    .io_func3            (_InstructionDecode_io_func3),
    .io_ctl_aluSrc       (_InstructionDecode_io_ctl_aluSrc),
    .io_ctl_memToReg     (_InstructionDecode_io_ctl_memToReg),
    .io_ctl_regWrite     (_InstructionDecode_io_ctl_regWrite),
    .io_ctl_memRead      (_InstructionDecode_io_ctl_memRead),
    .io_ctl_memWrite     (_InstructionDecode_io_ctl_memWrite),
    .io_ctl_aluOp        (_InstructionDecode_io_ctl_aluOp),
    .io_ctl_aluSrc1      (_InstructionDecode_io_ctl_aluSrc1),
    .io_hdu_pcWrite      (_InstructionDecode_io_hdu_pcWrite),
    .io_hdu_if_reg_write (_InstructionDecode_io_hdu_if_reg_write),
    .io_pcSrc            (_InstructionDecode_io_pcSrc),
    .io_pcPlusOffset     (_InstructionDecode_io_pcPlusOffset),
    .io_ifid_flush       (_InstructionDecode_io_ifid_flush)
  );
  Execute Execute (	// Core.scala:72:18
    .clock              (clock),
    .reset              (reset),
    .io_immediate       (id_reg_imm),	// Core.scala:30:27
    .io_readData1       (id_reg_rd1),	// Core.scala:28:27
    .io_readData2       (id_reg_rd2),	// Core.scala:29:27
    .io_pcAddress       (id_reg_pc),	// Core.scala:27:26
    .io_func7           (id_reg_f7),	// Core.scala:32:26
    .io_func3           (id_reg_f3),	// Core.scala:33:26
    .io_mem_result      (ex_reg_result),	// Core.scala:48:30
    .io_wb_result       (_GEN),	// Core.scala:223:38, :224:13, :226:44
    .io_ex_mem_regWrite (ex_reg_ctl_regWrite),	// Core.scala:53:36
    .io_mem_wb_regWrite (mem_reg_ctl_regWrite),	// Core.scala:66:37
    .io_id_ex_ins       (id_reg_ins),	// Core.scala:34:27
    .io_ex_mem_ins      (ex_reg_ins),	// Core.scala:51:27
    .io_mem_wb_ins      (mem_reg_ins),	// Core.scala:61:28
    .io_ctl_aluSrc      (id_reg_ctl_aluSrc),	// Core.scala:35:34
    .io_ctl_aluOp       (id_reg_ctl_aluOp),	// Core.scala:42:33
    .io_ctl_aluSrc1     (id_reg_ctl_aluSrc1),	// Core.scala:36:35
    .io_writeData       (_Execute_io_writeData),
    .io_ALUresult       (_Execute_io_ALUresult)
  );
  MemoryFetch MEM (	// Core.scala:73:19
    .clock                        (clock),
    .reset                        (reset),
    .io_aluResultIn               (ex_reg_result),	// Core.scala:48:30
    .io_writeData                 (ex_reg_wd),	// Core.scala:49:26
    .io_writeEnable               (ex_reg_ctl_memWrite),	// Core.scala:55:36
    .io_readEnable                (ex_reg_ctl_memRead),	// Core.scala:54:35
    .io_dccmRsp_valid             (io_dmemRsp_valid),
    .io_dccmRsp_bits_dataResponse (io_dmemRsp_bits_dataResponse),
    .io_readData                  (_MEM_io_readData),
    .io_stall                     (_MEM_io_stall),
    .io_dccmReq_valid             (io_dmemReq_valid),
    .io_dccmReq_bits_addrRequest  (io_dmemReq_bits_addrRequest),
    .io_dccmReq_bits_dataRequest  (io_dmemReq_bits_dataRequest),
    .io_dccmReq_bits_isWrite      (io_dmemReq_bits_isWrite)
  );
  PC pc (	// Core.scala:79:18
    .clock   (clock),
    .reset   (reset),
    .io_in   (_T_6),	// Core.scala:88:18
    .io_halt (~_InstructionFetch_io_coreInstrReq_valid),	// Core.scala:70:18, :87:20
    .io_out  (_pc_io_out),
    .io_pc4  (_pc_io_pc4)
  );
  assign io_imemReq_valid = _InstructionFetch_io_coreInstrReq_valid;	// Core.scala:70:18
endmodule

module Switch1toN(
  input         io_hostIn_valid,
                io_hostIn_bits_cyc,
                io_hostIn_bits_stb,
                io_hostIn_bits_we,
  input  [31:0] io_hostIn_bits_adr,
                io_hostIn_bits_dat,
  input  [3:0]  io_hostIn_bits_sel,
  input         io_devIn_0_bits_ack,
  input  [31:0] io_devIn_0_bits_dat,
  input         io_devIn_1_bits_ack,
  input  [31:0] io_devIn_1_bits_dat,
  input         io_devIn_1_bits_err,
                io_devIn_2_bits_ack,
  input  [31:0] io_devIn_2_bits_dat,
  input         io_devIn_2_bits_err,
                io_devIn_3_bits_ack,
  input  [31:0] io_devIn_3_bits_dat,
  input         io_devIn_3_bits_err,
                io_devIn_4_bits_ack,
  input  [31:0] io_devIn_4_bits_dat,
  input         io_devIn_4_bits_err,
                io_devIn_5_bits_ack,
  input  [31:0] io_devIn_5_bits_dat,
  input         io_devIn_5_bits_err,
                io_devIn_6_bits_ack,
  input  [31:0] io_devIn_6_bits_dat,
  input         io_devIn_6_bits_err,
  input  [31:0] io_devIn_7_bits_dat,
  input         io_devIn_7_bits_err,
  input  [2:0]  io_devSel,
  output        io_hostOut_bits_ack,
  output [31:0] io_hostOut_bits_dat,
  output        io_hostOut_bits_err,
                io_devOut_0_valid,
                io_devOut_0_bits_cyc,
                io_devOut_0_bits_stb,
                io_devOut_0_bits_we,
  output [31:0] io_devOut_0_bits_adr,
                io_devOut_0_bits_dat,
  output [3:0]  io_devOut_0_bits_sel,
  output        io_devOut_1_valid,
                io_devOut_1_bits_cyc,
                io_devOut_1_bits_stb,
                io_devOut_1_bits_we,
  output [31:0] io_devOut_1_bits_adr,
                io_devOut_1_bits_dat,
  output [3:0]  io_devOut_1_bits_sel,
  output        io_devOut_2_valid,
                io_devOut_2_bits_cyc,
                io_devOut_2_bits_stb,
                io_devOut_2_bits_we,
  output [31:0] io_devOut_2_bits_adr,
                io_devOut_2_bits_dat,
  output [3:0]  io_devOut_2_bits_sel,
  output        io_devOut_3_valid,
                io_devOut_3_bits_cyc,
                io_devOut_3_bits_stb,
                io_devOut_3_bits_we,
  output [31:0] io_devOut_3_bits_adr,
                io_devOut_3_bits_dat,
  output        io_devOut_4_valid,
                io_devOut_4_bits_cyc,
                io_devOut_4_bits_stb,
                io_devOut_4_bits_we,
  output [31:0] io_devOut_4_bits_adr,
                io_devOut_4_bits_dat,
  output [3:0]  io_devOut_4_bits_sel,
  output        io_devOut_5_valid,
                io_devOut_5_bits_cyc,
                io_devOut_5_bits_stb,
                io_devOut_5_bits_we,
  output [31:0] io_devOut_5_bits_adr,
                io_devOut_5_bits_dat,
  output [3:0]  io_devOut_5_bits_sel,
  output        io_devOut_6_valid,
                io_devOut_6_bits_cyc,
                io_devOut_6_bits_stb,
                io_devOut_6_bits_we,
  output [31:0] io_devOut_6_bits_adr,
                io_devOut_6_bits_dat,
  output        io_devOut_7_valid,
                io_devOut_7_bits_cyc,
                io_devOut_7_bits_stb);

  wire             _T = io_devSel == 3'h0;	// Switch1toN.scala:33:57
  wire             _GEN = ~_T & io_devIn_7_bits_err;	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  wire             _GEN_0 = _T & io_devIn_0_bits_ack;	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  wire [7:0]       _GEN_1 = {{_GEN}, {io_devIn_6_bits_err}, {io_devIn_5_bits_err}, {io_devIn_4_bits_err},
                {io_devIn_3_bits_err}, {io_devIn_2_bits_err}, {io_devIn_1_bits_err}, {_GEN}};	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  wire [7:0][31:0] _GEN_2 = {{io_devIn_7_bits_dat}, {io_devIn_6_bits_dat}, {io_devIn_5_bits_dat},
                {io_devIn_4_bits_dat}, {io_devIn_3_bits_dat}, {io_devIn_2_bits_dat}, {io_devIn_1_bits_dat},
                {io_devIn_0_bits_dat}};	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  wire [7:0]       _GEN_3 = {{_GEN_0}, {io_devIn_6_bits_ack}, {io_devIn_5_bits_ack}, {io_devIn_4_bits_ack},
                {io_devIn_3_bits_ack}, {io_devIn_2_bits_ack}, {io_devIn_1_bits_ack}, {_GEN_0}};	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  assign io_hostOut_bits_ack = _GEN_3[io_devSel];	// Switch1toN.scala:33:57, :39:35, :40:23
  assign io_hostOut_bits_dat = _GEN_2[io_devSel];	// Switch1toN.scala:27:19, :33:57, :39:35, :40:23
  assign io_hostOut_bits_err = _GEN_1[io_devSel];	// Switch1toN.scala:33:57, :39:35, :40:23
  assign io_devOut_0_valid = io_hostIn_valid & _T;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_0_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_0_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_0_bits_we = io_hostIn_bits_we;
  assign io_devOut_0_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_0_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_0_bits_sel = io_hostIn_bits_sel;
  assign io_devOut_1_valid = io_hostIn_valid & io_devSel == 3'h1;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_1_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_1_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_1_bits_we = io_hostIn_bits_we;
  assign io_devOut_1_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_1_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_1_bits_sel = io_hostIn_bits_sel;
  assign io_devOut_2_valid = io_hostIn_valid & io_devSel == 3'h2;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_2_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_2_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_2_bits_we = io_hostIn_bits_we;
  assign io_devOut_2_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_2_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_2_bits_sel = io_hostIn_bits_sel;
  assign io_devOut_3_valid = io_hostIn_valid & io_devSel == 3'h3;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_3_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_3_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_3_bits_we = io_hostIn_bits_we;
  assign io_devOut_3_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_3_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_4_valid = io_hostIn_valid & io_devSel == 3'h4;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_4_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_4_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_4_bits_we = io_hostIn_bits_we;
  assign io_devOut_4_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_4_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_4_bits_sel = io_hostIn_bits_sel;
  assign io_devOut_5_valid = io_hostIn_valid & io_devSel == 3'h5;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_5_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_5_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_5_bits_we = io_hostIn_bits_we;
  assign io_devOut_5_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_5_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_5_bits_sel = io_hostIn_bits_sel;
  assign io_devOut_6_valid = io_hostIn_valid & io_devSel == 3'h6;	// Switch1toN.scala:33:{43,57}
  assign io_devOut_6_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_6_bits_stb = io_hostIn_bits_stb;
  assign io_devOut_6_bits_we = io_hostIn_bits_we;
  assign io_devOut_6_bits_adr = io_hostIn_bits_adr;
  assign io_devOut_6_bits_dat = io_hostIn_bits_dat;
  assign io_devOut_7_valid = io_hostIn_valid & (&io_devSel);	// Switch1toN.scala:23:{41,55}
  assign io_devOut_7_bits_cyc = io_hostIn_bits_cyc;
  assign io_devOut_7_bits_stb = io_hostIn_bits_stb;
endmodule

module Generator(
  input        clock,
               reset,
  input  [3:0] io_gpio_i,
  input        io_spi_miso,
               io_cio_uart_rx_i,
               io_spi_flash_miso,
               io_i2c_sda_in,
  output [3:0] io_gpio_o,
               io_gpio_en_o,
  output       io_spi_cs_n,
               io_spi_sclk,
               io_spi_mosi,
               io_cio_uart_tx_o,
               io_cio_uart_intr_tx_o,
               io_timer_intr_cmp,
               io_timer_intr_ovf,
               io_spi_flash_cs_n,
               io_spi_flash_sclk,
               io_spi_flash_mosi,
               io_i2c_sda,
               io_i2c_scl,
               io_i2c_intr);

  wire        _switch_io_hostOut_bits_ack;	// Generator.scala:224:24
  wire [31:0] _switch_io_hostOut_bits_dat;	// Generator.scala:224:24
  wire        _switch_io_hostOut_bits_err;	// Generator.scala:224:24
  wire        _switch_io_devOut_0_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_0_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_0_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_0_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_0_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_0_bits_dat;	// Generator.scala:224:24
  wire [3:0]  _switch_io_devOut_0_bits_sel;	// Generator.scala:224:24
  wire        _switch_io_devOut_1_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_1_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_1_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_1_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_1_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_1_bits_dat;	// Generator.scala:224:24
  wire [3:0]  _switch_io_devOut_1_bits_sel;	// Generator.scala:224:24
  wire        _switch_io_devOut_2_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_2_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_2_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_2_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_2_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_2_bits_dat;	// Generator.scala:224:24
  wire [3:0]  _switch_io_devOut_2_bits_sel;	// Generator.scala:224:24
  wire        _switch_io_devOut_3_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_3_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_3_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_3_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_3_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_3_bits_dat;	// Generator.scala:224:24
  wire        _switch_io_devOut_4_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_4_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_4_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_4_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_4_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_4_bits_dat;	// Generator.scala:224:24
  wire [3:0]  _switch_io_devOut_4_bits_sel;	// Generator.scala:224:24
  wire        _switch_io_devOut_5_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_5_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_5_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_5_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_5_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_5_bits_dat;	// Generator.scala:224:24
  wire [3:0]  _switch_io_devOut_5_bits_sel;	// Generator.scala:224:24
  wire        _switch_io_devOut_6_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_6_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_6_bits_stb;	// Generator.scala:224:24
  wire        _switch_io_devOut_6_bits_we;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_6_bits_adr;	// Generator.scala:224:24
  wire [31:0] _switch_io_devOut_6_bits_dat;	// Generator.scala:224:24
  wire        _switch_io_devOut_7_valid;	// Generator.scala:224:24
  wire        _switch_io_devOut_7_bits_cyc;	// Generator.scala:224:24
  wire        _switch_io_devOut_7_bits_stb;	// Generator.scala:224:24
  wire        _core_io_dmemReq_valid;	// Generator.scala:219:22
  wire [31:0] _core_io_dmemReq_bits_addrRequest;	// Generator.scala:219:22
  wire [31:0] _core_io_dmemReq_bits_dataRequest;	// Generator.scala:219:22
  wire        _core_io_dmemReq_bits_isWrite;	// Generator.scala:219:22
  wire        _core_io_imemReq_valid;	// Generator.scala:219:22
  wire [31:0] _core_io_imemReq_bits_addrRequest;	// Generator.scala:219:22
  wire [31:0] _wbErr_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:218:23
  wire        _wbErr_io_wbSlaveTransmitter_bits_err;	// Generator.scala:218:23
  wire        _dmem_io_rsp_valid;	// Generator.scala:216:22
  wire [31:0] _dmem_io_rsp_bits_dataResponse;	// Generator.scala:216:22
  wire        _imem_io_rsp_valid;	// Generator.scala:215:22
  wire [31:0] _imem_io_rsp_bits_dataResponse;	// Generator.scala:215:22
  wire        _imem_io_rsp_bits_error;	// Generator.scala:215:22
  wire        _gen_i2c_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:201:33
  wire [31:0] _gen_i2c_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:201:33
  wire        _gen_i2c_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:201:33
  wire        _gen_i2c_slave_io_reqOut_valid;	// Generator.scala:201:33
  wire [31:0] _gen_i2c_slave_io_reqOut_bits_addrRequest;	// Generator.scala:201:33
  wire [31:0] _gen_i2c_slave_io_reqOut_bits_dataRequest;	// Generator.scala:201:33
  wire        _gen_i2c_slave_io_reqOut_bits_isWrite;	// Generator.scala:201:33
  wire        _i2c_io_response_valid;	// Generator.scala:200:23
  wire [31:0] _i2c_io_response_bits_dataResponse;	// Generator.scala:200:23
  wire        _i2c_io_response_bits_error;	// Generator.scala:200:23
  wire        _gen_spi_flash_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:187:39
  wire [31:0] _gen_spi_flash_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:187:39
  wire        _gen_spi_flash_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:187:39
  wire        _gen_spi_flash_slave_io_reqOut_valid;	// Generator.scala:187:39
  wire [31:0] _gen_spi_flash_slave_io_reqOut_bits_addrRequest;	// Generator.scala:187:39
  wire [31:0] _gen_spi_flash_slave_io_reqOut_bits_dataRequest;	// Generator.scala:187:39
  wire [3:0]  _gen_spi_flash_slave_io_reqOut_bits_activeByteLane;	// Generator.scala:187:39
  wire        _gen_spi_flash_slave_io_reqOut_bits_isWrite;	// Generator.scala:187:39
  wire        _spi_flash_io_rsp_valid;	// Generator.scala:186:29
  wire [31:0] _spi_flash_io_rsp_bits_dataResponse;	// Generator.scala:186:29
  wire        _spi_flash_io_rsp_bits_error;	// Generator.scala:186:29
  wire        _gen_timer_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:175:35
  wire [31:0] _gen_timer_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:175:35
  wire        _gen_timer_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:175:35
  wire        _gen_timer_slave_io_reqOut_valid;	// Generator.scala:175:35
  wire [31:0] _gen_timer_slave_io_reqOut_bits_addrRequest;	// Generator.scala:175:35
  wire [31:0] _gen_timer_slave_io_reqOut_bits_dataRequest;	// Generator.scala:175:35
  wire [3:0]  _gen_timer_slave_io_reqOut_bits_activeByteLane;	// Generator.scala:175:35
  wire        _gen_timer_slave_io_reqOut_bits_isWrite;	// Generator.scala:175:35
  wire        _timer_io_rsp_valid;	// Generator.scala:174:25
  wire [31:0] _timer_io_rsp_bits_dataResponse;	// Generator.scala:174:25
  wire        _timer_io_rsp_bits_error;	// Generator.scala:174:25
  wire        _gen_uart_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:162:34
  wire [31:0] _gen_uart_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:162:34
  wire        _gen_uart_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:162:34
  wire        _gen_uart_slave_io_reqOut_valid;	// Generator.scala:162:34
  wire [31:0] _gen_uart_slave_io_reqOut_bits_addrRequest;	// Generator.scala:162:34
  wire [31:0] _gen_uart_slave_io_reqOut_bits_dataRequest;	// Generator.scala:162:34
  wire        _gen_uart_slave_io_reqOut_bits_isWrite;	// Generator.scala:162:34
  wire        _uart_io_response_valid;	// Generator.scala:161:24
  wire [31:0] _uart_io_response_bits_dataResponse;	// Generator.scala:161:24
  wire        _uart_io_response_bits_error;	// Generator.scala:161:24
  wire        _gen_spi_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:148:33
  wire [31:0] _gen_spi_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:148:33
  wire        _gen_spi_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:148:33
  wire        _gen_spi_slave_io_reqOut_valid;	// Generator.scala:148:33
  wire [31:0] _gen_spi_slave_io_reqOut_bits_addrRequest;	// Generator.scala:148:33
  wire [31:0] _gen_spi_slave_io_reqOut_bits_dataRequest;	// Generator.scala:148:33
  wire [3:0]  _gen_spi_slave_io_reqOut_bits_activeByteLane;	// Generator.scala:148:33
  wire        _gen_spi_slave_io_reqOut_bits_isWrite;	// Generator.scala:148:33
  wire        _spi_io_rsp_valid;	// Generator.scala:147:23
  wire [31:0] _spi_io_rsp_bits_dataResponse;	// Generator.scala:147:23
  wire        _spi_io_rsp_bits_error;	// Generator.scala:147:23
  wire        _gen_gpio_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:134:36
  wire [31:0] _gen_gpio_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:134:36
  wire        _gen_gpio_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:134:36
  wire        _gen_gpio_slave_io_reqOut_valid;	// Generator.scala:134:36
  wire [31:0] _gen_gpio_slave_io_reqOut_bits_addrRequest;	// Generator.scala:134:36
  wire [31:0] _gen_gpio_slave_io_reqOut_bits_dataRequest;	// Generator.scala:134:36
  wire [3:0]  _gen_gpio_slave_io_reqOut_bits_activeByteLane;	// Generator.scala:134:36
  wire        _gen_gpio_slave_io_reqOut_bits_isWrite;	// Generator.scala:134:36
  wire        _gpio_io_rsp_valid;	// Generator.scala:133:26
  wire [31:0] _gpio_io_rsp_bits_dataResponse;	// Generator.scala:133:26
  wire        _gpio_io_rsp_bits_error;	// Generator.scala:133:26
  wire [31:0] _gpio_io_cio_gpio_o;	// Generator.scala:133:26
  wire [31:0] _gpio_io_cio_gpio_en_o;	// Generator.scala:133:26
  wire        _gen_dmem_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:125:32
  wire [31:0] _gen_dmem_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:125:32
  wire        _gen_dmem_slave_io_reqOut_valid;	// Generator.scala:125:32
  wire [31:0] _gen_dmem_slave_io_reqOut_bits_addrRequest;	// Generator.scala:125:32
  wire [31:0] _gen_dmem_slave_io_reqOut_bits_dataRequest;	// Generator.scala:125:32
  wire [3:0]  _gen_dmem_slave_io_reqOut_bits_activeByteLane;	// Generator.scala:125:32
  wire        _gen_dmem_slave_io_reqOut_bits_isWrite;	// Generator.scala:125:32
  wire        _gen_dmem_host_io_wbMasterTransmitter_valid;	// Generator.scala:124:31
  wire        _gen_dmem_host_io_wbMasterTransmitter_bits_cyc;	// Generator.scala:124:31
  wire        _gen_dmem_host_io_wbMasterTransmitter_bits_stb;	// Generator.scala:124:31
  wire        _gen_dmem_host_io_wbMasterTransmitter_bits_we;	// Generator.scala:124:31
  wire [31:0] _gen_dmem_host_io_wbMasterTransmitter_bits_adr;	// Generator.scala:124:31
  wire [31:0] _gen_dmem_host_io_wbMasterTransmitter_bits_dat;	// Generator.scala:124:31
  wire [3:0]  _gen_dmem_host_io_wbMasterTransmitter_bits_sel;	// Generator.scala:124:31
  wire        _gen_dmem_host_io_rspOut_valid;	// Generator.scala:124:31
  wire [31:0] _gen_dmem_host_io_rspOut_bits_dataResponse;	// Generator.scala:124:31
  wire        _gen_imem_slave_io_wbSlaveTransmitter_bits_ack;	// Generator.scala:123:32
  wire [31:0] _gen_imem_slave_io_wbSlaveTransmitter_bits_dat;	// Generator.scala:123:32
  wire        _gen_imem_slave_io_wbSlaveTransmitter_bits_err;	// Generator.scala:123:32
  wire        _gen_imem_slave_io_reqOut_valid;	// Generator.scala:123:32
  wire [31:0] _gen_imem_slave_io_reqOut_bits_addrRequest;	// Generator.scala:123:32
  wire        _gen_imem_host_io_wbMasterTransmitter_valid;	// Generator.scala:122:31
  wire        _gen_imem_host_io_wbMasterTransmitter_bits_cyc;	// Generator.scala:122:31
  wire        _gen_imem_host_io_wbMasterTransmitter_bits_stb;	// Generator.scala:122:31
  wire [31:0] _gen_imem_host_io_wbMasterTransmitter_bits_adr;	// Generator.scala:122:31
  wire        _gen_imem_host_io_reqIn_ready;	// Generator.scala:122:31
  wire        _gen_imem_host_io_rspOut_valid;	// Generator.scala:122:31
  wire [31:0] _gen_imem_host_io_rspOut_bits_dataResponse;	// Generator.scala:122:31
  wire        _GEN = _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] != 20'h40000;	// BusDecoder.scala:45:{60,68}, :46:66, Generator.scala:124:31
  WishboneHost gen_imem_host (	// Generator.scala:122:31
    .clock                           (clock),
    .reset                           (reset),
    .io_wbSlaveReceiver_bits_ack     (_gen_imem_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:123:32
    .io_wbSlaveReceiver_bits_dat     (_gen_imem_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:123:32
    .io_wbSlaveReceiver_bits_err     (_gen_imem_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:123:32
    .io_reqIn_valid                  (_core_io_imemReq_valid),	// Generator.scala:219:22
    .io_reqIn_bits_addrRequest       (_core_io_imemReq_bits_addrRequest),	// Generator.scala:219:22
    .io_wbMasterTransmitter_valid    (_gen_imem_host_io_wbMasterTransmitter_valid),
    .io_wbMasterTransmitter_bits_cyc (_gen_imem_host_io_wbMasterTransmitter_bits_cyc),
    .io_wbMasterTransmitter_bits_stb (_gen_imem_host_io_wbMasterTransmitter_bits_stb),
    .io_wbMasterTransmitter_bits_adr (_gen_imem_host_io_wbMasterTransmitter_bits_adr),
    .io_reqIn_ready                  (_gen_imem_host_io_reqIn_ready),
    .io_rspOut_valid                 (_gen_imem_host_io_rspOut_valid),
    .io_rspOut_bits_dataResponse     (_gen_imem_host_io_rspOut_bits_dataResponse)
  );
  WishboneDevice gen_imem_slave (	// Generator.scala:123:32
    .io_wbMasterReceiver_valid      (_gen_imem_host_io_wbMasterTransmitter_valid),	// Generator.scala:122:31
    .io_wbMasterReceiver_bits_cyc   (_gen_imem_host_io_wbMasterTransmitter_bits_cyc),	// Generator.scala:122:31
    .io_wbMasterReceiver_bits_stb   (_gen_imem_host_io_wbMasterTransmitter_bits_stb),	// Generator.scala:122:31
    .io_wbMasterReceiver_bits_adr   (_gen_imem_host_io_wbMasterTransmitter_bits_adr),	// Generator.scala:122:31
    .io_rspIn_valid                 (_imem_io_rsp_valid),	// Generator.scala:215:22
    .io_rspIn_bits_dataResponse     (_imem_io_rsp_bits_dataResponse),	// Generator.scala:215:22
    .io_rspIn_bits_error            (_imem_io_rsp_bits_error),	// Generator.scala:215:22
    .io_wbSlaveTransmitter_bits_ack (_gen_imem_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_imem_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_imem_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_imem_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_imem_slave_io_reqOut_bits_addrRequest)
  );
  WishboneHost_1 gen_dmem_host (	// Generator.scala:124:31
    .clock                           (clock),
    .reset                           (reset),
    .io_wbSlaveReceiver_bits_ack     (_switch_io_hostOut_bits_ack),	// Generator.scala:224:24
    .io_wbSlaveReceiver_bits_dat     (_switch_io_hostOut_bits_dat),	// Generator.scala:224:24
    .io_wbSlaveReceiver_bits_err     (_switch_io_hostOut_bits_err),	// Generator.scala:224:24
    .io_reqIn_valid                  (_core_io_dmemReq_valid),	// Generator.scala:219:22
    .io_reqIn_bits_addrRequest       (_core_io_dmemReq_bits_addrRequest),	// Generator.scala:219:22
    .io_reqIn_bits_dataRequest       (_core_io_dmemReq_bits_dataRequest),	// Generator.scala:219:22
    .io_reqIn_bits_isWrite           (_core_io_dmemReq_bits_isWrite),	// Generator.scala:219:22
    .io_wbMasterTransmitter_valid    (_gen_dmem_host_io_wbMasterTransmitter_valid),
    .io_wbMasterTransmitter_bits_cyc (_gen_dmem_host_io_wbMasterTransmitter_bits_cyc),
    .io_wbMasterTransmitter_bits_stb (_gen_dmem_host_io_wbMasterTransmitter_bits_stb),
    .io_wbMasterTransmitter_bits_we  (_gen_dmem_host_io_wbMasterTransmitter_bits_we),
    .io_wbMasterTransmitter_bits_adr (_gen_dmem_host_io_wbMasterTransmitter_bits_adr),
    .io_wbMasterTransmitter_bits_dat (_gen_dmem_host_io_wbMasterTransmitter_bits_dat),
    .io_wbMasterTransmitter_bits_sel (_gen_dmem_host_io_wbMasterTransmitter_bits_sel),
    .io_rspOut_valid                 (_gen_dmem_host_io_rspOut_valid),
    .io_rspOut_bits_dataResponse     (_gen_dmem_host_io_rspOut_bits_dataResponse)
  );
  WishboneDevice_1 gen_dmem_slave (	// Generator.scala:125:32
    .io_wbMasterReceiver_valid      (_switch_io_devOut_0_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_0_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_0_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_0_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_0_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_0_bits_dat),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_sel   (_switch_io_devOut_0_bits_sel),	// Generator.scala:224:24
    .io_rspIn_valid                 (_dmem_io_rsp_valid),	// Generator.scala:216:22
    .io_rspIn_bits_dataResponse     (_dmem_io_rsp_bits_dataResponse),	// Generator.scala:216:22
    .io_wbSlaveTransmitter_bits_ack (_gen_dmem_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_dmem_slave_io_wbSlaveTransmitter_bits_dat),
    .io_reqOut_valid                (_gen_dmem_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_dmem_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_dmem_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_activeByteLane  (_gen_dmem_slave_io_reqOut_bits_activeByteLane),
    .io_reqOut_bits_isWrite         (_gen_dmem_slave_io_reqOut_bits_isWrite)
  );
  Gpio gpio (	// Generator.scala:133:26
    .clock                      (clock),
    .reset                      (reset),
    .io_req_valid               (_gen_gpio_slave_io_reqOut_valid),	// Generator.scala:134:36
    .io_req_bits_addrRequest    (_gen_gpio_slave_io_reqOut_bits_addrRequest),	// Generator.scala:134:36
    .io_req_bits_dataRequest    (_gen_gpio_slave_io_reqOut_bits_dataRequest),	// Generator.scala:134:36
    .io_req_bits_activeByteLane (_gen_gpio_slave_io_reqOut_bits_activeByteLane),	// Generator.scala:134:36
    .io_req_bits_isWrite        (_gen_gpio_slave_io_reqOut_bits_isWrite),	// Generator.scala:134:36
    .io_cio_gpio_i              ({28'h0, io_gpio_i}),	// Generator.scala:141:28
    .io_rsp_valid               (_gpio_io_rsp_valid),
    .io_rsp_bits_dataResponse   (_gpio_io_rsp_bits_dataResponse),
    .io_rsp_bits_error          (_gpio_io_rsp_bits_error),
    .io_cio_gpio_o              (_gpio_io_cio_gpio_o),
    .io_cio_gpio_en_o           (_gpio_io_cio_gpio_en_o)
  );
  WishboneDevice_2 gen_gpio_slave (	// Generator.scala:134:36
    .io_wbMasterReceiver_valid      (_switch_io_devOut_1_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_1_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_1_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_1_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_1_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_1_bits_dat),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_sel   (_switch_io_devOut_1_bits_sel),	// Generator.scala:224:24
    .io_rspIn_valid                 (_gpio_io_rsp_valid),	// Generator.scala:133:26
    .io_rspIn_bits_dataResponse     (_gpio_io_rsp_bits_dataResponse),	// Generator.scala:133:26
    .io_rspIn_bits_error            (_gpio_io_rsp_bits_error),	// Generator.scala:133:26
    .io_wbSlaveTransmitter_bits_ack (_gen_gpio_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_gpio_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_gpio_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_gpio_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_gpio_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_gpio_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_activeByteLane  (_gen_gpio_slave_io_reqOut_bits_activeByteLane),
    .io_reqOut_bits_isWrite         (_gen_gpio_slave_io_reqOut_bits_isWrite)
  );
  Spi spi (	// Generator.scala:147:23
    .clock                      (clock),
    .reset                      (reset),
    .io_req_valid               (_gen_spi_slave_io_reqOut_valid),	// Generator.scala:148:33
    .io_req_bits_addrRequest    (_gen_spi_slave_io_reqOut_bits_addrRequest),	// Generator.scala:148:33
    .io_req_bits_dataRequest    (_gen_spi_slave_io_reqOut_bits_dataRequest),	// Generator.scala:148:33
    .io_req_bits_activeByteLane (_gen_spi_slave_io_reqOut_bits_activeByteLane),	// Generator.scala:148:33
    .io_req_bits_isWrite        (_gen_spi_slave_io_reqOut_bits_isWrite),	// Generator.scala:148:33
    .io_miso                    (io_spi_miso),
    .io_rsp_valid               (_spi_io_rsp_valid),
    .io_rsp_bits_dataResponse   (_spi_io_rsp_bits_dataResponse),
    .io_rsp_bits_error          (_spi_io_rsp_bits_error),
    .io_cs_n                    (io_spi_cs_n),
    .io_sclk                    (io_spi_sclk),
    .io_mosi                    (io_spi_mosi)
  );
  WishboneDevice_3 gen_spi_slave (	// Generator.scala:148:33
    .io_wbMasterReceiver_valid      (_switch_io_devOut_2_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_2_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_2_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_2_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_2_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_2_bits_dat),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_sel   (_switch_io_devOut_2_bits_sel),	// Generator.scala:224:24
    .io_rspIn_valid                 (_spi_io_rsp_valid),	// Generator.scala:147:23
    .io_rspIn_bits_dataResponse     (_spi_io_rsp_bits_dataResponse),	// Generator.scala:147:23
    .io_rspIn_bits_error            (_spi_io_rsp_bits_error),	// Generator.scala:147:23
    .io_wbSlaveTransmitter_bits_ack (_gen_spi_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_spi_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_spi_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_spi_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_spi_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_spi_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_activeByteLane  (_gen_spi_slave_io_reqOut_bits_activeByteLane),
    .io_reqOut_bits_isWrite         (_gen_spi_slave_io_reqOut_bits_isWrite)
  );
  uart uart (	// Generator.scala:161:24
    .clock                         (clock),
    .reset                         (reset),
    .io_request_valid              (_gen_uart_slave_io_reqOut_valid),	// Generator.scala:162:34
    .io_request_bits_addrRequest   (_gen_uart_slave_io_reqOut_bits_addrRequest),	// Generator.scala:162:34
    .io_request_bits_dataRequest   (_gen_uart_slave_io_reqOut_bits_dataRequest),	// Generator.scala:162:34
    .io_request_bits_isWrite       (_gen_uart_slave_io_reqOut_bits_isWrite),	// Generator.scala:162:34
    .io_cio_uart_rx_i              (io_cio_uart_rx_i),
    .io_response_valid             (_uart_io_response_valid),
    .io_response_bits_dataResponse (_uart_io_response_bits_dataResponse),
    .io_response_bits_error        (_uart_io_response_bits_error),
    .io_cio_uart_tx_o              (io_cio_uart_tx_o),
    .io_cio_uart_intr_tx_o         (io_cio_uart_intr_tx_o)
  );
  WishboneDevice_4 gen_uart_slave (	// Generator.scala:162:34
    .io_wbMasterReceiver_valid      (_switch_io_devOut_3_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_3_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_3_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_3_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_3_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_3_bits_dat),	// Generator.scala:224:24
    .io_rspIn_valid                 (_uart_io_response_valid),	// Generator.scala:161:24
    .io_rspIn_bits_dataResponse     (_uart_io_response_bits_dataResponse),	// Generator.scala:161:24
    .io_rspIn_bits_error            (_uart_io_response_bits_error),	// Generator.scala:161:24
    .io_wbSlaveTransmitter_bits_ack (_gen_uart_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_uart_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_uart_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_uart_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_uart_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_uart_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_isWrite         (_gen_uart_slave_io_reqOut_bits_isWrite)
  );
  Timer timer (	// Generator.scala:174:25
    .clock                      (clock),
    .reset                      (reset),
    .io_req_valid               (_gen_timer_slave_io_reqOut_valid),	// Generator.scala:175:35
    .io_req_bits_addrRequest    (_gen_timer_slave_io_reqOut_bits_addrRequest),	// Generator.scala:175:35
    .io_req_bits_dataRequest    (_gen_timer_slave_io_reqOut_bits_dataRequest),	// Generator.scala:175:35
    .io_req_bits_activeByteLane (_gen_timer_slave_io_reqOut_bits_activeByteLane),	// Generator.scala:175:35
    .io_req_bits_isWrite        (_gen_timer_slave_io_reqOut_bits_isWrite),	// Generator.scala:175:35
    .io_rsp_valid               (_timer_io_rsp_valid),
    .io_rsp_bits_dataResponse   (_timer_io_rsp_bits_dataResponse),
    .io_rsp_bits_error          (_timer_io_rsp_bits_error),
    .io_cio_timer_intr_cmp      (io_timer_intr_cmp),
    .io_cio_timer_intr_ovf      (io_timer_intr_ovf)
  );
  WishboneDevice_5 gen_timer_slave (	// Generator.scala:175:35
    .io_wbMasterReceiver_valid      (_switch_io_devOut_4_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_4_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_4_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_4_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_4_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_4_bits_dat),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_sel   (_switch_io_devOut_4_bits_sel),	// Generator.scala:224:24
    .io_rspIn_valid                 (_timer_io_rsp_valid),	// Generator.scala:174:25
    .io_rspIn_bits_dataResponse     (_timer_io_rsp_bits_dataResponse),	// Generator.scala:174:25
    .io_rspIn_bits_error            (_timer_io_rsp_bits_error),	// Generator.scala:174:25
    .io_wbSlaveTransmitter_bits_ack (_gen_timer_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_timer_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_timer_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_timer_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_timer_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_timer_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_activeByteLane  (_gen_timer_slave_io_reqOut_bits_activeByteLane),
    .io_reqOut_bits_isWrite         (_gen_timer_slave_io_reqOut_bits_isWrite)
  );
  SpiFlash spi_flash (	// Generator.scala:186:29
    .clock                      (clock),
    .reset                      (reset),
    .io_req_valid               (_gen_spi_flash_slave_io_reqOut_valid),	// Generator.scala:187:39
    .io_req_bits_addrRequest    (_gen_spi_flash_slave_io_reqOut_bits_addrRequest),	// Generator.scala:187:39
    .io_req_bits_dataRequest    (_gen_spi_flash_slave_io_reqOut_bits_dataRequest),	// Generator.scala:187:39
    .io_req_bits_activeByteLane (_gen_spi_flash_slave_io_reqOut_bits_activeByteLane),	// Generator.scala:187:39
    .io_req_bits_isWrite        (_gen_spi_flash_slave_io_reqOut_bits_isWrite),	// Generator.scala:187:39
    .io_miso                    (io_spi_flash_miso),
    .io_rsp_valid               (_spi_flash_io_rsp_valid),
    .io_rsp_bits_dataResponse   (_spi_flash_io_rsp_bits_dataResponse),
    .io_rsp_bits_error          (_spi_flash_io_rsp_bits_error),
    .io_cs_n                    (io_spi_flash_cs_n),
    .io_sclk                    (io_spi_flash_sclk),
    .io_mosi                    (io_spi_flash_mosi)
  );
  WishboneDevice_6 gen_spi_flash_slave (	// Generator.scala:187:39
    .io_wbMasterReceiver_valid      (_switch_io_devOut_5_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_5_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_5_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_5_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_5_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_5_bits_dat),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_sel   (_switch_io_devOut_5_bits_sel),	// Generator.scala:224:24
    .io_rspIn_valid                 (_spi_flash_io_rsp_valid),	// Generator.scala:186:29
    .io_rspIn_bits_dataResponse     (_spi_flash_io_rsp_bits_dataResponse),	// Generator.scala:186:29
    .io_rspIn_bits_error            (_spi_flash_io_rsp_bits_error),	// Generator.scala:186:29
    .io_wbSlaveTransmitter_bits_ack (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_spi_flash_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_spi_flash_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_spi_flash_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_activeByteLane  (_gen_spi_flash_slave_io_reqOut_bits_activeByteLane),
    .io_reqOut_bits_isWrite         (_gen_spi_flash_slave_io_reqOut_bits_isWrite)
  );
  i2c i2c (	// Generator.scala:200:23
    .clock                         (clock),
    .reset                         (reset),
    .io_request_valid              (_gen_i2c_slave_io_reqOut_valid),	// Generator.scala:201:33
    .io_request_bits_addrRequest   (_gen_i2c_slave_io_reqOut_bits_addrRequest),	// Generator.scala:201:33
    .io_request_bits_dataRequest   (_gen_i2c_slave_io_reqOut_bits_dataRequest),	// Generator.scala:201:33
    .io_request_bits_isWrite       (_gen_i2c_slave_io_reqOut_bits_isWrite),	// Generator.scala:201:33
    .io_response_valid             (_i2c_io_response_valid),
    .io_response_bits_dataResponse (_i2c_io_response_bits_dataResponse),
    .io_response_bits_error        (_i2c_io_response_bits_error),
    .io_cio_i2c_sda                (io_i2c_sda),
    .io_cio_i2c_scl                (io_i2c_scl),
    .io_cio_i2c_intr               (io_i2c_intr)
  );
  WishboneDevice_7 gen_i2c_slave (	// Generator.scala:201:33
    .io_wbMasterReceiver_valid      (_switch_io_devOut_6_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_6_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_6_bits_stb),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_we    (_switch_io_devOut_6_bits_we),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_adr   (_switch_io_devOut_6_bits_adr),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_dat   (_switch_io_devOut_6_bits_dat),	// Generator.scala:224:24
    .io_rspIn_valid                 (_i2c_io_response_valid),	// Generator.scala:200:23
    .io_rspIn_bits_dataResponse     (_i2c_io_response_bits_dataResponse),	// Generator.scala:200:23
    .io_rspIn_bits_error            (_i2c_io_response_bits_error),	// Generator.scala:200:23
    .io_wbSlaveTransmitter_bits_ack (_gen_i2c_slave_io_wbSlaveTransmitter_bits_ack),
    .io_wbSlaveTransmitter_bits_dat (_gen_i2c_slave_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_gen_i2c_slave_io_wbSlaveTransmitter_bits_err),
    .io_reqOut_valid                (_gen_i2c_slave_io_reqOut_valid),
    .io_reqOut_bits_addrRequest     (_gen_i2c_slave_io_reqOut_bits_addrRequest),
    .io_reqOut_bits_dataRequest     (_gen_i2c_slave_io_reqOut_bits_dataRequest),
    .io_reqOut_bits_isWrite         (_gen_i2c_slave_io_reqOut_bits_isWrite)
  );
  BlockRamWithoutMasking imem (	// Generator.scala:215:22
    .clock                    (clock),
    .reset                    (reset),
    .io_req_valid             (_gen_imem_slave_io_reqOut_valid),	// Generator.scala:123:32
    .io_req_bits_addrRequest  (_gen_imem_slave_io_reqOut_bits_addrRequest),	// Generator.scala:123:32
    .io_rsp_valid             (_imem_io_rsp_valid),
    .io_rsp_bits_dataResponse (_imem_io_rsp_bits_dataResponse),
    .io_rsp_bits_error        (_imem_io_rsp_bits_error)
  );
  BlockRamWithMasking dmem (	// Generator.scala:216:22
    .clock                      (clock),
    .reset                      (reset),
    .io_req_valid               (_gen_dmem_slave_io_reqOut_valid),	// Generator.scala:125:32
    .io_req_bits_addrRequest    (_gen_dmem_slave_io_reqOut_bits_addrRequest),	// Generator.scala:125:32
    .io_req_bits_dataRequest    (_gen_dmem_slave_io_reqOut_bits_dataRequest),	// Generator.scala:125:32
    .io_req_bits_activeByteLane (_gen_dmem_slave_io_reqOut_bits_activeByteLane),	// Generator.scala:125:32
    .io_req_bits_isWrite        (_gen_dmem_slave_io_reqOut_bits_isWrite),	// Generator.scala:125:32
    .io_rsp_valid               (_dmem_io_rsp_valid),
    .io_rsp_bits_dataResponse   (_dmem_io_rsp_bits_dataResponse)
  );
  WishboneErr wbErr (	// Generator.scala:218:23
    .clock                          (clock),
    .reset                          (reset),
    .io_wbMasterReceiver_valid      (_switch_io_devOut_7_valid),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_cyc   (_switch_io_devOut_7_bits_cyc),	// Generator.scala:224:24
    .io_wbMasterReceiver_bits_stb   (_switch_io_devOut_7_bits_stb),	// Generator.scala:224:24
    .io_wbSlaveTransmitter_bits_dat (_wbErr_io_wbSlaveTransmitter_bits_dat),
    .io_wbSlaveTransmitter_bits_err (_wbErr_io_wbSlaveTransmitter_bits_err)
  );
  Core core (	// Generator.scala:219:22
    .clock                        (clock),
    .reset                        (reset),
    .io_dmemRsp_valid             (_gen_dmem_host_io_rspOut_valid),	// Generator.scala:124:31
    .io_dmemRsp_bits_dataResponse (_gen_dmem_host_io_rspOut_bits_dataResponse),	// Generator.scala:124:31
    .io_imemReq_ready             (_gen_imem_host_io_reqIn_ready),	// Generator.scala:122:31
    .io_imemRsp_valid             (_gen_imem_host_io_rspOut_valid),	// Generator.scala:122:31
    .io_imemRsp_bits_dataResponse (_gen_imem_host_io_rspOut_bits_dataResponse),	// Generator.scala:122:31
    .io_dmemReq_valid             (_core_io_dmemReq_valid),
    .io_dmemReq_bits_addrRequest  (_core_io_dmemReq_bits_addrRequest),
    .io_dmemReq_bits_dataRequest  (_core_io_dmemReq_bits_dataRequest),
    .io_dmemReq_bits_isWrite      (_core_io_dmemReq_bits_isWrite),
    .io_imemReq_valid             (_core_io_imemReq_valid),
    .io_imemReq_bits_addrRequest  (_core_io_imemReq_bits_addrRequest)
  );
  Switch1toN switch (	// Generator.scala:224:24
    .io_hostIn_valid      (_gen_dmem_host_io_wbMasterTransmitter_valid),	// Generator.scala:124:31
    .io_hostIn_bits_cyc   (_gen_dmem_host_io_wbMasterTransmitter_bits_cyc),	// Generator.scala:124:31
    .io_hostIn_bits_stb   (_gen_dmem_host_io_wbMasterTransmitter_bits_stb),	// Generator.scala:124:31
    .io_hostIn_bits_we    (_gen_dmem_host_io_wbMasterTransmitter_bits_we),	// Generator.scala:124:31
    .io_hostIn_bits_adr   (_gen_dmem_host_io_wbMasterTransmitter_bits_adr),	// Generator.scala:124:31
    .io_hostIn_bits_dat   (_gen_dmem_host_io_wbMasterTransmitter_bits_dat),	// Generator.scala:124:31
    .io_hostIn_bits_sel   (_gen_dmem_host_io_wbMasterTransmitter_bits_sel),	// Generator.scala:124:31
    .io_devIn_0_bits_ack  (_gen_dmem_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:125:32
    .io_devIn_0_bits_dat  (_gen_dmem_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:125:32
    .io_devIn_1_bits_ack  (_gen_gpio_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:134:36
    .io_devIn_1_bits_dat  (_gen_gpio_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:134:36
    .io_devIn_1_bits_err  (_gen_gpio_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:134:36
    .io_devIn_2_bits_ack  (_gen_spi_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:148:33
    .io_devIn_2_bits_dat  (_gen_spi_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:148:33
    .io_devIn_2_bits_err  (_gen_spi_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:148:33
    .io_devIn_3_bits_ack  (_gen_uart_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:162:34
    .io_devIn_3_bits_dat  (_gen_uart_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:162:34
    .io_devIn_3_bits_err  (_gen_uart_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:162:34
    .io_devIn_4_bits_ack  (_gen_timer_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:175:35
    .io_devIn_4_bits_dat  (_gen_timer_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:175:35
    .io_devIn_4_bits_err  (_gen_timer_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:175:35
    .io_devIn_5_bits_ack  (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:187:39
    .io_devIn_5_bits_dat  (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:187:39
    .io_devIn_5_bits_err  (_gen_spi_flash_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:187:39
    .io_devIn_6_bits_ack  (_gen_i2c_slave_io_wbSlaveTransmitter_bits_ack),	// Generator.scala:201:33
    .io_devIn_6_bits_dat  (_gen_i2c_slave_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:201:33
    .io_devIn_6_bits_err  (_gen_i2c_slave_io_wbSlaveTransmitter_bits_err),	// Generator.scala:201:33
    .io_devIn_7_bits_dat  (_wbErr_io_wbSlaveTransmitter_bits_dat),	// Generator.scala:218:23
    .io_devIn_7_bits_err  (_wbErr_io_wbSlaveTransmitter_bits_err),	// Generator.scala:218:23
    .io_devSel            (_gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40005 ? {2'h3,
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] != 20'h40005} :
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40002 ?
                (_gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40002 ? 3'h2 : 3'h7) :
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40001 ?
                (_gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40001 ? 3'h1 : 3'h7) :
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40003 ?
                {_gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] != 20'h40003, 2'h3} :
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40006 ?
                (_gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40006 ? 3'h4 : 3'h7) :
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] == 20'h40004 ? {1'h1,
                _gen_dmem_host_io_wbMasterTransmitter_bits_adr[31:12] != 20'h40004, 1'h1} : {3{_GEN |
                _GEN}}),	// BusDecoder.scala:45:{60,68}, :46:{19,66}, :47:52, Generator.scala:124:31, Mux.scala:98:16
    .io_hostOut_bits_ack  (_switch_io_hostOut_bits_ack),
    .io_hostOut_bits_dat  (_switch_io_hostOut_bits_dat),
    .io_hostOut_bits_err  (_switch_io_hostOut_bits_err),
    .io_devOut_0_valid    (_switch_io_devOut_0_valid),
    .io_devOut_0_bits_cyc (_switch_io_devOut_0_bits_cyc),
    .io_devOut_0_bits_stb (_switch_io_devOut_0_bits_stb),
    .io_devOut_0_bits_we  (_switch_io_devOut_0_bits_we),
    .io_devOut_0_bits_adr (_switch_io_devOut_0_bits_adr),
    .io_devOut_0_bits_dat (_switch_io_devOut_0_bits_dat),
    .io_devOut_0_bits_sel (_switch_io_devOut_0_bits_sel),
    .io_devOut_1_valid    (_switch_io_devOut_1_valid),
    .io_devOut_1_bits_cyc (_switch_io_devOut_1_bits_cyc),
    .io_devOut_1_bits_stb (_switch_io_devOut_1_bits_stb),
    .io_devOut_1_bits_we  (_switch_io_devOut_1_bits_we),
    .io_devOut_1_bits_adr (_switch_io_devOut_1_bits_adr),
    .io_devOut_1_bits_dat (_switch_io_devOut_1_bits_dat),
    .io_devOut_1_bits_sel (_switch_io_devOut_1_bits_sel),
    .io_devOut_2_valid    (_switch_io_devOut_2_valid),
    .io_devOut_2_bits_cyc (_switch_io_devOut_2_bits_cyc),
    .io_devOut_2_bits_stb (_switch_io_devOut_2_bits_stb),
    .io_devOut_2_bits_we  (_switch_io_devOut_2_bits_we),
    .io_devOut_2_bits_adr (_switch_io_devOut_2_bits_adr),
    .io_devOut_2_bits_dat (_switch_io_devOut_2_bits_dat),
    .io_devOut_2_bits_sel (_switch_io_devOut_2_bits_sel),
    .io_devOut_3_valid    (_switch_io_devOut_3_valid),
    .io_devOut_3_bits_cyc (_switch_io_devOut_3_bits_cyc),
    .io_devOut_3_bits_stb (_switch_io_devOut_3_bits_stb),
    .io_devOut_3_bits_we  (_switch_io_devOut_3_bits_we),
    .io_devOut_3_bits_adr (_switch_io_devOut_3_bits_adr),
    .io_devOut_3_bits_dat (_switch_io_devOut_3_bits_dat),
    .io_devOut_4_valid    (_switch_io_devOut_4_valid),
    .io_devOut_4_bits_cyc (_switch_io_devOut_4_bits_cyc),
    .io_devOut_4_bits_stb (_switch_io_devOut_4_bits_stb),
    .io_devOut_4_bits_we  (_switch_io_devOut_4_bits_we),
    .io_devOut_4_bits_adr (_switch_io_devOut_4_bits_adr),
    .io_devOut_4_bits_dat (_switch_io_devOut_4_bits_dat),
    .io_devOut_4_bits_sel (_switch_io_devOut_4_bits_sel),
    .io_devOut_5_valid    (_switch_io_devOut_5_valid),
    .io_devOut_5_bits_cyc (_switch_io_devOut_5_bits_cyc),
    .io_devOut_5_bits_stb (_switch_io_devOut_5_bits_stb),
    .io_devOut_5_bits_we  (_switch_io_devOut_5_bits_we),
    .io_devOut_5_bits_adr (_switch_io_devOut_5_bits_adr),
    .io_devOut_5_bits_dat (_switch_io_devOut_5_bits_dat),
    .io_devOut_5_bits_sel (_switch_io_devOut_5_bits_sel),
    .io_devOut_6_valid    (_switch_io_devOut_6_valid),
    .io_devOut_6_bits_cyc (_switch_io_devOut_6_bits_cyc),
    .io_devOut_6_bits_stb (_switch_io_devOut_6_bits_stb),
    .io_devOut_6_bits_we  (_switch_io_devOut_6_bits_we),
    .io_devOut_6_bits_adr (_switch_io_devOut_6_bits_adr),
    .io_devOut_6_bits_dat (_switch_io_devOut_6_bits_dat),
    .io_devOut_7_valid    (_switch_io_devOut_7_valid),
    .io_devOut_7_bits_cyc (_switch_io_devOut_7_bits_cyc),
    .io_devOut_7_bits_stb (_switch_io_devOut_7_bits_stb)
  );
  assign io_gpio_o = _gpio_io_cio_gpio_o[3:0];	// Generator.scala:133:26, :139:44
  assign io_gpio_en_o = _gpio_io_cio_gpio_en_o[3:0];	// Generator.scala:133:26, :140:50
endmodule

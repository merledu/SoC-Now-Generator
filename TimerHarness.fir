;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit TimerHarness : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module Timer : 
    input clock : Clock
    input reset : Reset
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cio_timer_intr_cmp : UInt<1>, cio_timer_intr_ovf : UInt<1>}
    
    reg TimerReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 23:29]
    reg ControlReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 24:29]
    reg CompareReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 25:29]
    reg PreCountReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[Timer.scala 26:29]
    wire maskedData : UInt<8>[4] @[Timer.scala 28:26]
    wire _WIRE : UInt<1>[4] @[Timer.scala 29:54]
    wire _WIRE_1 : UInt<4>
    _WIRE_1 <= io.req.bits.activeByteLane
    node _T = bits(_WIRE_1, 0, 0) @[Timer.scala 29:54]
    _WIRE[0] <= _T @[Timer.scala 29:54]
    node _T_1 = bits(_WIRE_1, 1, 1) @[Timer.scala 29:54]
    _WIRE[1] <= _T_1 @[Timer.scala 29:54]
    node _T_2 = bits(_WIRE_1, 2, 2) @[Timer.scala 29:54]
    _WIRE[2] <= _T_2 @[Timer.scala 29:54]
    node _T_3 = bits(_WIRE_1, 3, 3) @[Timer.scala 29:54]
    _WIRE[3] <= _T_3 @[Timer.scala 29:54]
    node _T_4 = bits(_WIRE[0], 0, 0) @[Bitwise.scala 72:15]
    node _T_5 = mux(_T_4, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_6 = bits(_WIRE[1], 0, 0) @[Bitwise.scala 72:15]
    node _T_7 = mux(_T_6, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_8 = bits(_WIRE[2], 0, 0) @[Bitwise.scala 72:15]
    node _T_9 = mux(_T_8, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    node _T_10 = bits(_WIRE[3], 0, 0) @[Bitwise.scala 72:15]
    node _T_11 = mux(_T_10, UInt<8>("h0ff"), UInt<8>("h00")) @[Bitwise.scala 72:12]
    maskedData[0] <= _T_5 @[Timer.scala 29:16]
    maskedData[1] <= _T_7 @[Timer.scala 29:16]
    maskedData[2] <= _T_9 @[Timer.scala 29:16]
    maskedData[3] <= _T_11 @[Timer.scala 29:16]
    io.req.ready <= UInt<1>("h01") @[Timer.scala 31:18]
    io.rsp.valid <= UInt<1>("h00") @[Timer.scala 32:18]
    node _T_12 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 36:34]
    node _T_13 = eq(_T_12, UInt<1>("h00")) @[Timer.scala 36:40]
    node _T_14 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 36:71]
    node _T_15 = and(_T_13, _T_14) @[Timer.scala 36:48]
    when _T_15 : @[Timer.scala 36:79]
      node _io_rsp_bits_dataResponse_T = mux(io.rsp.ready, TimerReg, UInt<1>("h00")) @[Timer.scala 37:48]
      reg io_rsp_bits_dataResponse_REG : UInt, clock @[Timer.scala 37:44]
      io_rsp_bits_dataResponse_REG <= _io_rsp_bits_dataResponse_T @[Timer.scala 37:44]
      io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG @[Timer.scala 37:34]
      reg io_rsp_valid_REG : UInt<1>, clock @[Timer.scala 38:32]
      io_rsp_valid_REG <= io.req.valid @[Timer.scala 38:32]
      io.rsp.valid <= io_rsp_valid_REG @[Timer.scala 38:22]
      skip @[Timer.scala 36:79]
    else : @[Timer.scala 40:84]
      node _T_16 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 40:39]
      node _T_17 = eq(_T_16, UInt<3>("h04")) @[Timer.scala 40:45]
      node _T_18 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 40:76]
      node _T_19 = and(_T_17, _T_18) @[Timer.scala 40:53]
      when _T_19 : @[Timer.scala 40:84]
        node ControlReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 41:78]
        node ControlReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 41:78]
        node _ControlReg_T = cat(ControlReg_hi, ControlReg_lo) @[Timer.scala 41:78]
        node _ControlReg_T_1 = and(io.req.bits.dataRequest, _ControlReg_T) @[Timer.scala 41:65]
        node _ControlReg_T_2 = mux(io.req.valid, _ControlReg_T_1, ControlReg) @[Timer.scala 41:26]
        ControlReg <= _ControlReg_T_2 @[Timer.scala 41:20]
        node _io_rsp_bits_dataResponse_T_1 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 43:48]
        reg io_rsp_bits_dataResponse_REG_1 : UInt, clock @[Timer.scala 43:44]
        io_rsp_bits_dataResponse_REG_1 <= _io_rsp_bits_dataResponse_T_1 @[Timer.scala 43:44]
        io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_1 @[Timer.scala 43:34]
        reg io_rsp_valid_REG_1 : UInt<1>, clock @[Timer.scala 44:32]
        io_rsp_valid_REG_1 <= io.req.valid @[Timer.scala 44:32]
        io.rsp.valid <= io_rsp_valid_REG_1 @[Timer.scala 44:22]
        skip @[Timer.scala 40:84]
      else : @[Timer.scala 46:84]
        node _T_20 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 46:39]
        node _T_21 = eq(_T_20, UInt<3>("h04")) @[Timer.scala 46:45]
        node _T_22 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 46:76]
        node _T_23 = and(_T_21, _T_22) @[Timer.scala 46:53]
        when _T_23 : @[Timer.scala 46:84]
          node _io_rsp_bits_dataResponse_T_2 = mux(io.rsp.ready, ControlReg, UInt<1>("h00")) @[Timer.scala 47:48]
          reg io_rsp_bits_dataResponse_REG_2 : UInt, clock @[Timer.scala 47:44]
          io_rsp_bits_dataResponse_REG_2 <= _io_rsp_bits_dataResponse_T_2 @[Timer.scala 47:44]
          io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_2 @[Timer.scala 47:34]
          reg io_rsp_valid_REG_2 : UInt<1>, clock @[Timer.scala 48:32]
          io_rsp_valid_REG_2 <= io.req.valid @[Timer.scala 48:32]
          io.rsp.valid <= io_rsp_valid_REG_2 @[Timer.scala 48:22]
          skip @[Timer.scala 46:84]
        else : @[Timer.scala 50:84]
          node _T_24 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 50:39]
          node _T_25 = eq(_T_24, UInt<4>("h08")) @[Timer.scala 50:45]
          node _T_26 = eq(io.req.bits.isWrite, UInt<1>("h01")) @[Timer.scala 50:76]
          node _T_27 = and(_T_25, _T_26) @[Timer.scala 50:53]
          when _T_27 : @[Timer.scala 50:84]
            node CompareReg_lo = cat(maskedData[1], maskedData[0]) @[Timer.scala 51:78]
            node CompareReg_hi = cat(maskedData[3], maskedData[2]) @[Timer.scala 51:78]
            node _CompareReg_T = cat(CompareReg_hi, CompareReg_lo) @[Timer.scala 51:78]
            node _CompareReg_T_1 = and(io.req.bits.dataRequest, _CompareReg_T) @[Timer.scala 51:65]
            node _CompareReg_T_2 = mux(io.req.valid, _CompareReg_T_1, CompareReg) @[Timer.scala 51:26]
            CompareReg <= _CompareReg_T_2 @[Timer.scala 51:20]
            node _io_rsp_bits_dataResponse_T_3 = mux(io.rsp.ready, io.req.bits.dataRequest, UInt<1>("h00")) @[Timer.scala 53:48]
            reg io_rsp_bits_dataResponse_REG_3 : UInt, clock @[Timer.scala 53:44]
            io_rsp_bits_dataResponse_REG_3 <= _io_rsp_bits_dataResponse_T_3 @[Timer.scala 53:44]
            io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_3 @[Timer.scala 53:34]
            reg io_rsp_valid_REG_3 : UInt<1>, clock @[Timer.scala 54:32]
            io_rsp_valid_REG_3 <= io.req.valid @[Timer.scala 54:32]
            io.rsp.valid <= io_rsp_valid_REG_3 @[Timer.scala 54:22]
            skip @[Timer.scala 50:84]
          else : @[Timer.scala 56:84]
            node _T_28 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 56:39]
            node _T_29 = eq(_T_28, UInt<4>("h08")) @[Timer.scala 56:45]
            node _T_30 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 56:76]
            node _T_31 = and(_T_29, _T_30) @[Timer.scala 56:53]
            when _T_31 : @[Timer.scala 56:84]
              node _io_rsp_bits_dataResponse_T_4 = mux(io.rsp.ready, CompareReg, UInt<1>("h00")) @[Timer.scala 57:48]
              reg io_rsp_bits_dataResponse_REG_4 : UInt, clock @[Timer.scala 57:44]
              io_rsp_bits_dataResponse_REG_4 <= _io_rsp_bits_dataResponse_T_4 @[Timer.scala 57:44]
              io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_4 @[Timer.scala 57:34]
              reg io_rsp_valid_REG_4 : UInt<1>, clock @[Timer.scala 58:32]
              io_rsp_valid_REG_4 <= io.req.valid @[Timer.scala 58:32]
              io.rsp.valid <= io_rsp_valid_REG_4 @[Timer.scala 58:22]
              skip @[Timer.scala 56:84]
            else : @[Timer.scala 60:84]
              node _T_32 = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 60:39]
              node _T_33 = eq(_T_32, UInt<4>("h08")) @[Timer.scala 60:45]
              node _T_34 = eq(io.req.bits.isWrite, UInt<1>("h00")) @[Timer.scala 60:76]
              node _T_35 = and(_T_33, _T_34) @[Timer.scala 60:53]
              when _T_35 : @[Timer.scala 60:84]
                node _io_rsp_bits_dataResponse_T_5 = mux(io.rsp.ready, PreCountReg, UInt<1>("h00")) @[Timer.scala 61:48]
                reg io_rsp_bits_dataResponse_REG_5 : UInt, clock @[Timer.scala 61:44]
                io_rsp_bits_dataResponse_REG_5 <= _io_rsp_bits_dataResponse_T_5 @[Timer.scala 61:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_5 @[Timer.scala 61:34]
                reg io_rsp_valid_REG_5 : UInt<1>, clock @[Timer.scala 62:32]
                io_rsp_valid_REG_5 <= io.req.valid @[Timer.scala 62:32]
                io.rsp.valid <= io_rsp_valid_REG_5 @[Timer.scala 62:22]
                skip @[Timer.scala 60:84]
              else : @[Timer.scala 64:15]
                io.cio_timer_intr_cmp is invalid @[Timer.scala 65:58]
                io.rsp.valid is invalid @[Timer.scala 65:58]
                reg io_rsp_bits_dataResponse_REG_6 : UInt, clock @[Timer.scala 66:44]
                io_rsp_bits_dataResponse_REG_6 <= io.req.bits.addrRequest @[Timer.scala 66:44]
                io.rsp.bits.dataResponse <= io_rsp_bits_dataResponse_REG_6 @[Timer.scala 66:34]
                skip @[Timer.scala 64:15]
    node _enable_T = bits(ControlReg, 0, 0) @[Timer.scala 69:37]
    wire enable : UInt<1>
    enable <= _enable_T
    node _prescalar_T = bits(ControlReg, 31, 1) @[Timer.scala 70:40]
    wire prescalar : UInt
    prescalar <= _prescalar_T
    node _T_36 = eq(PreCountReg, UInt<1>("h00")) @[Timer.scala 73:22]
    node _T_37 = and(_T_36, enable) @[Timer.scala 73:30]
    when _T_37 : @[Timer.scala 73:40]
      node _PreCountReg_T = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 74:36]
      node _PreCountReg_T_1 = tail(_PreCountReg_T, 1) @[Timer.scala 74:36]
      PreCountReg <= _PreCountReg_T_1 @[Timer.scala 74:21]
      skip @[Timer.scala 73:40]
    else : @[Timer.scala 76:69]
      node _T_38 = eq(TimerReg, CompareReg) @[Timer.scala 76:24]
      node _T_39 = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 76:51]
      node _T_40 = or(_T_38, _T_39) @[Timer.scala 76:39]
      when _T_40 : @[Timer.scala 76:69]
        TimerReg <= UInt<1>("h00") @[Timer.scala 77:18]
        skip @[Timer.scala 76:69]
      else : @[Timer.scala 79:51]
        node _T_41 = eq(PreCountReg, prescalar) @[Timer.scala 79:27]
        node _T_42 = and(_T_41, enable) @[Timer.scala 79:41]
        when _T_42 : @[Timer.scala 79:51]
          node _TimerReg_T = add(TimerReg, UInt<1>("h01")) @[Timer.scala 80:30]
          node _TimerReg_T_1 = tail(_TimerReg_T, 1) @[Timer.scala 80:30]
          TimerReg <= _TimerReg_T_1 @[Timer.scala 80:18]
          PreCountReg <= UInt<1>("h00") @[Timer.scala 81:21]
          skip @[Timer.scala 79:51]
        else : @[Timer.scala 82:40]
          node _T_43 = lt(PreCountReg, prescalar) @[Timer.scala 82:28]
          when _T_43 : @[Timer.scala 82:40]
            node _PreCountReg_T_2 = add(PreCountReg, UInt<1>("h01")) @[Timer.scala 83:36]
            node _PreCountReg_T_3 = tail(_PreCountReg_T_2, 1) @[Timer.scala 83:36]
            PreCountReg <= _PreCountReg_T_3 @[Timer.scala 83:21]
            skip @[Timer.scala 82:40]
    node _io_cio_timer_intr_cmp_T = eq(TimerReg, CompareReg) @[Timer.scala 87:51]
    node _io_cio_timer_intr_cmp_T_1 = mux(enable, _io_cio_timer_intr_cmp_T, UInt<1>("h00")) @[Timer.scala 87:33]
    io.cio_timer_intr_cmp <= _io_cio_timer_intr_cmp_T_1 @[Timer.scala 87:27]
    node _io_cio_timer_intr_ovf_T = eq(TimerReg, UInt<32>("h0ffffffff")) @[Timer.scala 88:51]
    node _io_cio_timer_intr_ovf_T_1 = mux(enable, _io_cio_timer_intr_ovf_T, UInt<1>("h00")) @[Timer.scala 88:33]
    io.cio_timer_intr_ovf <= _io_cio_timer_intr_ovf_T_1 @[Timer.scala 88:27]
    wire addr_hit : UInt<1>[4] @[Timer.scala 93:24]
    node _wireAddr_T = bits(io.req.bits.addrRequest, 3, 0) @[Timer.scala 95:52]
    wire wireAddr : UInt
    wireAddr <= _wireAddr_T
    wire addr_miss : UInt<1> @[Timer.scala 96:25]
    node _addr_hit_0_T = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 102:39]
    addr_hit[0] <= _addr_hit_0_T @[Timer.scala 102:27]
    node _addr_hit_1_T = eq(wireAddr, UInt<3>("h04")) @[Timer.scala 102:39]
    addr_hit[1] <= _addr_hit_1_T @[Timer.scala 102:27]
    node _addr_hit_2_T = eq(wireAddr, UInt<4>("h08")) @[Timer.scala 102:39]
    addr_hit[2] <= _addr_hit_2_T @[Timer.scala 102:27]
    node _addr_hit_3_T = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 102:39]
    addr_hit[3] <= _addr_hit_3_T @[Timer.scala 102:27]
    node _addr_miss_T = or(addr_hit[0], addr_hit[1]) @[Timer.scala 110:37]
    node _addr_miss_T_1 = or(_addr_miss_T, addr_hit[2]) @[Timer.scala 110:37]
    node _addr_miss_T_2 = or(_addr_miss_T_1, addr_hit[3]) @[Timer.scala 110:37]
    node _addr_miss_T_3 = not(_addr_miss_T_2) @[Timer.scala 110:18]
    addr_miss <= _addr_miss_T_3 @[Timer.scala 110:15]
    node _T_44 = eq(wireAddr, UInt<1>("h00")) @[Timer.scala 111:19]
    node _T_45 = and(_T_44, io.req.bits.isWrite) @[Timer.scala 111:27]
    when _T_45 : @[Timer.scala 111:49]
      reg io_rsp_bits_error_REG : UInt<1>, clock @[Timer.scala 111:78]
      io_rsp_bits_error_REG <= io.req.valid @[Timer.scala 111:78]
      io.rsp.bits.error <= io_rsp_bits_error_REG @[Timer.scala 111:68]
      skip @[Timer.scala 111:49]
    else : @[Timer.scala 112:55]
      node _T_46 = eq(wireAddr, UInt<4>("h0c")) @[Timer.scala 112:24]
      node _T_47 = and(_T_46, io.req.bits.isWrite) @[Timer.scala 112:33]
      when _T_47 : @[Timer.scala 112:55]
        reg io_rsp_bits_error_REG_1 : UInt<1>, clock @[Timer.scala 112:84]
        io_rsp_bits_error_REG_1 <= io.req.valid @[Timer.scala 112:84]
        io.rsp.bits.error <= io_rsp_bits_error_REG_1 @[Timer.scala 112:74]
        skip @[Timer.scala 112:55]
      else : @[Timer.scala 113:15]
        node _io_rsp_bits_error_T = and(io.req.valid, addr_miss) @[Timer.scala 113:58]
        reg io_rsp_bits_error_REG_2 : UInt<1>, clock @[Timer.scala 113:44]
        io_rsp_bits_error_REG_2 <= _io_rsp_bits_error_T @[Timer.scala 113:44]
        io.rsp.bits.error <= io_rsp_bits_error_REG_2 @[Timer.scala 113:34]
        skip @[Timer.scala 113:15]
    
  module TimerHarness : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, cio_timer_intr_cmp : UInt<1>, cio_timer_intr_ovf : UInt<1>}
    
    inst hostAdapter of WishboneHost @[TimerHarness.scala 21:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[TimerHarness.scala 22:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst timer of Timer @[TimerHarness.scala 23:21]
    timer.clock <= clock
    timer.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[TimerHarness.scala 25:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[TimerHarness.scala 25:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[TimerHarness.scala 25:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[TimerHarness.scala 25:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[TimerHarness.scala 25:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[TimerHarness.scala 25:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[TimerHarness.scala 26:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[TimerHarness.scala 26:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[TimerHarness.scala 26:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[TimerHarness.scala 26:10]
    deviceAdapter.io.wbMasterReceiver.bits.sel <= hostAdapter.io.wbMasterTransmitter.bits.sel @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.dat <= hostAdapter.io.wbMasterTransmitter.bits.dat @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.adr <= hostAdapter.io.wbMasterTransmitter.bits.adr @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.we <= hostAdapter.io.wbMasterTransmitter.bits.we @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.stb <= hostAdapter.io.wbMasterTransmitter.bits.stb @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.bits.cyc <= hostAdapter.io.wbMasterTransmitter.bits.cyc @[TimerHarness.scala 27:38]
    deviceAdapter.io.wbMasterReceiver.valid <= hostAdapter.io.wbMasterTransmitter.valid @[TimerHarness.scala 27:38]
    hostAdapter.io.wbMasterTransmitter.ready <= deviceAdapter.io.wbMasterReceiver.ready @[TimerHarness.scala 27:38]
    hostAdapter.io.wbSlaveReceiver.bits.err <= deviceAdapter.io.wbSlaveTransmitter.bits.err @[TimerHarness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.bits.dat <= deviceAdapter.io.wbSlaveTransmitter.bits.dat @[TimerHarness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.bits.ack <= deviceAdapter.io.wbSlaveTransmitter.bits.ack @[TimerHarness.scala 28:34]
    hostAdapter.io.wbSlaveReceiver.valid <= deviceAdapter.io.wbSlaveTransmitter.valid @[TimerHarness.scala 28:34]
    deviceAdapter.io.wbSlaveTransmitter.ready <= hostAdapter.io.wbSlaveReceiver.ready @[TimerHarness.scala 28:34]
    timer.io.req.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[TimerHarness.scala 30:16]
    timer.io.req.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[TimerHarness.scala 30:16]
    timer.io.req.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[TimerHarness.scala 30:16]
    timer.io.req.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[TimerHarness.scala 30:16]
    timer.io.req.valid <= deviceAdapter.io.reqOut.valid @[TimerHarness.scala 30:16]
    deviceAdapter.io.reqOut.ready <= timer.io.req.ready @[TimerHarness.scala 30:16]
    deviceAdapter.io.rspIn.bits.error <= timer.io.rsp.bits.error @[TimerHarness.scala 31:16]
    deviceAdapter.io.rspIn.bits.dataResponse <= timer.io.rsp.bits.dataResponse @[TimerHarness.scala 31:16]
    deviceAdapter.io.rspIn.valid <= timer.io.rsp.valid @[TimerHarness.scala 31:16]
    timer.io.rsp.ready <= deviceAdapter.io.rspIn.ready @[TimerHarness.scala 31:16]
    io.cio_timer_intr_cmp <= timer.io.cio_timer_intr_cmp @[TimerHarness.scala 33:25]
    io.cio_timer_intr_ovf <= timer.io.cio_timer_intr_ovf @[TimerHarness.scala 34:25]
    

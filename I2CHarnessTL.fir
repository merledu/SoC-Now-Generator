;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit I2CHarnessTL : 
  module TilelinkHost : 
    input clock : Clock
    input reset : Reset
    output io : {tlMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<10>, a_corrupt : UInt<1>, a_data : UInt<80>}}, flip tlSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<80>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<80>, activeByteLane : UInt<10>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<80>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 19:27]
    reg addrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkHost.scala 20:27]
    io.tlSlaveReceiver.ready <= UInt<1>("h00") @[TilelinkHost.scala 32:33]
    io.reqIn.ready <= UInt<1>("h01") @[TilelinkHost.scala 33:33]
    io.tlMasterTransmitter.bits.a_opcode <= UInt<1>("h00") @[TilelinkHost.scala 40:45]
    io.tlMasterTransmitter.bits.a_data <= UInt<1>("h00") @[TilelinkHost.scala 41:45]
    io.tlMasterTransmitter.bits.a_address <= addrReg @[TilelinkHost.scala 42:45]
    io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 43:45]
    io.tlMasterTransmitter.bits.a_source <= UInt<1>("h00") @[TilelinkHost.scala 44:45]
    io.tlMasterTransmitter.bits.a_size <= UInt<1>("h00") @[TilelinkHost.scala 45:45]
    io.tlMasterTransmitter.bits.a_mask <= UInt<1>("h00") @[TilelinkHost.scala 46:45]
    io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 47:45]
    io.tlMasterTransmitter.valid <= UInt<1>("h00") @[TilelinkHost.scala 48:45]
    io.rspOut.bits.dataResponse <= UInt<1>("h00") @[TilelinkHost.scala 50:45]
    io.rspOut.bits.error <= UInt<1>("h00") @[TilelinkHost.scala 51:45]
    io.rspOut.valid <= UInt<1>("h00") @[TilelinkHost.scala 53:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkHost.scala 56:19]
    when _T : @[TilelinkHost.scala 56:28]
      when io.reqIn.valid : @[TilelinkHost.scala 60:29]
        node _io_tlMasterTransmitter_bits_a_opcode_T = eq(io.reqIn.bits.activeByteLane, UInt<4>("h0f")) @[TilelinkHost.scala 62:116]
        node _io_tlMasterTransmitter_bits_a_opcode_T_1 = mux(_io_tlMasterTransmitter_bits_a_opcode_T, UInt<1>("h00"), UInt<1>("h01")) @[TilelinkHost.scala 62:86]
        node _io_tlMasterTransmitter_bits_a_opcode_T_2 = mux(io.reqIn.bits.isWrite, _io_tlMasterTransmitter_bits_a_opcode_T_1, UInt<3>("h04")) @[TilelinkHost.scala 62:59]
        io.tlMasterTransmitter.bits.a_opcode <= _io_tlMasterTransmitter_bits_a_opcode_T_2 @[TilelinkHost.scala 62:53]
        io.tlMasterTransmitter.bits.a_data <= io.reqIn.bits.dataRequest @[TilelinkHost.scala 63:53]
        io.tlMasterTransmitter.bits.a_address <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 64:53]
        io.tlMasterTransmitter.bits.a_param <= UInt<1>("h00") @[TilelinkHost.scala 65:53]
        io.tlMasterTransmitter.bits.a_source <= UInt<2>("h02") @[TilelinkHost.scala 66:53]
        node _io_tlMasterTransmitter_bits_a_size_T = eq(UInt<1>("h01"), UInt<4>("h0a")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_1 = mux(_io_tlMasterTransmitter_bits_a_size_T, UInt<1>("h00"), UInt<2>("h02")) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_2 = eq(UInt<2>("h02"), UInt<4>("h0a")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_3 = mux(_io_tlMasterTransmitter_bits_a_size_T_2, UInt<1>("h01"), _io_tlMasterTransmitter_bits_a_size_T_1) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_4 = eq(UInt<3>("h04"), UInt<4>("h0a")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_5 = mux(_io_tlMasterTransmitter_bits_a_size_T_4, UInt<2>("h02"), _io_tlMasterTransmitter_bits_a_size_T_3) @[Mux.scala 80:57]
        node _io_tlMasterTransmitter_bits_a_size_T_6 = eq(UInt<4>("h08"), UInt<4>("h0a")) @[Mux.scala 80:60]
        node _io_tlMasterTransmitter_bits_a_size_T_7 = mux(_io_tlMasterTransmitter_bits_a_size_T_6, UInt<2>("h03"), _io_tlMasterTransmitter_bits_a_size_T_5) @[Mux.scala 80:57]
        io.tlMasterTransmitter.bits.a_size <= _io_tlMasterTransmitter_bits_a_size_T_7 @[TilelinkHost.scala 67:53]
        io.tlMasterTransmitter.bits.a_mask <= io.reqIn.bits.activeByteLane @[TilelinkHost.scala 73:53]
        io.tlMasterTransmitter.bits.a_corrupt <= UInt<1>("h00") @[TilelinkHost.scala 74:53]
        io.tlMasterTransmitter.valid <= io.reqIn.valid @[TilelinkHost.scala 75:53]
        stateReg <= UInt<1>("h01") @[TilelinkHost.scala 77:22]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 78:38]
        addrReg <= io.reqIn.bits.addrRequest @[TilelinkHost.scala 79:21]
        skip @[TilelinkHost.scala 60:29]
      skip @[TilelinkHost.scala 56:28]
    else : @[TilelinkHost.scala 84:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkHost.scala 84:25]
      when _T_1 : @[TilelinkHost.scala 84:43]
        io.tlSlaveReceiver.ready <= UInt<1>("h01") @[TilelinkHost.scala 86:34]
        io.reqIn.ready <= UInt<1>("h00") @[TilelinkHost.scala 87:34]
        when io.tlSlaveReceiver.valid : @[TilelinkHost.scala 89:39]
          io.rspOut.bits.dataResponse <= io.tlSlaveReceiver.bits.d_data @[TilelinkHost.scala 91:41]
          io.rspOut.bits.error <= io.tlSlaveReceiver.bits.d_denied @[TilelinkHost.scala 92:34]
          io.rspOut.valid <= io.tlSlaveReceiver.valid @[TilelinkHost.scala 94:29]
          stateReg <= UInt<1>("h00") @[TilelinkHost.scala 95:22]
          skip @[TilelinkHost.scala 89:39]
        skip @[TilelinkHost.scala 84:43]
    
  module TilelinkDevice : 
    input clock : Clock
    input reset : Reset
    output io : {tlSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {d_opcode : UInt<3>, d_param : UInt<2>, d_size : UInt<2>, d_source : UInt<8>, d_sink : UInt<1>, d_denied : UInt<1>, d_corrupt : UInt<1>, d_data : UInt<80>}}, flip tlMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {a_opcode : UInt<3>, a_param : UInt<3>, a_size : UInt<2>, a_source : UInt<8>, a_address : UInt<32>, a_mask : UInt<10>, a_corrupt : UInt<1>, a_data : UInt<80>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<80>, activeByteLane : UInt<10>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<80>, error : UInt<1>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[TilelinkDevice.scala 17:27]
    io.tlMasterReceiver.ready <= UInt<1>("h01") @[TilelinkDevice.scala 19:31]
    io.rspIn.ready <= UInt<1>("h00") @[TilelinkDevice.scala 20:20]
    io.reqOut.bits.addrRequest <= UInt<1>("h00") @[TilelinkDevice.scala 23:37]
    io.reqOut.bits.dataRequest <= UInt<1>("h00") @[TilelinkDevice.scala 24:37]
    io.reqOut.bits.activeByteLane <= UInt<1>("h00") @[TilelinkDevice.scala 25:37]
    io.reqOut.bits.isWrite <= UInt<1>("h00") @[TilelinkDevice.scala 26:37]
    io.reqOut.valid <= UInt<1>("h00") @[TilelinkDevice.scala 27:37]
    io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h00") @[TilelinkDevice.scala 29:45]
    io.tlSlaveTransmitter.bits.d_data <= UInt<1>("h00") @[TilelinkDevice.scala 30:45]
    io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 31:45]
    io.tlSlaveTransmitter.bits.d_size <= UInt<1>("h00") @[TilelinkDevice.scala 32:45]
    io.tlSlaveTransmitter.bits.d_source <= UInt<1>("h00") @[TilelinkDevice.scala 33:45]
    io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 34:45]
    io.tlSlaveTransmitter.bits.d_denied <= UInt<1>("h00") @[TilelinkDevice.scala 35:45]
    io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 36:45]
    io.tlSlaveTransmitter.valid <= UInt<1>("h00") @[TilelinkDevice.scala 37:45]
    node _T = eq(stateReg, UInt<1>("h00")) @[TilelinkDevice.scala 41:19]
    when _T : @[TilelinkDevice.scala 41:28]
      when io.tlMasterReceiver.valid : @[TilelinkDevice.scala 43:40]
        io.reqOut.bits.addrRequest <= io.tlMasterReceiver.bits.a_address @[TilelinkDevice.scala 45:40]
        io.reqOut.bits.dataRequest <= io.tlMasterReceiver.bits.a_data @[TilelinkDevice.scala 46:40]
        io.reqOut.bits.activeByteLane <= io.tlMasterReceiver.bits.a_mask @[TilelinkDevice.scala 47:43]
        node _io_reqOut_bits_isWrite_T = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h00")) @[TilelinkDevice.scala 48:73]
        node _io_reqOut_bits_isWrite_T_1 = eq(io.tlMasterReceiver.bits.a_opcode, UInt<1>("h01")) @[TilelinkDevice.scala 48:128]
        node _io_reqOut_bits_isWrite_T_2 = or(_io_reqOut_bits_isWrite_T, _io_reqOut_bits_isWrite_T_1) @[TilelinkDevice.scala 48:91]
        io.reqOut.bits.isWrite <= _io_reqOut_bits_isWrite_T_2 @[TilelinkDevice.scala 48:36]
        io.reqOut.valid <= UInt<1>("h01") @[TilelinkDevice.scala 49:29]
        stateReg <= UInt<1>("h01") @[TilelinkDevice.scala 51:22]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 52:28]
        skip @[TilelinkDevice.scala 43:40]
      skip @[TilelinkDevice.scala 41:28]
    else : @[TilelinkDevice.scala 56:43]
      node _T_1 = eq(stateReg, UInt<1>("h01")) @[TilelinkDevice.scala 56:25]
      when _T_1 : @[TilelinkDevice.scala 56:43]
        io.rspIn.ready <= UInt<1>("h01") @[TilelinkDevice.scala 58:24]
        when io.rspIn.valid : @[TilelinkDevice.scala 60:29]
          io.tlSlaveTransmitter.bits.d_opcode <= UInt<1>("h01") @[TilelinkDevice.scala 62:49]
          io.tlSlaveTransmitter.bits.d_data <= io.rspIn.bits.dataResponse @[TilelinkDevice.scala 63:47]
          io.tlSlaveTransmitter.bits.d_param <= UInt<1>("h00") @[TilelinkDevice.scala 64:48]
          io.tlSlaveTransmitter.bits.d_size <= io.tlMasterReceiver.bits.a_size @[TilelinkDevice.scala 65:47]
          io.tlSlaveTransmitter.bits.d_source <= io.tlMasterReceiver.bits.a_source @[TilelinkDevice.scala 66:49]
          io.tlSlaveTransmitter.bits.d_sink <= UInt<1>("h00") @[TilelinkDevice.scala 67:47]
          io.tlSlaveTransmitter.bits.d_denied <= io.rspIn.bits.error @[TilelinkDevice.scala 68:49]
          io.tlSlaveTransmitter.bits.d_corrupt <= UInt<1>("h00") @[TilelinkDevice.scala 69:50]
          io.tlSlaveTransmitter.valid <= io.rspIn.valid @[TilelinkDevice.scala 70:41]
          stateReg <= UInt<1>("h00") @[TilelinkDevice.scala 72:22]
          skip @[TilelinkDevice.scala 60:29]
        skip @[TilelinkDevice.scala 56:43]
    
  module i2c_master : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, flip addr : UInt<7>, flip data : UInt<8>, flip read_write : UInt<1>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, i2c_intr : UInt<1>}
    
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 25:24]
    reg count : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[i2c_master.scala 26:24]
    reg saved_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_master.scala 27:29]
    reg saved_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 28:29]
    reg i2c_scl_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[i2c_master.scala 29:33]
    reg intr_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 30:28]
    state <= UInt<3>("h00") @[i2c_master.scala 32:11]
    io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 34:16]
    io.ready <= UInt<1>("h00") @[i2c_master.scala 35:14]
    io.stop <= UInt<1>("h00") @[i2c_master.scala 36:13]
    node _clk_T = asUInt(clock) @[i2c_master.scala 38:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[i2c_master.scala 38:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _rst_T = asUInt(reset) @[i2c_master.scala 39:36]
    node _rst_T_1 = bits(_rst_T, 0, 0) @[i2c_master.scala 39:38]
    wire rst : UInt<1>
    rst <= _rst_T_1
    node _io_i2c_scl_T = eq(i2c_scl_enable, UInt<1>("h00")) @[i2c_master.scala 41:38]
    node _io_i2c_scl_T_1 = not(clk) @[i2c_master.scala 41:54]
    node _io_i2c_scl_T_2 = mux(_io_i2c_scl_T, UInt<1>("h01"), _io_i2c_scl_T_1) @[i2c_master.scala 41:22]
    io.i2c_scl <= _io_i2c_scl_T_2 @[i2c_master.scala 41:16]
    node _T = eq(rst, UInt<1>("h01")) @[i2c_master.scala 43:14]
    when _T : @[i2c_master.scala 43:22]
      i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 44:24]
      skip @[i2c_master.scala 43:22]
    else : @[i2c_master.scala 45:16]
      node _T_1 = eq(state, UInt<3>("h00")) @[i2c_master.scala 46:22]
      node _T_2 = eq(state, UInt<3>("h01")) @[i2c_master.scala 46:46]
      node _T_3 = or(_T_1, _T_2) @[i2c_master.scala 46:37]
      node _T_4 = eq(state, UInt<3>("h07")) @[i2c_master.scala 46:71]
      node _T_5 = or(_T_3, _T_4) @[i2c_master.scala 46:62]
      when _T_5 : @[i2c_master.scala 46:87]
        i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 47:28]
        skip @[i2c_master.scala 46:87]
      else : @[i2c_master.scala 48:20]
        i2c_scl_enable <= UInt<1>("h01") @[i2c_master.scala 49:29]
        skip @[i2c_master.scala 48:20]
      skip @[i2c_master.scala 45:16]
    node _T_6 = eq(rst, UInt<1>("h01")) @[i2c_master.scala 53:14]
    when _T_6 : @[i2c_master.scala 53:22]
      state <= UInt<3>("h00") @[i2c_master.scala 54:15]
      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 55:20]
      skip @[i2c_master.scala 53:22]
    else : @[i2c_master.scala 56:16]
      node _T_7 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 40:58]
        io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 59:28]
        intr_done <= UInt<1>("h00") @[i2c_master.scala 60:27]
        node _T_8 = eq(io.start, UInt<1>("h01")) @[i2c_master.scala 61:31]
        when _T_8 : @[i2c_master.scala 61:39]
          state <= UInt<3>("h01") @[i2c_master.scala 62:27]
          io.ready <= UInt<1>("h00") @[i2c_master.scala 63:30]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 64:29]
          skip @[i2c_master.scala 61:39]
        else : @[i2c_master.scala 65:28]
          state <= UInt<3>("h00") @[i2c_master.scala 66:27]
          skip @[i2c_master.scala 65:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 72:28]
          saved_addr <= io.addr @[i2c_master.scala 73:28]
          saved_data <= io.data @[i2c_master.scala 74:28]
          io.ready <= UInt<1>("h01") @[i2c_master.scala 75:26]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 76:25]
          state <= UInt<3>("h02") @[i2c_master.scala 77:23]
          count <= UInt<3>("h06") @[i2c_master.scala 78:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _io_i2c_sda_T = dshr(saved_addr, count) @[i2c_master.scala 82:41]
            node _io_i2c_sda_T_1 = bits(_io_i2c_sda_T, 0, 0) @[i2c_master.scala 82:41]
            io.i2c_sda <= _io_i2c_sda_T_1 @[i2c_master.scala 82:28]
            io.ready <= UInt<1>("h00") @[i2c_master.scala 83:26]
            io.stop <= UInt<1>("h00") @[i2c_master.scala 84:25]
            node _T_11 = eq(count, UInt<1>("h00")) @[i2c_master.scala 85:28]
            when _T_11 : @[i2c_master.scala 85:36]
              state <= UInt<3>("h03") @[i2c_master.scala 86:27]
              skip @[i2c_master.scala 85:36]
            else : @[i2c_master.scala 87:28]
              node _count_T = sub(count, UInt<1>("h01")) @[i2c_master.scala 88:36]
              node _count_T_1 = tail(_count_T, 1) @[i2c_master.scala 88:36]
              count <= _count_T_1 @[i2c_master.scala 88:27]
              state <= UInt<3>("h02") @[i2c_master.scala 89:27]
              skip @[i2c_master.scala 87:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.i2c_sda <= io.read_write @[i2c_master.scala 95:28]
              io.ready <= UInt<1>("h00") @[i2c_master.scala 96:26]
              io.stop <= UInt<1>("h00") @[i2c_master.scala 97:25]
              state <= UInt<3>("h04") @[i2c_master.scala 98:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 104:32]
                node _T_14 = eq(io.i2c_sda_in, UInt<1>("h00")) @[i2c_master.scala 105:40]
                when _T_14 : @[i2c_master.scala 105:48]
                  state <= UInt<3>("h05") @[i2c_master.scala 106:31]
                  count <= UInt<3>("h07") @[i2c_master.scala 107:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 108:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 109:33]
                  skip @[i2c_master.scala 105:48]
                else : @[i2c_master.scala 110:32]
                  state <= UInt<3>("h07") @[i2c_master.scala 111:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 112:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 113:33]
                  skip @[i2c_master.scala 110:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_15 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
                when _T_15 : @[Conditional.scala 39:67]
                  node _io_i2c_sda_T_2 = dshr(io.data, count) @[i2c_master.scala 120:38]
                  node _io_i2c_sda_T_3 = bits(_io_i2c_sda_T_2, 0, 0) @[i2c_master.scala 120:38]
                  io.i2c_sda <= _io_i2c_sda_T_3 @[i2c_master.scala 120:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 121:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 122:25]
                  node _T_16 = eq(count, UInt<1>("h00")) @[i2c_master.scala 123:28]
                  when _T_16 : @[i2c_master.scala 123:36]
                    state <= UInt<3>("h06") @[i2c_master.scala 124:27]
                    skip @[i2c_master.scala 123:36]
                  else : @[i2c_master.scala 125:28]
                    node _count_T_2 = sub(count, UInt<1>("h01")) @[i2c_master.scala 126:36]
                    node _count_T_3 = tail(_count_T_2, 1) @[i2c_master.scala 126:36]
                    count <= _count_T_3 @[i2c_master.scala 126:27]
                    state <= UInt<3>("h05") @[i2c_master.scala 127:27]
                    skip @[i2c_master.scala 125:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_17 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                  when _T_17 : @[Conditional.scala 39:67]
                    io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 133:28]
                    io.ready <= UInt<1>("h00") @[i2c_master.scala 134:26]
                    io.stop <= UInt<1>("h00") @[i2c_master.scala 135:25]
                    state <= UInt<3>("h07") @[i2c_master.scala 136:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_18 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
                    when _T_18 : @[Conditional.scala 39:67]
                      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 140:28]
                      intr_done <= UInt<1>("h01") @[i2c_master.scala 141:27]
                      io.ready <= UInt<1>("h00") @[i2c_master.scala 142:26]
                      io.stop <= UInt<1>("h01") @[i2c_master.scala 143:25]
                      state <= UInt<3>("h00") @[i2c_master.scala 144:23]
                      skip @[Conditional.scala 39:67]
      skip @[i2c_master.scala 56:16]
    io.i2c_intr <= intr_done @[i2c_master.scala 149:17]
    
  module I2C_Top : 
    input clock : Clock
    input reset : Reset
    output io : {flip wdata : UInt<32>, flip addr : UInt<7>, flip ren : UInt<1>, flip we : UInt<1>, flip sda_in : UInt<1>, sda : UInt<1>, scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, intr : UInt<1>}
    
    reg addr_start_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 31:33]
    reg addr_slave_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[I2C_Top.scala 32:34]
    reg addr_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C_Top.scala 33:28]
    reg addr_read_write_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 34:38]
    reg addr_sda_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C_Top.scala 35:30]
    node _T = eq(io.ren, UInt<1>("h00")) @[I2C_Top.scala 40:10]
    node _T_1 = and(_T, io.we) @[I2C_Top.scala 40:20]
    when _T_1 : @[I2C_Top.scala 40:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[I2C_Top.scala 41:18]
      when _T_2 : @[I2C_Top.scala 41:37]
        node _addr_start_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 42:35]
        addr_start_bit <= _addr_start_bit_T @[I2C_Top.scala 42:24]
        skip @[I2C_Top.scala 41:37]
      else : @[I2C_Top.scala 43:44]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[I2C_Top.scala 43:24]
        when _T_3 : @[I2C_Top.scala 43:44]
          node _addr_slave_addr_T = bits(io.wdata, 6, 0) @[I2C_Top.scala 44:36]
          addr_slave_addr <= _addr_slave_addr_T @[I2C_Top.scala 44:25]
          skip @[I2C_Top.scala 43:44]
        else : @[I2C_Top.scala 45:38]
          node _T_4 = eq(io.addr, UInt<5>("h010")) @[I2C_Top.scala 45:24]
          when _T_4 : @[I2C_Top.scala 45:38]
            node _addr_data_T = bits(io.wdata, 7, 0) @[I2C_Top.scala 46:30]
            addr_data <= _addr_data_T @[I2C_Top.scala 46:19]
            skip @[I2C_Top.scala 45:38]
          else : @[I2C_Top.scala 47:48]
            node _T_5 = eq(io.addr, UInt<4>("h08")) @[I2C_Top.scala 47:24]
            when _T_5 : @[I2C_Top.scala 47:48]
              node _addr_read_write_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 48:40]
              addr_read_write_bit <= _addr_read_write_bit_T @[I2C_Top.scala 48:29]
              skip @[I2C_Top.scala 47:48]
            else : @[I2C_Top.scala 49:40]
              node _T_6 = eq(io.addr, UInt<4>("h0c")) @[I2C_Top.scala 49:24]
              when _T_6 : @[I2C_Top.scala 49:40]
                node _addr_sda_in_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 50:33]
                addr_sda_in <= _addr_sda_in_T @[I2C_Top.scala 50:22]
                skip @[I2C_Top.scala 49:40]
              else : @[I2C_Top.scala 53:16]
                addr_start_bit <= UInt<1>("h00") @[I2C_Top.scala 54:24]
                addr_slave_addr <= UInt<1>("h00") @[I2C_Top.scala 55:25]
                addr_data <= UInt<1>("h00") @[I2C_Top.scala 56:19]
                skip @[I2C_Top.scala 53:16]
      skip @[I2C_Top.scala 40:29]
    inst i2c_master of i2c_master @[I2C_Top.scala 63:28]
    i2c_master.clock <= clock
    i2c_master.reset <= reset
    i2c_master.io.start <= addr_start_bit @[I2C_Top.scala 64:25]
    i2c_master.io.addr <= addr_slave_addr @[I2C_Top.scala 65:24]
    i2c_master.io.data <= addr_data @[I2C_Top.scala 66:24]
    i2c_master.io.read_write <= addr_read_write_bit @[I2C_Top.scala 67:30]
    i2c_master.io.i2c_sda_in <= addr_sda_in @[I2C_Top.scala 68:30]
    io.sda <= i2c_master.io.i2c_sda @[I2C_Top.scala 70:12]
    io.scl <= i2c_master.io.i2c_scl @[I2C_Top.scala 71:12]
    io.intr <= i2c_master.io.i2c_intr @[I2C_Top.scala 72:13]
    io.ready <= i2c_master.io.ready @[I2C_Top.scala 73:14]
    io.stop <= i2c_master.io.stop @[I2C_Top.scala 74:13]
    
  module i2c : 
    input clock : Clock
    input reset : Reset
    output io : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<80>, activeByteLane : UInt<10>, isWrite : UInt<1>}}, response : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<80>, error : UInt<1>}}, flip cio_i2c_sda_in : UInt<1>, cio_i2c_sda : UInt<1>, cio_i2c_scl : UInt<1>, cio_i2c_intr : UInt<1>}
    
    io.request.ready <= UInt<1>("h01") @[i2c.scala 17:22]
    inst i2c_top of I2C_Top @[i2c.scala 19:26]
    i2c_top.clock <= clock
    i2c_top.reset <= reset
    wire write_register : UInt<1> @[i2c.scala 22:46]
    wire read_register : UInt<1> @[i2c.scala 22:46]
    wire data_reg : UInt<32> @[i2c.scala 23:24]
    wire addr_reg : UInt<8> @[i2c.scala 24:24]
    node _write_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _write_register_T_1 = mux(_write_register_T, io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 26:26]
    write_register <= _write_register_T_1 @[i2c.scala 26:20]
    node _read_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _read_register_T_1 = eq(io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 27:45]
    node _read_register_T_2 = mux(_read_register_T, _read_register_T_1, UInt<1>("h00")) @[i2c.scala 27:25]
    read_register <= _read_register_T_2 @[i2c.scala 27:19]
    data_reg <= io.request.bits.dataRequest @[i2c.scala 28:14]
    node _addr_reg_T = bits(io.request.bits.addrRequest, 6, 0) @[i2c.scala 29:44]
    addr_reg <= _addr_reg_T @[i2c.scala 29:14]
    i2c_top.io.wdata <= data_reg @[i2c.scala 30:22]
    i2c_top.io.addr <= addr_reg @[i2c.scala 31:21]
    i2c_top.io.we <= write_register @[i2c.scala 32:19]
    i2c_top.io.ren <= read_register @[i2c.scala 33:20]
    node _io_response_bits_dataResponse_T = mux(io.response.ready, i2c_top.io.wdata, UInt<1>("h00")) @[i2c.scala 35:49]
    reg io_response_bits_dataResponse_REG : UInt, clock @[i2c.scala 35:45]
    io_response_bits_dataResponse_REG <= _io_response_bits_dataResponse_T @[i2c.scala 35:45]
    io.response.bits.dataResponse <= io_response_bits_dataResponse_REG @[i2c.scala 35:35]
    node _io_response_valid_T = or(write_register, read_register) @[i2c.scala 36:53]
    node _io_response_valid_T_1 = mux(_io_response_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[i2c.scala 36:37]
    reg io_response_valid_REG : UInt<1>, clock @[i2c.scala 36:33]
    io_response_valid_REG <= _io_response_valid_T_1 @[i2c.scala 36:33]
    io.response.valid <= io_response_valid_REG @[i2c.scala 36:23]
    node _io_response_bits_error_T = mux(io.response.ready, i2c_top.io.intr, UInt<1>("h00")) @[i2c.scala 37:42]
    reg io_response_bits_error_REG : UInt, clock @[i2c.scala 37:38]
    io_response_bits_error_REG <= _io_response_bits_error_T @[i2c.scala 37:38]
    io.response.bits.error <= io_response_bits_error_REG @[i2c.scala 37:28]
    i2c_top.io.sda_in <= io.cio_i2c_sda_in @[i2c.scala 39:23]
    io.cio_i2c_sda <= i2c_top.io.sda @[i2c.scala 41:20]
    io.cio_i2c_scl <= i2c_top.io.scl @[i2c.scala 42:20]
    io.cio_i2c_intr <= i2c_top.io.intr @[i2c.scala 43:21]
    
  module I2CHarnessTL : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<80>, activeByteLane : UInt<10>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<80>, error : UInt<1>}}, flip cio_i2c_sda_in : UInt<1>, cio_i2c_sda : UInt<1>, cio_i2c_scl : UInt<1>, cio_i2c_intr : UInt<1>}
    
    inst hostAdapter of TilelinkHost @[Harness.scala 125:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of TilelinkDevice @[Harness.scala 126:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst i2c of i2c @[Harness.scala 127:19]
    i2c.clock <= clock
    i2c.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[Harness.scala 129:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[Harness.scala 129:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[Harness.scala 129:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[Harness.scala 129:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[Harness.scala 129:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[Harness.scala 129:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[Harness.scala 130:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[Harness.scala 130:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[Harness.scala 130:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[Harness.scala 130:10]
    deviceAdapter.io.tlMasterReceiver.bits.a_data <= hostAdapter.io.tlMasterTransmitter.bits.a_data @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_corrupt <= hostAdapter.io.tlMasterTransmitter.bits.a_corrupt @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_mask <= hostAdapter.io.tlMasterTransmitter.bits.a_mask @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_address <= hostAdapter.io.tlMasterTransmitter.bits.a_address @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_source <= hostAdapter.io.tlMasterTransmitter.bits.a_source @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_size <= hostAdapter.io.tlMasterTransmitter.bits.a_size @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_param <= hostAdapter.io.tlMasterTransmitter.bits.a_param @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.bits.a_opcode <= hostAdapter.io.tlMasterTransmitter.bits.a_opcode @[Harness.scala 132:38]
    deviceAdapter.io.tlMasterReceiver.valid <= hostAdapter.io.tlMasterTransmitter.valid @[Harness.scala 132:38]
    hostAdapter.io.tlMasterTransmitter.ready <= deviceAdapter.io.tlMasterReceiver.ready @[Harness.scala 132:38]
    hostAdapter.io.tlSlaveReceiver.bits.d_data <= deviceAdapter.io.tlSlaveTransmitter.bits.d_data @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_corrupt <= deviceAdapter.io.tlSlaveTransmitter.bits.d_corrupt @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_denied <= deviceAdapter.io.tlSlaveTransmitter.bits.d_denied @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_sink <= deviceAdapter.io.tlSlaveTransmitter.bits.d_sink @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_source <= deviceAdapter.io.tlSlaveTransmitter.bits.d_source @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_size <= deviceAdapter.io.tlSlaveTransmitter.bits.d_size @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_param <= deviceAdapter.io.tlSlaveTransmitter.bits.d_param @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.bits.d_opcode <= deviceAdapter.io.tlSlaveTransmitter.bits.d_opcode @[Harness.scala 133:34]
    hostAdapter.io.tlSlaveReceiver.valid <= deviceAdapter.io.tlSlaveTransmitter.valid @[Harness.scala 133:34]
    deviceAdapter.io.tlSlaveTransmitter.ready <= hostAdapter.io.tlSlaveReceiver.ready @[Harness.scala 133:34]
    i2c.io.request.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[Harness.scala 135:18]
    i2c.io.request.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[Harness.scala 135:18]
    i2c.io.request.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[Harness.scala 135:18]
    i2c.io.request.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[Harness.scala 135:18]
    i2c.io.request.valid <= deviceAdapter.io.reqOut.valid @[Harness.scala 135:18]
    deviceAdapter.io.reqOut.ready <= i2c.io.request.ready @[Harness.scala 135:18]
    deviceAdapter.io.rspIn.bits.error <= i2c.io.response.bits.error @[Harness.scala 136:19]
    deviceAdapter.io.rspIn.bits.dataResponse <= i2c.io.response.bits.dataResponse @[Harness.scala 136:19]
    deviceAdapter.io.rspIn.valid <= i2c.io.response.valid @[Harness.scala 136:19]
    i2c.io.response.ready <= deviceAdapter.io.rspIn.ready @[Harness.scala 136:19]
    i2c.io.cio_i2c_sda_in <= io.cio_i2c_sda_in @[Harness.scala 138:25]
    io.cio_i2c_sda <= i2c.io.cio_i2c_sda @[Harness.scala 139:18]
    io.cio_i2c_scl <= i2c.io.cio_i2c_scl @[Harness.scala 140:18]
    io.cio_i2c_intr <= i2c.io.cio_i2c_intr @[Harness.scala 141:19]
    

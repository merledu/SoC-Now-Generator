;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit I2CHarnessWB : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module i2c_master : 
    input clock : Clock
    input reset : Reset
    output io : {flip start : UInt<1>, flip addr : UInt<7>, flip data : UInt<8>, flip read_write : UInt<1>, flip i2c_sda_in : UInt<1>, i2c_sda : UInt<1>, i2c_scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, i2c_intr : UInt<1>}
    
    reg state : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 25:24]
    reg count : UInt<15>, clock with : (reset => (reset, UInt<15>("h00"))) @[i2c_master.scala 26:24]
    reg saved_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[i2c_master.scala 27:29]
    reg saved_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[i2c_master.scala 28:29]
    reg i2c_scl_enable : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[i2c_master.scala 29:33]
    reg intr_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[i2c_master.scala 30:28]
    state <= UInt<3>("h00") @[i2c_master.scala 32:11]
    io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 34:16]
    io.ready <= UInt<1>("h00") @[i2c_master.scala 35:14]
    io.stop <= UInt<1>("h00") @[i2c_master.scala 36:13]
    node _clk_T = asUInt(clock) @[i2c_master.scala 38:36]
    node _clk_T_1 = bits(_clk_T, 0, 0) @[i2c_master.scala 38:38]
    wire clk : UInt<1>
    clk <= _clk_T_1
    node _rst_T = asUInt(reset) @[i2c_master.scala 39:36]
    node _rst_T_1 = bits(_rst_T, 0, 0) @[i2c_master.scala 39:38]
    wire rst : UInt<1>
    rst <= _rst_T_1
    node _io_i2c_scl_T = eq(i2c_scl_enable, UInt<1>("h00")) @[i2c_master.scala 41:38]
    node _io_i2c_scl_T_1 = not(clk) @[i2c_master.scala 41:54]
    node _io_i2c_scl_T_2 = mux(_io_i2c_scl_T, UInt<1>("h01"), _io_i2c_scl_T_1) @[i2c_master.scala 41:22]
    io.i2c_scl <= _io_i2c_scl_T_2 @[i2c_master.scala 41:16]
    node _T = eq(rst, UInt<1>("h01")) @[i2c_master.scala 43:14]
    when _T : @[i2c_master.scala 43:22]
      i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 44:24]
      skip @[i2c_master.scala 43:22]
    else : @[i2c_master.scala 45:16]
      node _T_1 = eq(state, UInt<3>("h00")) @[i2c_master.scala 46:22]
      node _T_2 = eq(state, UInt<3>("h01")) @[i2c_master.scala 46:46]
      node _T_3 = or(_T_1, _T_2) @[i2c_master.scala 46:37]
      node _T_4 = eq(state, UInt<3>("h07")) @[i2c_master.scala 46:71]
      node _T_5 = or(_T_3, _T_4) @[i2c_master.scala 46:62]
      when _T_5 : @[i2c_master.scala 46:87]
        i2c_scl_enable <= UInt<1>("h00") @[i2c_master.scala 47:28]
        skip @[i2c_master.scala 46:87]
      else : @[i2c_master.scala 48:20]
        i2c_scl_enable <= UInt<1>("h01") @[i2c_master.scala 49:29]
        skip @[i2c_master.scala 48:20]
      skip @[i2c_master.scala 45:16]
    node _T_6 = eq(rst, UInt<1>("h01")) @[i2c_master.scala 53:14]
    when _T_6 : @[i2c_master.scala 53:22]
      state <= UInt<3>("h00") @[i2c_master.scala 54:15]
      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 55:20]
      skip @[i2c_master.scala 53:22]
    else : @[i2c_master.scala 56:16]
      node _T_7 = eq(UInt<3>("h00"), state) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 40:58]
        io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 59:28]
        intr_done <= UInt<1>("h00") @[i2c_master.scala 60:27]
        node _T_8 = eq(io.start, UInt<1>("h01")) @[i2c_master.scala 61:31]
        when _T_8 : @[i2c_master.scala 61:39]
          state <= UInt<3>("h01") @[i2c_master.scala 62:27]
          io.ready <= UInt<1>("h00") @[i2c_master.scala 63:30]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 64:29]
          skip @[i2c_master.scala 61:39]
        else : @[i2c_master.scala 65:28]
          state <= UInt<3>("h00") @[i2c_master.scala 66:27]
          skip @[i2c_master.scala 65:28]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_9 = eq(UInt<3>("h01"), state) @[Conditional.scala 37:30]
        when _T_9 : @[Conditional.scala 39:67]
          io.i2c_sda <= UInt<1>("h00") @[i2c_master.scala 72:28]
          saved_addr <= io.addr @[i2c_master.scala 73:28]
          saved_data <= io.data @[i2c_master.scala 74:28]
          io.ready <= UInt<1>("h01") @[i2c_master.scala 75:26]
          io.stop <= UInt<1>("h00") @[i2c_master.scala 76:25]
          state <= UInt<3>("h02") @[i2c_master.scala 77:23]
          count <= UInt<3>("h06") @[i2c_master.scala 78:23]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_10 = eq(UInt<3>("h02"), state) @[Conditional.scala 37:30]
          when _T_10 : @[Conditional.scala 39:67]
            node _io_i2c_sda_T = dshr(saved_addr, count) @[i2c_master.scala 82:41]
            node _io_i2c_sda_T_1 = bits(_io_i2c_sda_T, 0, 0) @[i2c_master.scala 82:41]
            io.i2c_sda <= _io_i2c_sda_T_1 @[i2c_master.scala 82:28]
            io.ready <= UInt<1>("h00") @[i2c_master.scala 83:26]
            io.stop <= UInt<1>("h00") @[i2c_master.scala 84:25]
            node _T_11 = eq(count, UInt<1>("h00")) @[i2c_master.scala 85:28]
            when _T_11 : @[i2c_master.scala 85:36]
              state <= UInt<3>("h03") @[i2c_master.scala 86:27]
              skip @[i2c_master.scala 85:36]
            else : @[i2c_master.scala 87:28]
              node _count_T = sub(count, UInt<1>("h01")) @[i2c_master.scala 88:36]
              node _count_T_1 = tail(_count_T, 1) @[i2c_master.scala 88:36]
              count <= _count_T_1 @[i2c_master.scala 88:27]
              state <= UInt<3>("h02") @[i2c_master.scala 89:27]
              skip @[i2c_master.scala 87:28]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_12 = eq(UInt<3>("h03"), state) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 39:67]
              io.i2c_sda <= io.read_write @[i2c_master.scala 95:28]
              io.ready <= UInt<1>("h00") @[i2c_master.scala 96:26]
              io.stop <= UInt<1>("h00") @[i2c_master.scala 97:25]
              state <= UInt<3>("h04") @[i2c_master.scala 98:23]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<3>("h04"), state) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 104:32]
                node _T_14 = eq(io.i2c_sda_in, UInt<1>("h00")) @[i2c_master.scala 105:40]
                when _T_14 : @[i2c_master.scala 105:48]
                  state <= UInt<3>("h05") @[i2c_master.scala 106:31]
                  count <= UInt<3>("h07") @[i2c_master.scala 107:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 108:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 109:33]
                  skip @[i2c_master.scala 105:48]
                else : @[i2c_master.scala 110:32]
                  state <= UInt<3>("h07") @[i2c_master.scala 111:31]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 112:34]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 113:33]
                  skip @[i2c_master.scala 110:32]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_15 = eq(UInt<3>("h05"), state) @[Conditional.scala 37:30]
                when _T_15 : @[Conditional.scala 39:67]
                  node _io_i2c_sda_T_2 = dshr(io.data, count) @[i2c_master.scala 120:38]
                  node _io_i2c_sda_T_3 = bits(_io_i2c_sda_T_2, 0, 0) @[i2c_master.scala 120:38]
                  io.i2c_sda <= _io_i2c_sda_T_3 @[i2c_master.scala 120:28]
                  io.ready <= UInt<1>("h00") @[i2c_master.scala 121:26]
                  io.stop <= UInt<1>("h00") @[i2c_master.scala 122:25]
                  node _T_16 = eq(count, UInt<1>("h00")) @[i2c_master.scala 123:28]
                  when _T_16 : @[i2c_master.scala 123:36]
                    state <= UInt<3>("h06") @[i2c_master.scala 124:27]
                    skip @[i2c_master.scala 123:36]
                  else : @[i2c_master.scala 125:28]
                    node _count_T_2 = sub(count, UInt<1>("h01")) @[i2c_master.scala 126:36]
                    node _count_T_3 = tail(_count_T_2, 1) @[i2c_master.scala 126:36]
                    count <= _count_T_3 @[i2c_master.scala 126:27]
                    state <= UInt<3>("h05") @[i2c_master.scala 127:27]
                    skip @[i2c_master.scala 125:28]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_17 = eq(UInt<3>("h06"), state) @[Conditional.scala 37:30]
                  when _T_17 : @[Conditional.scala 39:67]
                    io.i2c_sda <= io.i2c_sda_in @[i2c_master.scala 133:28]
                    io.ready <= UInt<1>("h00") @[i2c_master.scala 134:26]
                    io.stop <= UInt<1>("h00") @[i2c_master.scala 135:25]
                    state <= UInt<3>("h07") @[i2c_master.scala 136:23]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_18 = eq(UInt<3>("h07"), state) @[Conditional.scala 37:30]
                    when _T_18 : @[Conditional.scala 39:67]
                      io.i2c_sda <= UInt<1>("h01") @[i2c_master.scala 140:28]
                      intr_done <= UInt<1>("h01") @[i2c_master.scala 141:27]
                      io.ready <= UInt<1>("h00") @[i2c_master.scala 142:26]
                      io.stop <= UInt<1>("h01") @[i2c_master.scala 143:25]
                      state <= UInt<3>("h00") @[i2c_master.scala 144:23]
                      skip @[Conditional.scala 39:67]
      skip @[i2c_master.scala 56:16]
    io.i2c_intr <= intr_done @[i2c_master.scala 149:17]
    
  module I2C_Top : 
    input clock : Clock
    input reset : Reset
    output io : {flip wdata : UInt<32>, flip addr : UInt<7>, flip ren : UInt<1>, flip we : UInt<1>, flip sda_in : UInt<1>, sda : UInt<1>, scl : UInt<1>, ready : UInt<1>, stop : UInt<1>, intr : UInt<1>}
    
    reg addr_start_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 31:33]
    reg addr_slave_addr : UInt<7>, clock with : (reset => (reset, UInt<7>("h00"))) @[I2C_Top.scala 32:34]
    reg addr_data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[I2C_Top.scala 33:28]
    reg addr_read_write_bit : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[I2C_Top.scala 34:38]
    reg addr_sda_in : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[I2C_Top.scala 35:30]
    node _T = eq(io.ren, UInt<1>("h00")) @[I2C_Top.scala 40:10]
    node _T_1 = and(_T, io.we) @[I2C_Top.scala 40:20]
    when _T_1 : @[I2C_Top.scala 40:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[I2C_Top.scala 41:18]
      when _T_2 : @[I2C_Top.scala 41:37]
        node _addr_start_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 42:35]
        addr_start_bit <= _addr_start_bit_T @[I2C_Top.scala 42:24]
        skip @[I2C_Top.scala 41:37]
      else : @[I2C_Top.scala 43:44]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[I2C_Top.scala 43:24]
        when _T_3 : @[I2C_Top.scala 43:44]
          node _addr_slave_addr_T = bits(io.wdata, 6, 0) @[I2C_Top.scala 44:36]
          addr_slave_addr <= _addr_slave_addr_T @[I2C_Top.scala 44:25]
          skip @[I2C_Top.scala 43:44]
        else : @[I2C_Top.scala 45:38]
          node _T_4 = eq(io.addr, UInt<5>("h010")) @[I2C_Top.scala 45:24]
          when _T_4 : @[I2C_Top.scala 45:38]
            node _addr_data_T = bits(io.wdata, 7, 0) @[I2C_Top.scala 46:30]
            addr_data <= _addr_data_T @[I2C_Top.scala 46:19]
            skip @[I2C_Top.scala 45:38]
          else : @[I2C_Top.scala 47:48]
            node _T_5 = eq(io.addr, UInt<4>("h08")) @[I2C_Top.scala 47:24]
            when _T_5 : @[I2C_Top.scala 47:48]
              node _addr_read_write_bit_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 48:40]
              addr_read_write_bit <= _addr_read_write_bit_T @[I2C_Top.scala 48:29]
              skip @[I2C_Top.scala 47:48]
            else : @[I2C_Top.scala 49:40]
              node _T_6 = eq(io.addr, UInt<4>("h0c")) @[I2C_Top.scala 49:24]
              when _T_6 : @[I2C_Top.scala 49:40]
                node _addr_sda_in_T = bits(io.wdata, 0, 0) @[I2C_Top.scala 50:33]
                addr_sda_in <= _addr_sda_in_T @[I2C_Top.scala 50:22]
                skip @[I2C_Top.scala 49:40]
              else : @[I2C_Top.scala 53:16]
                addr_start_bit <= UInt<1>("h00") @[I2C_Top.scala 54:24]
                addr_slave_addr <= UInt<1>("h00") @[I2C_Top.scala 55:25]
                addr_data <= UInt<1>("h00") @[I2C_Top.scala 56:19]
                skip @[I2C_Top.scala 53:16]
      skip @[I2C_Top.scala 40:29]
    inst i2c_master of i2c_master @[I2C_Top.scala 63:28]
    i2c_master.clock <= clock
    i2c_master.reset <= reset
    i2c_master.io.start <= addr_start_bit @[I2C_Top.scala 64:25]
    i2c_master.io.addr <= addr_slave_addr @[I2C_Top.scala 65:24]
    i2c_master.io.data <= addr_data @[I2C_Top.scala 66:24]
    i2c_master.io.read_write <= addr_read_write_bit @[I2C_Top.scala 67:30]
    i2c_master.io.i2c_sda_in <= addr_sda_in @[I2C_Top.scala 68:30]
    io.sda <= i2c_master.io.i2c_sda @[I2C_Top.scala 70:12]
    io.scl <= i2c_master.io.i2c_scl @[I2C_Top.scala 71:12]
    io.intr <= i2c_master.io.i2c_intr @[I2C_Top.scala 72:13]
    io.ready <= i2c_master.io.ready @[I2C_Top.scala 73:14]
    io.stop <= i2c_master.io.stop @[I2C_Top.scala 74:13]
    
  module i2c : 
    input clock : Clock
    input reset : Reset
    output io : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, response : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_i2c_sda_in : UInt<1>, cio_i2c_sda : UInt<1>, cio_i2c_scl : UInt<1>, cio_i2c_intr : UInt<1>}
    
    io.request.ready <= UInt<1>("h01") @[i2c.scala 17:22]
    inst i2c_top of I2C_Top @[i2c.scala 19:26]
    i2c_top.clock <= clock
    i2c_top.reset <= reset
    wire write_register : UInt<1> @[i2c.scala 22:46]
    wire read_register : UInt<1> @[i2c.scala 22:46]
    wire data_reg : UInt<32> @[i2c.scala 23:24]
    wire addr_reg : UInt<8> @[i2c.scala 24:24]
    node _write_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _write_register_T_1 = mux(_write_register_T, io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 26:26]
    write_register <= _write_register_T_1 @[i2c.scala 26:20]
    node _read_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _read_register_T_1 = eq(io.request.bits.isWrite, UInt<1>("h00")) @[i2c.scala 27:45]
    node _read_register_T_2 = mux(_read_register_T, _read_register_T_1, UInt<1>("h00")) @[i2c.scala 27:25]
    read_register <= _read_register_T_2 @[i2c.scala 27:19]
    data_reg <= io.request.bits.dataRequest @[i2c.scala 28:14]
    node _addr_reg_T = bits(io.request.bits.addrRequest, 6, 0) @[i2c.scala 29:44]
    addr_reg <= _addr_reg_T @[i2c.scala 29:14]
    i2c_top.io.wdata <= data_reg @[i2c.scala 30:22]
    i2c_top.io.addr <= addr_reg @[i2c.scala 31:21]
    i2c_top.io.we <= write_register @[i2c.scala 32:19]
    i2c_top.io.ren <= read_register @[i2c.scala 33:20]
    node _io_response_bits_dataResponse_T = mux(io.response.ready, i2c_top.io.wdata, UInt<1>("h00")) @[i2c.scala 35:49]
    reg io_response_bits_dataResponse_REG : UInt, clock @[i2c.scala 35:45]
    io_response_bits_dataResponse_REG <= _io_response_bits_dataResponse_T @[i2c.scala 35:45]
    io.response.bits.dataResponse <= io_response_bits_dataResponse_REG @[i2c.scala 35:35]
    node _io_response_valid_T = or(write_register, read_register) @[i2c.scala 36:53]
    node _io_response_valid_T_1 = mux(_io_response_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[i2c.scala 36:37]
    reg io_response_valid_REG : UInt<1>, clock @[i2c.scala 36:33]
    io_response_valid_REG <= _io_response_valid_T_1 @[i2c.scala 36:33]
    io.response.valid <= io_response_valid_REG @[i2c.scala 36:23]
    node _io_response_bits_error_T = mux(io.response.ready, i2c_top.io.intr, UInt<1>("h00")) @[i2c.scala 37:42]
    reg io_response_bits_error_REG : UInt, clock @[i2c.scala 37:38]
    io_response_bits_error_REG <= _io_response_bits_error_T @[i2c.scala 37:38]
    io.response.bits.error <= io_response_bits_error_REG @[i2c.scala 37:28]
    i2c_top.io.sda_in <= io.cio_i2c_sda_in @[i2c.scala 39:23]
    io.cio_i2c_sda <= i2c_top.io.sda @[i2c.scala 41:20]
    io.cio_i2c_scl <= i2c_top.io.scl @[i2c.scala 42:20]
    io.cio_i2c_intr <= i2c_top.io.intr @[i2c.scala 43:21]
    
  module I2CHarnessWB : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_i2c_sda_in : UInt<1>, cio_i2c_sda : UInt<1>, cio_i2c_scl : UInt<1>, cio_i2c_intr : UInt<1>}
    
    inst hostAdapter of WishboneHost @[Harness.scala 90:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[Harness.scala 91:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst i2c of i2c @[Harness.scala 92:19]
    i2c.clock <= clock
    i2c.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[Harness.scala 94:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[Harness.scala 94:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[Harness.scala 94:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[Harness.scala 94:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[Harness.scala 94:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[Harness.scala 94:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[Harness.scala 95:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[Harness.scala 95:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[Harness.scala 95:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[Harness.scala 95:10]
    deviceAdapter.io.wbMasterReceiver.bits.sel <= hostAdapter.io.wbMasterTransmitter.bits.sel @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.bits.dat <= hostAdapter.io.wbMasterTransmitter.bits.dat @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.bits.adr <= hostAdapter.io.wbMasterTransmitter.bits.adr @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.bits.we <= hostAdapter.io.wbMasterTransmitter.bits.we @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.bits.stb <= hostAdapter.io.wbMasterTransmitter.bits.stb @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.bits.cyc <= hostAdapter.io.wbMasterTransmitter.bits.cyc @[Harness.scala 97:38]
    deviceAdapter.io.wbMasterReceiver.valid <= hostAdapter.io.wbMasterTransmitter.valid @[Harness.scala 97:38]
    hostAdapter.io.wbMasterTransmitter.ready <= deviceAdapter.io.wbMasterReceiver.ready @[Harness.scala 97:38]
    hostAdapter.io.wbSlaveReceiver.bits.err <= deviceAdapter.io.wbSlaveTransmitter.bits.err @[Harness.scala 98:34]
    hostAdapter.io.wbSlaveReceiver.bits.dat <= deviceAdapter.io.wbSlaveTransmitter.bits.dat @[Harness.scala 98:34]
    hostAdapter.io.wbSlaveReceiver.bits.ack <= deviceAdapter.io.wbSlaveTransmitter.bits.ack @[Harness.scala 98:34]
    hostAdapter.io.wbSlaveReceiver.valid <= deviceAdapter.io.wbSlaveTransmitter.valid @[Harness.scala 98:34]
    deviceAdapter.io.wbSlaveTransmitter.ready <= hostAdapter.io.wbSlaveReceiver.ready @[Harness.scala 98:34]
    i2c.io.request.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[Harness.scala 100:18]
    i2c.io.request.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[Harness.scala 100:18]
    i2c.io.request.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[Harness.scala 100:18]
    i2c.io.request.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[Harness.scala 100:18]
    i2c.io.request.valid <= deviceAdapter.io.reqOut.valid @[Harness.scala 100:18]
    deviceAdapter.io.reqOut.ready <= i2c.io.request.ready @[Harness.scala 100:18]
    deviceAdapter.io.rspIn.bits.error <= i2c.io.response.bits.error @[Harness.scala 101:19]
    deviceAdapter.io.rspIn.bits.dataResponse <= i2c.io.response.bits.dataResponse @[Harness.scala 101:19]
    deviceAdapter.io.rspIn.valid <= i2c.io.response.valid @[Harness.scala 101:19]
    i2c.io.response.ready <= deviceAdapter.io.rspIn.ready @[Harness.scala 101:19]
    i2c.io.cio_i2c_sda_in <= io.cio_i2c_sda_in @[Harness.scala 103:25]
    io.cio_i2c_sda <= i2c.io.cio_i2c_sda @[Harness.scala 104:18]
    io.cio_i2c_scl <= i2c.io.cio_i2c_scl @[Harness.scala 105:18]
    io.cio_i2c_intr <= i2c.io.cio_i2c_intr @[Harness.scala 106:19]
    

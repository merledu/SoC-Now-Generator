;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit uartHarness : 
  module WishboneHost : 
    input clock : Clock
    input reset : Reset
    output io : {wbMasterTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, flip wbSlaveReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip reqIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rspOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    io.wbMasterTransmitter.valid <= io.wbMasterTransmitter.bits.stb @[WishboneHost.scala 23:32]
    io.wbSlaveReceiver.ready <= UInt<1>("h01") @[WishboneHost.scala 26:28]
    node _T = asUInt(reset) @[WishboneHost.scala 30:20]
    node _T_1 = eq(_T, UInt<1>("h01")) @[WishboneHost.scala 30:23]
    when _T_1 : @[WishboneHost.scala 30:35]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 37:116]
      skip @[WishboneHost.scala 30:35]
    reg startWBTransaction : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 39:35]
    reg dataReg : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[WishboneHost.scala 41:24]
    reg respReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 42:24]
    reg errReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 43:23]
    reg ackReg : UInt<1>, clock with : (reset => (reset, io.wbSlaveReceiver.bits.ack)) @[WishboneHost.scala 44:23]
    reg stbReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 46:23]
    reg cycReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 47:23]
    reg weReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 48:22]
    reg datReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 49:23]
    reg adrReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 50:23]
    reg selReg : UInt, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 51:23]
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WishboneHost.scala 56:25]
    reg readyReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[WishboneHost.scala 62:25]
    node _T_2 = and(io.reqIn.valid, io.wbMasterTransmitter.ready) @[WishboneHost.scala 18:37]
    when _T_2 : @[WishboneHost.scala 63:14]
      readyReg <= UInt<1>("h00") @[WishboneHost.scala 64:14]
      skip @[WishboneHost.scala 63:14]
    node _T_3 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 66:17]
    when _T_3 : @[WishboneHost.scala 66:33]
      readyReg <= UInt<1>("h01") @[WishboneHost.scala 67:14]
      skip @[WishboneHost.scala 66:33]
    io.reqIn.ready <= readyReg @[WishboneHost.scala 76:20]
    node _T_4 = eq(io.reqIn.bits.isWrite, UInt<1>("h00")) @[WishboneHost.scala 77:32]
    node _T_5 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 77:56]
    node _T_6 = and(_T_4, _T_5) @[WishboneHost.scala 77:44]
    node _T_7 = and(_T_6, io.reqIn.valid) @[WishboneHost.scala 77:67]
    when _T_7 : @[WishboneHost.scala 77:86]
      startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 78:26]
      stbReg <= UInt<1>("h01") @[WishboneHost.scala 79:14]
      cycReg <= UInt<1>("h01") @[WishboneHost.scala 80:14]
      weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 81:13]
      adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 82:14]
      datReg <= UInt<1>("h00") @[WishboneHost.scala 83:14]
      selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 84:14]
      skip @[WishboneHost.scala 77:86]
    else : @[WishboneHost.scala 85:92]
      node _T_8 = eq(io.reqIn.bits.isWrite, UInt<1>("h01")) @[WishboneHost.scala 85:39]
      node _T_9 = eq(readyReg, UInt<1>("h01")) @[WishboneHost.scala 85:62]
      node _T_10 = and(_T_8, _T_9) @[WishboneHost.scala 85:50]
      node _T_11 = and(_T_10, io.reqIn.valid) @[WishboneHost.scala 85:73]
      when _T_11 : @[WishboneHost.scala 85:92]
        startWBTransaction <= UInt<1>("h01") @[WishboneHost.scala 86:26]
        stbReg <= UInt<1>("h01") @[WishboneHost.scala 87:14]
        cycReg <= UInt<1>("h01") @[WishboneHost.scala 88:14]
        weReg <= io.reqIn.bits.isWrite @[WishboneHost.scala 89:13]
        adrReg <= io.reqIn.bits.addrRequest @[WishboneHost.scala 90:14]
        datReg <= io.reqIn.bits.dataRequest @[WishboneHost.scala 91:14]
        selReg <= io.reqIn.bits.activeByteLane @[WishboneHost.scala 92:14]
        skip @[WishboneHost.scala 85:92]
    io.wbMasterTransmitter.bits.stb <= stbReg @[WishboneHost.scala 95:37]
    io.wbMasterTransmitter.bits.cyc <= cycReg @[WishboneHost.scala 96:37]
    io.wbMasterTransmitter.bits.we <= weReg @[WishboneHost.scala 97:36]
    io.wbMasterTransmitter.bits.adr <= adrReg @[WishboneHost.scala 98:37]
    io.wbMasterTransmitter.bits.dat <= datReg @[WishboneHost.scala 99:37]
    io.wbMasterTransmitter.bits.sel <= selReg @[WishboneHost.scala 100:37]
    node _T_12 = eq(startWBTransaction, UInt<1>("h00")) @[WishboneHost.scala 102:10]
    when _T_12 : @[WishboneHost.scala 102:31]
      io.wbMasterTransmitter.bits.sel <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.dat <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.adr <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.we <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.stb <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      io.wbMasterTransmitter.bits.cyc <= UInt<1>("h00") @[WishboneHost.scala 103:118]
      skip @[WishboneHost.scala 102:31]
    node _T_13 = eq(io.wbSlaveReceiver.bits.err, UInt<1>("h00")) @[WishboneHost.scala 106:41]
    node _T_14 = and(io.wbSlaveReceiver.bits.ack, _T_13) @[WishboneHost.scala 106:38]
    when _T_14 : @[WishboneHost.scala 106:71]
      dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 107:15]
      respReg <= UInt<1>("h01") @[WishboneHost.scala 108:15]
      errReg <= UInt<1>("h00") @[WishboneHost.scala 109:14]
      startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 111:26]
      skip @[WishboneHost.scala 106:71]
    else : @[WishboneHost.scala 112:78]
      node _T_15 = eq(io.wbSlaveReceiver.bits.ack, UInt<1>("h00")) @[WishboneHost.scala 112:48]
      node _T_16 = and(io.wbSlaveReceiver.bits.err, _T_15) @[WishboneHost.scala 112:45]
      when _T_16 : @[WishboneHost.scala 112:78]
        dataReg <= io.wbSlaveReceiver.bits.dat @[WishboneHost.scala 113:15]
        respReg <= UInt<1>("h01") @[WishboneHost.scala 114:15]
        errReg <= UInt<1>("h01") @[WishboneHost.scala 115:14]
        startWBTransaction <= UInt<1>("h00") @[WishboneHost.scala 116:26]
        skip @[WishboneHost.scala 112:78]
    node _T_17 = eq(stateReg, UInt<1>("h00")) @[WishboneHost.scala 119:19]
    when _T_17 : @[WishboneHost.scala 119:29]
      node _stateReg_T = or(io.wbSlaveReceiver.bits.ack, io.wbSlaveReceiver.bits.err) @[WishboneHost.scala 120:51]
      node _stateReg_T_1 = mux(_stateReg_T, UInt<1>("h01"), UInt<1>("h00")) @[WishboneHost.scala 120:22]
      stateReg <= _stateReg_T_1 @[WishboneHost.scala 120:16]
      skip @[WishboneHost.scala 119:29]
    else : @[WishboneHost.scala 121:42]
      node _T_18 = eq(stateReg, UInt<1>("h01")) @[WishboneHost.scala 121:26]
      when _T_18 : @[WishboneHost.scala 121:42]
        respReg <= UInt<1>("h00") @[WishboneHost.scala 122:15]
        stateReg <= UInt<1>("h00") @[WishboneHost.scala 123:16]
        skip @[WishboneHost.scala 121:42]
    io.rspOut.valid <= respReg @[WishboneHost.scala 128:21]
    io.rspOut.bits.dataResponse <= dataReg @[WishboneHost.scala 129:33]
    io.rspOut.bits.error <= errReg @[WishboneHost.scala 130:26]
    
  module WishboneDevice : 
    input clock : Clock
    input reset : Reset
    output io : {wbSlaveTransmitter : {flip ready : UInt<1>, valid : UInt<1>, bits : {ack : UInt<1>, dat : UInt<32>, err : UInt<1>}}, flip wbMasterReceiver : {flip ready : UInt<1>, valid : UInt<1>, bits : {cyc : UInt<1>, stb : UInt<1>, we : UInt<1>, adr : UInt<32>, dat : UInt<32>, sel : UInt<4>}}, reqOut : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, flip rspIn : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}}
    
    wire ack : UInt<1>
    ack <= UInt<1>("h00")
    io.wbMasterReceiver.ready <= UInt<1>("h01") @[WishboneDevice.scala 19:29]
    io.rspIn.ready <= UInt<1>("h01") @[WishboneDevice.scala 23:18]
    node _T = and(io.wbMasterReceiver.valid, io.wbMasterReceiver.bits.cyc) @[WishboneDevice.scala 16:48]
    node _T_1 = and(_T, io.wbMasterReceiver.bits.stb) @[WishboneDevice.scala 16:80]
    when _T_1 : @[WishboneDevice.scala 25:16]
      node _T_2 = eq(io.wbMasterReceiver.bits.we, UInt<1>("h00")) @[WishboneDevice.scala 26:10]
      when _T_2 : @[WishboneDevice.scala 26:40]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 31:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 32:34]
        io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 33:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 34:37]
        io.reqOut.bits.isWrite <= UInt<1>("h00") @[WishboneDevice.scala 35:30]
        node _T_3 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 36:30]
        node _T_4 = and(io.rspIn.valid, _T_3) @[WishboneDevice.scala 36:27]
        when _T_4 : @[WishboneDevice.scala 36:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 38:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 39:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 40:40]
          io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 41:40]
          skip @[WishboneDevice.scala 36:52]
        else : @[WishboneDevice.scala 42:58]
          node _T_5 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 42:34]
          when _T_5 : @[WishboneDevice.scala 42:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 43:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 44:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 45:40]
            io.wbSlaveTransmitter.bits.dat <= io.rspIn.bits.dataResponse @[WishboneDevice.scala 46:40]
            skip @[WishboneDevice.scala 42:58]
          else : @[WishboneDevice.scala 47:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 48:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 49:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 50:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 51:40]
            skip @[WishboneDevice.scala 47:20]
        skip @[WishboneDevice.scala 26:40]
      else : @[WishboneDevice.scala 53:18]
        io.reqOut.valid <= UInt<1>("h01") @[WishboneDevice.scala 55:23]
        io.reqOut.bits.addrRequest <= io.wbMasterReceiver.bits.adr @[WishboneDevice.scala 56:34]
        io.reqOut.bits.dataRequest <= io.wbMasterReceiver.bits.dat @[WishboneDevice.scala 57:34]
        io.reqOut.bits.activeByteLane <= io.wbMasterReceiver.bits.sel @[WishboneDevice.scala 58:37]
        io.reqOut.bits.isWrite <= io.wbMasterReceiver.bits.we @[WishboneDevice.scala 59:30]
        node _T_6 = eq(io.rspIn.bits.error, UInt<1>("h00")) @[WishboneDevice.scala 60:30]
        node _T_7 = and(io.rspIn.valid, _T_6) @[WishboneDevice.scala 60:27]
        when _T_7 : @[WishboneDevice.scala 60:52]
          io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 61:37]
          ack <= UInt<1>("h01") @[WishboneDevice.scala 62:13]
          io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 63:40]
          io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 64:40]
          skip @[WishboneDevice.scala 60:52]
        else : @[WishboneDevice.scala 65:58]
          node _T_8 = and(io.rspIn.valid, io.rspIn.bits.error) @[WishboneDevice.scala 65:34]
          when _T_8 : @[WishboneDevice.scala 65:58]
            io.wbSlaveTransmitter.valid <= UInt<1>("h01") @[WishboneDevice.scala 66:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 67:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h01") @[WishboneDevice.scala 68:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 69:40]
            skip @[WishboneDevice.scala 65:58]
          else : @[WishboneDevice.scala 70:20]
            io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 71:37]
            ack <= UInt<1>("h00") @[WishboneDevice.scala 72:13]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 73:40]
            io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 74:40]
            io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 75:40]
            skip @[WishboneDevice.scala 70:20]
        skip @[WishboneDevice.scala 53:18]
      skip @[WishboneDevice.scala 25:16]
    else : @[WishboneDevice.scala 79:16]
      io.reqOut.valid <= UInt<1>("h00") @[WishboneDevice.scala 81:21]
      io.reqOut.bits.addrRequest is invalid @[WishboneDevice.scala 82:32]
      io.reqOut.bits.dataRequest is invalid @[WishboneDevice.scala 83:32]
      io.reqOut.bits.activeByteLane is invalid @[WishboneDevice.scala 84:35]
      io.reqOut.bits.isWrite is invalid @[WishboneDevice.scala 85:28]
      io.wbSlaveTransmitter.valid <= UInt<1>("h00") @[WishboneDevice.scala 87:33]
      ack <= UInt<1>("h00") @[WishboneDevice.scala 88:9]
      io.wbSlaveTransmitter.bits.err <= UInt<1>("h00") @[WishboneDevice.scala 89:36]
      io.wbSlaveTransmitter.bits.dat is invalid @[WishboneDevice.scala 90:36]
      skip @[WishboneDevice.scala 79:16]
    io.wbSlaveTransmitter.bits.ack <= ack @[WishboneDevice.scala 93:34]
    
  module uartTX : 
    input clock : Clock
    input reset : Reset
    output io : {flip tx_en : UInt<1>, flip i_TX_Byte : UInt<8>, flip CLKS_PER_BIT : UInt<16>, o_TX_Serial : UInt<1>, o_TX_Done : UInt<1>}
    
    reg r_SM_Main : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartTX.scala 23:28]
    reg r_Clock_Count : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[uartTX.scala 24:32]
    reg r_Bit_Index : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartTX.scala 25:30]
    reg r_TX_Data : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uartTX.scala 26:28]
    reg r_TX_Done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uartTX.scala 27:28]
    io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 32:20]
    node _T = eq(UInt<3>("h00"), r_SM_Main) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 35:28]
      r_TX_Done <= UInt<1>("h00") @[uartTX.scala 36:23]
      r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 37:27]
      r_Bit_Index <= UInt<1>("h00") @[uartTX.scala 38:25]
      node _T_1 = eq(io.tx_en, UInt<1>("h01")) @[uartTX.scala 40:27]
      when _T_1 : @[uartTX.scala 40:35]
        r_TX_Data <= io.i_TX_Byte @[uartTX.scala 41:27]
        r_SM_Main <= UInt<3>("h01") @[uartTX.scala 42:27]
        skip @[uartTX.scala 40:35]
      else : @[uartTX.scala 43:24]
        r_SM_Main <= UInt<3>("h00") @[uartTX.scala 44:27]
        skip @[uartTX.scala 43:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<3>("h01"), r_SM_Main) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        io.o_TX_Serial <= UInt<1>("h00") @[uartTX.scala 49:28]
        node _T_3 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 51:49]
        node _T_4 = tail(_T_3, 1) @[uartTX.scala 51:49]
        node _T_5 = lt(r_Clock_Count, _T_4) @[uartTX.scala 51:32]
        when _T_5 : @[uartTX.scala 51:54]
          node _r_Clock_Count_T = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 52:48]
          node _r_Clock_Count_T_1 = tail(_r_Clock_Count_T, 1) @[uartTX.scala 52:48]
          r_Clock_Count <= _r_Clock_Count_T_1 @[uartTX.scala 52:31]
          r_SM_Main <= UInt<3>("h01") @[uartTX.scala 53:27]
          skip @[uartTX.scala 51:54]
        else : @[uartTX.scala 54:24]
          r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 55:31]
          r_SM_Main <= UInt<3>("h02") @[uartTX.scala 56:27]
          skip @[uartTX.scala 54:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<3>("h02"), r_SM_Main) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          node _io_o_TX_Serial_T = dshr(r_TX_Data, r_Bit_Index) @[uartTX.scala 61:40]
          node _io_o_TX_Serial_T_1 = bits(_io_o_TX_Serial_T, 0, 0) @[uartTX.scala 61:40]
          io.o_TX_Serial <= _io_o_TX_Serial_T_1 @[uartTX.scala 61:28]
          node _T_7 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 63:50]
          node _T_8 = tail(_T_7, 1) @[uartTX.scala 63:50]
          node _T_9 = lt(r_Clock_Count, _T_8) @[uartTX.scala 63:32]
          when _T_9 : @[uartTX.scala 63:56]
            node _r_Clock_Count_T_2 = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 64:48]
            node _r_Clock_Count_T_3 = tail(_r_Clock_Count_T_2, 1) @[uartTX.scala 64:48]
            r_Clock_Count <= _r_Clock_Count_T_3 @[uartTX.scala 64:31]
            r_SM_Main <= UInt<3>("h02") @[uartTX.scala 65:27]
            skip @[uartTX.scala 63:56]
          else : @[uartTX.scala 66:24]
            r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 67:31]
            node _T_10 = lt(r_Bit_Index, UInt<3>("h07")) @[uartTX.scala 68:34]
            when _T_10 : @[uartTX.scala 68:40]
              node _r_Bit_Index_T = add(r_Bit_Index, UInt<1>("h01")) @[uartTX.scala 69:48]
              node _r_Bit_Index_T_1 = tail(_r_Bit_Index_T, 1) @[uartTX.scala 69:48]
              r_Bit_Index <= _r_Bit_Index_T_1 @[uartTX.scala 69:33]
              r_SM_Main <= UInt<3>("h02") @[uartTX.scala 70:31]
              skip @[uartTX.scala 68:40]
            else : @[uartTX.scala 71:28]
              r_Bit_Index <= UInt<1>("h00") @[uartTX.scala 72:33]
              r_SM_Main <= UInt<3>("h03") @[uartTX.scala 73:31]
              skip @[uartTX.scala 71:28]
            skip @[uartTX.scala 66:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<3>("h03"), r_SM_Main) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 81:28]
            node _T_12 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartTX.scala 83:50]
            node _T_13 = tail(_T_12, 1) @[uartTX.scala 83:50]
            node _T_14 = lt(r_Clock_Count, _T_13) @[uartTX.scala 83:32]
            when _T_14 : @[uartTX.scala 83:56]
              node _r_Clock_Count_T_4 = add(r_Clock_Count, UInt<1>("h01")) @[uartTX.scala 84:48]
              node _r_Clock_Count_T_5 = tail(_r_Clock_Count_T_4, 1) @[uartTX.scala 84:48]
              r_Clock_Count <= _r_Clock_Count_T_5 @[uartTX.scala 84:31]
              r_SM_Main <= UInt<3>("h03") @[uartTX.scala 85:27]
              skip @[uartTX.scala 83:56]
            else : @[uartTX.scala 86:24]
              r_TX_Done <= UInt<1>("h01") @[uartTX.scala 87:27]
              r_Clock_Count <= UInt<1>("h00") @[uartTX.scala 88:31]
              r_SM_Main <= UInt<3>("h04") @[uartTX.scala 89:27]
              skip @[uartTX.scala 86:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h04"), r_SM_Main) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              io.o_TX_Serial <= UInt<1>("h01") @[uartTX.scala 95:28]
              r_TX_Done <= UInt<1>("h01") @[uartTX.scala 96:23]
              r_SM_Main <= UInt<3>("h00") @[uartTX.scala 97:23]
              skip @[Conditional.scala 39:67]
    io.o_TX_Done <= r_TX_Done @[uartTX.scala 103:18]
    
  module uartRX : 
    input clock : Clock
    input reset : Reset
    output io : {flip i_Rx_Serial : UInt<1>, flip CLKS_PER_BIT : UInt<16>, o_Rx_DV : UInt<1>, o_Rx_Byte : UInt<8>}
    
    reg rxReg_REG : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uartRX.scala 18:32]
    rxReg_REG <= io.i_Rx_Serial @[uartRX.scala 18:32]
    reg rxReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[uartRX.scala 18:24]
    rxReg <= rxReg_REG @[uartRX.scala 18:24]
    reg shiftReg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[uartRX.scala 19:27]
    reg r_SM_Main : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartRX.scala 21:28]
    reg r_Clock_Count : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[uartRX.scala 22:32]
    reg r_Bit_Index : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[uartRX.scala 23:30]
    reg r_Rx_DV : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[uartRX.scala 24:26]
    node _T = eq(UInt<3>("h00"), r_SM_Main) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      r_Rx_DV <= UInt<1>("h00") @[uartRX.scala 28:21]
      r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 29:27]
      r_Bit_Index <= UInt<1>("h00") @[uartRX.scala 30:25]
      node _T_1 = eq(io.i_Rx_Serial, UInt<1>("h00")) @[uartRX.scala 33:33]
      when _T_1 : @[uartRX.scala 33:41]
        r_SM_Main <= UInt<3>("h01") @[uartRX.scala 34:27]
        skip @[uartRX.scala 33:41]
      else : @[uartRX.scala 35:24]
        r_SM_Main <= UInt<3>("h00") @[uartRX.scala 36:27]
        skip @[uartRX.scala 35:24]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_2 = eq(UInt<3>("h01"), r_SM_Main) @[Conditional.scala 37:30]
      when _T_2 : @[Conditional.scala 39:67]
        node _T_3 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 41:52]
        node _T_4 = tail(_T_3, 1) @[uartRX.scala 41:52]
        node _T_5 = div(_T_4, UInt<2>("h02")) @[uartRX.scala 41:57]
        node _T_6 = eq(r_Clock_Count, _T_5) @[uartRX.scala 41:32]
        when _T_6 : @[uartRX.scala 41:62]
          node _T_7 = eq(io.i_Rx_Serial, UInt<1>("h00")) @[uartRX.scala 42:37]
          when _T_7 : @[uartRX.scala 42:45]
            r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 43:35]
            r_SM_Main <= UInt<3>("h02") @[uartRX.scala 44:31]
            skip @[uartRX.scala 42:45]
          else : @[uartRX.scala 45:28]
            r_SM_Main <= UInt<3>("h00") @[uartRX.scala 46:31]
            skip @[uartRX.scala 45:28]
          skip @[uartRX.scala 41:62]
        else : @[uartRX.scala 48:24]
          node _r_Clock_Count_T = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 49:48]
          node _r_Clock_Count_T_1 = tail(_r_Clock_Count_T, 1) @[uartRX.scala 49:48]
          r_Clock_Count <= _r_Clock_Count_T_1 @[uartRX.scala 49:31]
          r_SM_Main <= UInt<3>("h01") @[uartRX.scala 50:27]
          skip @[uartRX.scala 48:24]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<3>("h02"), r_SM_Main) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          node _T_9 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 55:50]
          node _T_10 = tail(_T_9, 1) @[uartRX.scala 55:50]
          node _T_11 = lt(r_Clock_Count, _T_10) @[uartRX.scala 55:32]
          when _T_11 : @[uartRX.scala 55:56]
            node _r_Clock_Count_T_2 = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 56:48]
            node _r_Clock_Count_T_3 = tail(_r_Clock_Count_T_2, 1) @[uartRX.scala 56:48]
            r_Clock_Count <= _r_Clock_Count_T_3 @[uartRX.scala 56:31]
            r_SM_Main <= UInt<3>("h02") @[uartRX.scala 57:27]
            skip @[uartRX.scala 55:56]
          else : @[uartRX.scala 58:24]
            r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 59:31]
            node shiftReg_lo = shr(shiftReg, 1) @[uartRX.scala 60:49]
            node _shiftReg_T = cat(rxReg, shiftReg_lo) @[Cat.scala 30:58]
            shiftReg <= _shiftReg_T @[uartRX.scala 60:26]
            node _T_12 = lt(r_Bit_Index, UInt<3>("h07")) @[uartRX.scala 62:34]
            when _T_12 : @[uartRX.scala 62:40]
              node _r_Bit_Index_T = add(r_Bit_Index, UInt<1>("h01")) @[uartRX.scala 63:48]
              node _r_Bit_Index_T_1 = tail(_r_Bit_Index_T, 1) @[uartRX.scala 63:48]
              r_Bit_Index <= _r_Bit_Index_T_1 @[uartRX.scala 63:33]
              r_SM_Main <= UInt<3>("h02") @[uartRX.scala 64:31]
              skip @[uartRX.scala 62:40]
            else : @[uartRX.scala 65:28]
              r_Bit_Index <= UInt<1>("h00") @[uartRX.scala 66:33]
              r_SM_Main <= UInt<3>("h03") @[uartRX.scala 67:31]
              skip @[uartRX.scala 65:28]
            skip @[uartRX.scala 58:24]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_13 = eq(UInt<3>("h03"), r_SM_Main) @[Conditional.scala 37:30]
          when _T_13 : @[Conditional.scala 39:67]
            node _T_14 = sub(io.CLKS_PER_BIT, UInt<1>("h01")) @[uartRX.scala 74:50]
            node _T_15 = tail(_T_14, 1) @[uartRX.scala 74:50]
            node _T_16 = lt(r_Clock_Count, _T_15) @[uartRX.scala 74:32]
            when _T_16 : @[uartRX.scala 74:56]
              node _r_Clock_Count_T_4 = add(r_Clock_Count, UInt<1>("h01")) @[uartRX.scala 75:48]
              node _r_Clock_Count_T_5 = tail(_r_Clock_Count_T_4, 1) @[uartRX.scala 75:48]
              r_Clock_Count <= _r_Clock_Count_T_5 @[uartRX.scala 75:31]
              r_SM_Main <= UInt<3>("h03") @[uartRX.scala 76:27]
              skip @[uartRX.scala 74:56]
            else : @[uartRX.scala 77:24]
              r_Rx_DV <= UInt<1>("h01") @[uartRX.scala 78:25]
              r_Clock_Count <= UInt<1>("h00") @[uartRX.scala 79:31]
              r_SM_Main <= UInt<3>("h04") @[uartRX.scala 80:27]
              skip @[uartRX.scala 77:24]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_17 = eq(UInt<3>("h04"), r_SM_Main) @[Conditional.scala 37:30]
            when _T_17 : @[Conditional.scala 39:67]
              r_SM_Main <= UInt<3>("h00") @[uartRX.scala 85:23]
              r_Rx_DV <= UInt<1>("h00") @[uartRX.scala 86:21]
              skip @[Conditional.scala 39:67]
    io.o_Rx_DV <= r_Rx_DV @[uartRX.scala 90:16]
    io.o_Rx_Byte <= shiftReg @[uartRX.scala 91:18]
    
  module UartTOP : 
    input clock : Clock
    input reset : Reset
    output io : {flip ren : UInt<1>, flip we : UInt<1>, flip wdata : UInt<32>, flip addr : UInt<8>, flip rx_i : UInt<1>, rdata : UInt<32>, tx_o : UInt<1>, intr_tx : UInt<1>}
    
    reg control : UInt<16>, clock with : (reset => (reset, UInt<16>("h00"))) @[UartTOP.scala 29:26]
    reg tx : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 30:21]
    reg rx : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 31:21]
    reg rx_reg : UInt<8>, clock with : (reset => (reset, UInt<8>("h00"))) @[UartTOP.scala 32:25]
    reg rx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 33:24]
    reg tx_en : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 34:24]
    reg rx_status : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 35:28]
    reg rx_clr : UInt<1>, clock with : (reset => (reset, UInt<1>("h01"))) @[UartTOP.scala 36:25]
    reg rx_done : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[UartTOP.scala 37:26]
    node _T = eq(io.ren, UInt<1>("h00")) @[UartTOP.scala 39:10]
    node _T_1 = and(_T, io.we) @[UartTOP.scala 39:20]
    when _T_1 : @[UartTOP.scala 39:29]
      node _T_2 = eq(io.addr, UInt<1>("h00")) @[UartTOP.scala 40:22]
      when _T_2 : @[UartTOP.scala 40:36]
        node _control_T = bits(io.wdata, 15, 0) @[UartTOP.scala 41:32]
        control <= _control_T @[UartTOP.scala 41:21]
        skip @[UartTOP.scala 40:36]
      else : @[UartTOP.scala 42:40]
        node _T_3 = eq(io.addr, UInt<3>("h04")) @[UartTOP.scala 42:28]
        when _T_3 : @[UartTOP.scala 42:40]
          node _tx_T = bits(io.wdata, 7, 0) @[UartTOP.scala 43:27]
          tx <= _tx_T @[UartTOP.scala 43:16]
          skip @[UartTOP.scala 42:40]
        else : @[UartTOP.scala 44:38]
          node _T_4 = eq(io.addr, UInt<4>("h0c")) @[UartTOP.scala 44:28]
          when _T_4 : @[UartTOP.scala 44:38]
            node _rx_en_T = bits(io.wdata, 0, 0) @[UartTOP.scala 45:30]
            rx_en <= _rx_en_T @[UartTOP.scala 45:19]
            skip @[UartTOP.scala 44:38]
          else : @[UartTOP.scala 46:38]
            node _T_5 = eq(io.addr, UInt<5>("h010")) @[UartTOP.scala 46:28]
            when _T_5 : @[UartTOP.scala 46:38]
              node _tx_en_T = bits(io.wdata, 0, 0) @[UartTOP.scala 47:30]
              tx_en <= _tx_en_T @[UartTOP.scala 47:19]
              skip @[UartTOP.scala 46:38]
            else : @[UartTOP.scala 48:38]
              node _T_6 = eq(io.addr, UInt<5>("h018")) @[UartTOP.scala 48:28]
              when _T_6 : @[UartTOP.scala 48:38]
                node _rx_clr_T = bits(io.wdata, 0, 0) @[UartTOP.scala 49:31]
                rx_clr <= _rx_clr_T @[UartTOP.scala 49:20]
                skip @[UartTOP.scala 48:38]
              else : @[UartTOP.scala 50:20]
                tx <= UInt<1>("h00") @[UartTOP.scala 52:16]
                rx_en <= UInt<1>("h00") @[UartTOP.scala 53:19]
                tx_en <= UInt<1>("h00") @[UartTOP.scala 54:19]
                rx_clr <= UInt<1>("h00") @[UartTOP.scala 55:20]
                skip @[UartTOP.scala 50:20]
      skip @[UartTOP.scala 39:29]
    inst uart_tx of uartTX @[UartTOP.scala 60:25]
    uart_tx.clock <= clock
    uart_tx.reset <= reset
    uart_tx.io.tx_en <= tx_en @[UartTOP.scala 61:22]
    uart_tx.io.i_TX_Byte <= tx @[UartTOP.scala 62:26]
    uart_tx.io.CLKS_PER_BIT <= control @[UartTOP.scala 63:29]
    io.tx_o <= uart_tx.io.o_TX_Serial @[UartTOP.scala 66:13]
    io.intr_tx <= uart_tx.io.o_TX_Done @[UartTOP.scala 67:16]
    inst uart_rx of uartRX @[UartTOP.scala 69:25]
    uart_rx.clock <= clock
    uart_rx.reset <= reset
    when rx_en : @[UartTOP.scala 70:16]
      uart_rx.io.i_Rx_Serial <= io.rx_i @[UartTOP.scala 71:32]
      skip @[UartTOP.scala 70:16]
    else : @[UartTOP.scala 72:16]
      uart_rx.io.i_Rx_Serial <= UInt<1>("h01") @[UartTOP.scala 73:32]
      skip @[UartTOP.scala 72:16]
    uart_rx.io.CLKS_PER_BIT <= control @[UartTOP.scala 75:29]
    rx_done <= uart_rx.io.o_Rx_DV @[UartTOP.scala 77:13]
    rx <= uart_rx.io.o_Rx_Byte @[UartTOP.scala 78:8]
    when rx_done : @[UartTOP.scala 81:18]
      rx_reg <= rx @[UartTOP.scala 82:16]
      rx_status <= UInt<1>("h01") @[UartTOP.scala 83:19]
      skip @[UartTOP.scala 81:18]
    else : @[UartTOP.scala 84:26]
      node _T_7 = eq(rx_clr, UInt<1>("h00")) @[UartTOP.scala 84:16]
      when _T_7 : @[UartTOP.scala 84:26]
        rx_status <= UInt<1>("h00") @[UartTOP.scala 85:19]
        skip @[UartTOP.scala 84:26]
    node _io_rdata_T = eq(io.addr, UInt<5>("h014")) @[UartTOP.scala 88:29]
    node _io_rdata_T_1 = eq(io.addr, UInt<4>("h08")) @[UartTOP.scala 88:64]
    node _io_rdata_T_2 = mux(_io_rdata_T_1, rx_reg, UInt<1>("h00")) @[UartTOP.scala 88:55]
    node _io_rdata_T_3 = mux(_io_rdata_T, rx_status, _io_rdata_T_2) @[UartTOP.scala 88:20]
    io.rdata <= _io_rdata_T_3 @[UartTOP.scala 88:14]
    
  module uart : 
    input clock : Clock
    input reset : Reset
    output io : {flip request : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, response : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_uart_rx_i : UInt<1>, cio_uart_tx_o : UInt<1>, cio_uart_intr_tx_o : UInt<1>}
    
    io.request.ready <= UInt<1>("h01") @[uart.scala 19:22]
    inst uart_top of UartTOP @[uart.scala 57:27]
    uart_top.clock <= clock
    uart_top.reset <= reset
    wire write_register : UInt<1> @[uart.scala 60:46]
    wire read_register : UInt<1> @[uart.scala 60:46]
    wire data_reg : UInt<32> @[uart.scala 61:24]
    wire addr_reg : UInt<8> @[uart.scala 62:24]
    node _write_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _write_register_T_1 = mux(_write_register_T, io.request.bits.isWrite, UInt<1>("h00")) @[uart.scala 64:26]
    write_register <= _write_register_T_1 @[uart.scala 64:20]
    node _read_register_T = and(io.request.ready, io.request.valid) @[Decoupled.scala 40:37]
    node _read_register_T_1 = eq(io.request.bits.isWrite, UInt<1>("h00")) @[uart.scala 65:45]
    node _read_register_T_2 = mux(_read_register_T, _read_register_T_1, UInt<1>("h00")) @[uart.scala 65:25]
    read_register <= _read_register_T_2 @[uart.scala 65:19]
    data_reg <= io.request.bits.dataRequest @[uart.scala 66:14]
    node _addr_reg_T = bits(io.request.bits.addrRequest, 7, 0) @[uart.scala 67:44]
    addr_reg <= _addr_reg_T @[uart.scala 67:14]
    uart_top.io.wdata <= data_reg @[uart.scala 68:23]
    uart_top.io.addr <= addr_reg @[uart.scala 69:22]
    uart_top.io.we <= write_register @[uart.scala 70:20]
    uart_top.io.ren <= read_register @[uart.scala 71:21]
    node _io_response_bits_dataResponse_T = mux(io.response.ready, uart_top.io.rdata, UInt<1>("h00")) @[uart.scala 73:49]
    reg io_response_bits_dataResponse_REG : UInt, clock @[uart.scala 73:45]
    io_response_bits_dataResponse_REG <= _io_response_bits_dataResponse_T @[uart.scala 73:45]
    io.response.bits.dataResponse <= io_response_bits_dataResponse_REG @[uart.scala 73:35]
    node _io_response_valid_T = or(write_register, read_register) @[uart.scala 74:53]
    node _io_response_valid_T_1 = mux(_io_response_valid_T, UInt<1>("h01"), UInt<1>("h00")) @[uart.scala 74:37]
    reg io_response_valid_REG : UInt<1>, clock @[uart.scala 74:33]
    io_response_valid_REG <= _io_response_valid_T_1 @[uart.scala 74:33]
    io.response.valid <= io_response_valid_REG @[uart.scala 74:23]
    node _io_response_bits_error_T = mux(io.response.ready, uart_top.io.intr_tx, UInt<1>("h00")) @[uart.scala 75:42]
    reg io_response_bits_error_REG : UInt, clock @[uart.scala 75:38]
    io_response_bits_error_REG <= _io_response_bits_error_T @[uart.scala 75:38]
    io.response.bits.error <= io_response_bits_error_REG @[uart.scala 75:28]
    io.cio_uart_intr_tx_o <= uart_top.io.intr_tx @[uart.scala 77:27]
    io.cio_uart_tx_o <= uart_top.io.tx_o @[uart.scala 78:22]
    uart_top.io.rx_i <= io.cio_uart_rx_i @[uart.scala 79:22]
    
  module uartHarness : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip req : {flip ready : UInt<1>, valid : UInt<1>, bits : {addrRequest : UInt<32>, dataRequest : UInt<32>, activeByteLane : UInt<4>, isWrite : UInt<1>}}, rsp : {flip ready : UInt<1>, valid : UInt<1>, bits : {dataResponse : UInt<32>, error : UInt<1>}}, flip cio_uart_rx_i : UInt<1>, cio_uart_tx_o : UInt<1>, cio_uart_intr_tx_o : UInt<1>}
    
    inst hostAdapter of WishboneHost @[uartHarness.scala 24:27]
    hostAdapter.clock <= clock
    hostAdapter.reset <= reset
    inst deviceAdapter of WishboneDevice @[uartHarness.scala 25:29]
    deviceAdapter.clock <= clock
    deviceAdapter.reset <= reset
    inst uart_wrapper of uart @[uartHarness.scala 26:28]
    uart_wrapper.clock <= clock
    uart_wrapper.reset <= reset
    hostAdapter.io.reqIn.bits.isWrite <= io.req.bits.isWrite @[uartHarness.scala 28:24]
    hostAdapter.io.reqIn.bits.activeByteLane <= io.req.bits.activeByteLane @[uartHarness.scala 28:24]
    hostAdapter.io.reqIn.bits.dataRequest <= io.req.bits.dataRequest @[uartHarness.scala 28:24]
    hostAdapter.io.reqIn.bits.addrRequest <= io.req.bits.addrRequest @[uartHarness.scala 28:24]
    hostAdapter.io.reqIn.valid <= io.req.valid @[uartHarness.scala 28:24]
    io.req.ready <= hostAdapter.io.reqIn.ready @[uartHarness.scala 28:24]
    io.rsp.bits.error <= hostAdapter.io.rspOut.bits.error @[uartHarness.scala 29:10]
    io.rsp.bits.dataResponse <= hostAdapter.io.rspOut.bits.dataResponse @[uartHarness.scala 29:10]
    io.rsp.valid <= hostAdapter.io.rspOut.valid @[uartHarness.scala 29:10]
    hostAdapter.io.rspOut.ready <= io.rsp.ready @[uartHarness.scala 29:10]
    deviceAdapter.io.wbMasterReceiver.bits.sel <= hostAdapter.io.wbMasterTransmitter.bits.sel @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.bits.dat <= hostAdapter.io.wbMasterTransmitter.bits.dat @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.bits.adr <= hostAdapter.io.wbMasterTransmitter.bits.adr @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.bits.we <= hostAdapter.io.wbMasterTransmitter.bits.we @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.bits.stb <= hostAdapter.io.wbMasterTransmitter.bits.stb @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.bits.cyc <= hostAdapter.io.wbMasterTransmitter.bits.cyc @[uartHarness.scala 30:38]
    deviceAdapter.io.wbMasterReceiver.valid <= hostAdapter.io.wbMasterTransmitter.valid @[uartHarness.scala 30:38]
    hostAdapter.io.wbMasterTransmitter.ready <= deviceAdapter.io.wbMasterReceiver.ready @[uartHarness.scala 30:38]
    hostAdapter.io.wbSlaveReceiver.bits.err <= deviceAdapter.io.wbSlaveTransmitter.bits.err @[uartHarness.scala 31:34]
    hostAdapter.io.wbSlaveReceiver.bits.dat <= deviceAdapter.io.wbSlaveTransmitter.bits.dat @[uartHarness.scala 31:34]
    hostAdapter.io.wbSlaveReceiver.bits.ack <= deviceAdapter.io.wbSlaveTransmitter.bits.ack @[uartHarness.scala 31:34]
    hostAdapter.io.wbSlaveReceiver.valid <= deviceAdapter.io.wbSlaveTransmitter.valid @[uartHarness.scala 31:34]
    deviceAdapter.io.wbSlaveTransmitter.ready <= hostAdapter.io.wbSlaveReceiver.ready @[uartHarness.scala 31:34]
    uart_wrapper.io.request.bits.isWrite <= deviceAdapter.io.reqOut.bits.isWrite @[uartHarness.scala 33:27]
    uart_wrapper.io.request.bits.activeByteLane <= deviceAdapter.io.reqOut.bits.activeByteLane @[uartHarness.scala 33:27]
    uart_wrapper.io.request.bits.dataRequest <= deviceAdapter.io.reqOut.bits.dataRequest @[uartHarness.scala 33:27]
    uart_wrapper.io.request.bits.addrRequest <= deviceAdapter.io.reqOut.bits.addrRequest @[uartHarness.scala 33:27]
    uart_wrapper.io.request.valid <= deviceAdapter.io.reqOut.valid @[uartHarness.scala 33:27]
    deviceAdapter.io.reqOut.ready <= uart_wrapper.io.request.ready @[uartHarness.scala 33:27]
    deviceAdapter.io.rspIn.bits.error <= uart_wrapper.io.response.bits.error @[uartHarness.scala 34:28]
    deviceAdapter.io.rspIn.bits.dataResponse <= uart_wrapper.io.response.bits.dataResponse @[uartHarness.scala 34:28]
    deviceAdapter.io.rspIn.valid <= uart_wrapper.io.response.valid @[uartHarness.scala 34:28]
    uart_wrapper.io.response.ready <= deviceAdapter.io.rspIn.ready @[uartHarness.scala 34:28]
    uart_wrapper.io.cio_uart_rx_i <= io.cio_uart_rx_i @[uartHarness.scala 36:35]
    io.cio_uart_tx_o <= uart_wrapper.io.cio_uart_tx_o @[uartHarness.scala 37:22]
    io.cio_uart_intr_tx_o <= uart_wrapper.io.cio_uart_intr_tx_o @[uartHarness.scala 38:27]
    
